<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-detnet-tcqf-00" category="std" consensus="true" submissionType="IETF" tocDepth="5" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="detnet-tcqf">Deterministic Networking (DetNet) Data Plane - Tagged Cyclic Queuing and Forwarding (TCQF) for bounded latency with low jitter in large scale DetNets</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization>University of Surrey ICS</organization>
      <address>
        <email>s.bryant@surrey.ac.uk</email>
      </address>
    </author>
    <author initials="A. G." surname="Malis" fullname="Andrew G. Malis">
      <organization>Malis Consulting</organization>
      <address>
        <email>agmalis@gmail.com</email>
      </address>
    </author>

    <date year="2022" month="October" day="05"/>

    
    <workgroup>DETNET</workgroup>
    

    <abstract>


<t>This memo specifies a forwarding method for bounded latency for Deterministic Networks.
It uses cycle tagging of packets for cyclic queuing and forwarding with multiple buffers (TCQF).
This memo standardizes tagging via the MPLS packet Traffic Class (TC) field for MPLS links and the
IP/IPv6 DSCPfield for IP/IPv6 links. The short-hand for this mechanism is Tagged Cyclic Queuing and Forwarding (TCQF).</t>

<t>Target benefits of TCQF include low end-to-end
jitter, ease of high-speed hardware implementation, optional ability to support large number
of flow in large networks via DiffServ style aggregation by applying TCQF to
the DetNet aggregate instead of each DetNet flow individually, and support of wide-area DetNet
networks with arbitrary link latencies and latency variations.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction-informative"><name>Introduction (informative)</name>

<t>Cyclic Queuing and Forwarding (CQF), <xref target="IEEE802.1Qch"/>, is an IEEE standardized queuing mechanism in support of deterministic bounded latency. See also <xref target="I-D.ietf-detnet-bounded-latency"/>, Section 6.6.</t>

<t>CQF benefits for Deterministic QoS include the tightly bounded jitter it provides as well as the per-flow stateless operation, minimizing the complexity of high-speed hardware implementations and allowing to support on transit hops arbitrary number of DetNet flow in the forwarding plane because of the absence of per-hop, per-flow QoS processing. In the terms of the IETF QoS architecture, CQF can be called DiffServ QoS technology, operating only on a traffic aggregate.</t>

<t>CQFs is limited to only limited-scale wide-area network deployments because it cannot take the propagation latency of links into account, nor potential variations thereof. It also requires very high precision clock synchronization, which is uncommon in wide-area network equipment beyond mobile network fronthaul. See <xref target="I-D.eckert-detnet-bounded-latency-problems"/> for more details.</t>

<t>This specification introduces and utilizes an enhanced form of CQF where packets are tagged with cycle identifiers for a limited number of cycles (such as 3...7) and hop-by-hop forwarded through the use of per-cycle buffers. This multiple buffer forwarding overcome the distance and clock synchronization limitations of CQF. <xref target="I-D.qiang-DetNet-large-scale-DetNet"/> and <xref target="I-D.dang-queuing-with-multiple-cyclic-buffers"/> provide additional details about the background of TCQF. TCQF does not depend on other elements of <xref target="RFC8655"/>, so it can also be used in otherwise non-deterministic IP or MPLS networks to achieve bounded latency and low jitter.</t>

<t>TCQF is likely especially beneficial when networks are architected to avoid per-hop, per-flow state even for traffic steering, which is the case for networks using SR-MPLS <xref target="RFC8402"/> for traffic steering of MPLS unicast traffic, SRv6 <xref target="RFC8986"/> for traffic steeering of IPv6 unicast traffic and/or BIER-TE <xref target="I-D.ietf-bier-te-arch"/> for tree engineering of MPLS multicast traffic (using the TC and/or DSCP header fields of BIER packets according to <xref target="RFC8296"/>).</t>

<t>In these networks, it is specifically undesirable to require per-flow signaling to non-edge forwarders (such as P-LSR in MPLS networks) solely for DetNet QoS because such per-flow state is unnecessary for traffic steering and would only be required for the bounded latency QoS mechanism and require likely even more complex hardware and manageability support than what was previously required for per-hop steering state (such as in RSVP-TE, <xref target="RFC4875"/>). Note that the DetNet architecture <xref target="RFC8655"/> does not include full support for this DiffServ model, which is why this memo describes how to use TCQF with the DetNet architecture per-hop, per-flow processing as well as without it.</t>

</section>
<section anchor="using-tcqf-in-the-detnet-architecture-and-mpls-forwarding-plane-informative"><name>Using TCQF in the DetNet Architecture and MPLS forwarding plane (informative)</name>

<t>This section gives an overview of how the operations of TCQF relates
to the DetNet architecture. We first revisit QoS with DetNet in the absence of TCQF
using an MPLS network as an example.</t>

<figure title="A DetNet MPLS Network" anchor="FIG-DetNet-MPLS"><artwork><![CDATA[
 DetNet MPLS       Relay       Transit         Relay       DetNet MPLS
 End System        Node         Node           Node        End System
    T-PE1          S-PE1        LSR-P          S-PE2       T-PE2
 +----------+                                             +----------+
 |   Appl.  |<------------ End-to-End Service ----------->|   Appl.  |
 +----------+   +---------+                 +---------+   +----------+
 | Service  |<--| Service |-- DetNet flow --| Service |-->| Service  |
 +----------+   +---------+  +----------+   +---------+   +----------+
 |Forwarding|   |Fwd| |Fwd|  |Forwarding|   |Fwd| |Fwd|   |Forwarding|
 +-------.--+   +-.-+ +-.-+  +----.---.-+   +-.-+ +-.-+   +---.------+
         :  Link  :    /  ,-----.  \   : Link :    /  ,-----.  \
         +........+    +-[ Sub-  ]-+   +......+    +-[ Sub-  ]-+
                         [Network]                   [Network]
                          `-----'                     `-----'
         |<- LSP -->| |<-------- LSP -----------| |<--- LSP -->|
  
         |<----------------- DetNet MPLS --------------------->|
]]></artwork></figure>

<t>The above <xref target="FIG-DetNet-MPLS"/>, is copied from <xref target="RFC8964"/>, Figure 2, 
and only enhanced by numbering the nodes to be able to better refer
to them in the following text.</t>

<t>Assume a DetNet flow is sent from T-PE1 to T-PE2 across S-PE1, LSR, S-PE2. 
In general, bounded latency QoS processing is then required on the
outgoing interface of T-PE1 towards S-PE1, and any further outgoing
interface along the path. When T-PE1 and S-PE2 know that their next-hop
is a service LSR, their DetNet flow label stack may simply have the
DetNet flows Service Label (S-Label) as its Top of Stack (ToS) LSE,
explicitly indicating one DetNet flow.</t>

<t>On S-PE1, the next-hop LSR is
not DetNet aware, which is why S-PE1 would need to send a label stack
where the S-Label is followed by a Forwarding Label (F-Label), and
LSR-P would need to perform bounded latency based QoS on that F-Label.</t>

<t>For bounded latency QoS mechanisms relying on per-flow regulator state (aka:
per-flow packet scheduling), such as in <xref target="TSN-ATS"/>, this requires the use of a
per-detnet flow F-Labels across the network from S-PE1 to S-PE2. These could
for for example be assigned/managed through RSVP-TE <xref target="RFC3209"/>
enhanced as necessary with QoS parameters matching the underlying bounded
latency mechanism (such as <xref target="TSN-ATS"/>).</t>

<t>With TCQF, a sequence of LSR and DetNet service node implements
TCQF with MPLS TC, ideally from T-PE1 (ingress) to T-PE2 (egress).  The ingress
node needs to perform per-DetNet-flow per-packet "shaping"/"regulating" to  assign
each packet of a flow to a particular TCQF cycle. This is specified in <xref target="ingress"/>.</t>

<t>All LSR/Service nodes after the ingress node only have to map a
received TCQF tagged DetNet packet to the configured cycle
on the output interface, not requiring any per-DetNet-flow QoS state.
These LSR/Service nodes do therefore also not require per-flow
interactions with the controller plane for the purpose of bounded latency.</t>

<t>Per-flow state therefore is only required on nodes that are 
DetNet service nodes, or when explicit, per-DetNet flow steering
state is desired, instead of ingress steering through e.g.: SR-MPLS.</t>

<t>Operating TCQF per-flow stateless across a service node, such as S-PE1, S-PE2
in the picture is only one option. It is of course equally feasible to
Have one TCQF domain from T-PE1 to S-PE2, start a new TCQF domain there,
running for example up to S-PE2 and start another one to T-PE2.</t>

<t>A service node must act as an egress/ingress edge of a TCQF domain if it needs
to perform operations that do change the timing of packets other than
the type of latency that can be considered in configuration of TCQF (see <xref target="calculation"></xref>).</t>

<t>For example, if T-PE1 is ingress for a TCQF domain, and T-PE2 is the egress,
S-PE1 could perform the DetNet Packet Replication Function (PRF)  without having to be a TQCF 
edge node as long as it does not introduce latencies not included in the TCQF
setup and the controller plane reserves resources for the multitude of flows
created by the replication taking the allocation of resources in the TCQF cycles into account.</t>

<t>Likewise, S-PE2 could perform the Packet Elimination Function without being
a TCQF edge node as this most likely does not introduce any non-TCQF acceptable
latency - and the controller plane accordingly reserves only for one flow
the resources on the S-PE2-&gt;T-PE2 leg.</t>

<t>If on the other hand, S-PE2 was to perform the Packet Reordering Function (PRF), this could
create large peaks of packets when out-of-order packets are released together.
A PRF would either have to take care of shaping out those bursts for the traffic
of a flow to again conform to the admitted CIR/PIR, or else the service node
would have to be a TCQF egress/ingress, performing that shaping itself as an
ingress function.</t>

</section>
<section anchor="forwarding"><name>TCQF per-flow stateless forwarding (normative)</name>

<section anchor="model"><name>Configuration Data model and tag processing for MPLS TC tags</name>

<t>The following data model summarizes the configuration parameters
as required for TCQF and discussed in further sections. 'tcqf' 
includes the parameters independent of the tagging on an interface.
'tcqf_*' describes the parameters for interfaces using MPLS TC and
IP DSCP tagging.</t>

<figure title="TCQF Configuration Data Model" anchor="FIG-Data-Model"><artwork><![CDATA[
# Encapsulation agnostic data
tcqf 
+-- uint16 cycles
+-- uint16 cycle_time
+-- uint32 cycle_clock_offset
+-- if_config[oif] # Outgoing InterFace
    +-- uint32 cycle_clock_offset
    +-- cycle_map[iif] # Incoming InterFace
        +--uint8 oif_cycle[iif_cycle]
 
# MPLS TC tagging specific data
tcqf_tc[oif]
+--uint8 tc[oif_cycle]

# IP/IPv6 DSCP tagging specific data
tcqf_dscp[oif]
+--uint8 dscp[oif_cycle]
]]></artwork></figure>

</section>
<section anchor="packet-processing"><name>Packet processing</name>

<t>This section explains the TCQF packet processing and through
it, introduces the semantic of the objects in <xref target="FIG-Data-Model"/></t>

<t>tcqf contains the router wide configuration of TCQF parameters,
independent of the specific tagging mechanism on any interface. Any
interface can have a different tagging method. This document uses the term
router when it is irrelevant whether forwarding is for IP or MPLS packet,
and the term Label Switched Router (LSR) to indicate MPLS is used, or IP
router to indicate IP or IPv6 are used.</t>

<t>The model represents a single TQCF domain, which is a set of
interfaces acting both as ingress (iif) and egress (oif)
interfaces, capable to forward TCQF packets amongst each other. A router
may have multiple TCQF domains each with a set of interfaces disjoint
from those of any other TCQF domain.</t>

<t>tcqf.cycles is the number of cycles used across all interfaces in the TCQF domain.
routers MUST support 3 and 4 cycles. To support interfaces with MPLS TC tagging,
7 or less cycles MUST be used across all interfaces in the CQF domain.</t>

<t>The unit of tcqf.cycle_time is micro-seconds.
routers MUST support configuration of cycle-times of 20,50,100,200,500,1000,2000 usec.</t>

<t>Cycles start at an offset of tcqf.cycle_clock_offset in units of nsec as follows. 
Let clock1 be a timestamp of the local reference clock for TCQF, at which
cycle 1 starts, then:</t>

<t>tcqf.cycle_clock_offset = (clock1 mod (tcqf.cycle_time * tcqf.cycles) )</t>

<t>The local reference clock of the LSR/router is expected to be synchronized with
the neighboring LSR/router in TCQF domain.  tcqf.cycle_clock_offset can be configurable
by the operator, or it can be read-only. In either case will the operator be
able to configure working TCQF forwarding through appropriately calculated
cycle mapping.</t>

<t>tcqf.if_config[oif] is optional per-interface configuration of TCQF parameters.
tcqf.if_config[oif].cycle_clock_offset may be different from tcqf.cycle_clock_offset,
for example, when interfaces are on line cards with independently synchronized clocks,
or when non-uniform ingress-to-egress propagation latency over a complex router/LSR
fabric makes it beneficial to allow per-egress interface or line card configuration
of cycle_clock_offset. It may be configurable or read-only.</t>

<t>The value of -1 for tcqf.if_config[oif].cycle_clock_offset is used to indicate
that the domain wide tcqf.cycle_clock_offset is to be used for oif.
This is the only permitted negative number for this parameter.</t>

<t>When a packet is received from iif with a cycle value of iif_cycle and the
packet is routed towards oif, then the cycle value (and buffer) to use on
oif is tcqf.if_config[oif].cycle_map[iif].oif_cycle[iif_cycle]. This is
called the cycle mapping and is must be configurable. This cycle mapping
always happens when the packet is received with a cycle tag on an interface
in a TCQF domain and forwarded to another interface in the same TCQF domain.</t>

<t>tcqf_tc[oif].tc[oif_cycle] defines how to map from the internal cycle number
oif_cycle to an MPLS TC value on interface oif. tcqf_tc[oif] MUST be
configured, when oif uses MPLS. This oif_cycle &lt;=&gt; tc mapping is not only
 used to map from internal cycle number to MPLS TC tag when sending
packets, but also to map from MPLS TC tag to the internal cycle number when
receiving packets. Likewise, tcqf_dscp[oif] MUST be configured, when oif uses
IP/IPv6.</t>

<t>This data model does not determine whether interfaces use MPLS or IP/IPv6
encapsulation. This is determined by the setup of the DetNet domain. A mixed
use of MPLS and IP/IPv6 interfaces is possible with this data model, but
at the time of writing this document not supported by DetNet.</t>

</section>
<section anchor="tcqf-with-mpls-label-stack-operations"><name>TCQF with MPLS label stack operations</name>

<t>In the terminology of <xref target="RFC3270"/>, TCQF QoS as defined here, is 
TC-Inferred-PSC LSP (E-LSP) behavior: Packets are determined to
belong to the TCQF PSC solely based on the TC of the received
packet.</t>

<t>The internal cycle number SHOULD be assigned from the Top of Stack (ToS)
MPLS label TC bits before any other label stack operations
happens. On the egress side, the TC value of the ToS MPLS label
SHOULD be assigned from the internal cycle number after any label
stack processing.</t>

<t>With this order of processing, TCQF can support forwarding of
packets with any label stack operations such as label swap in the
case of LDP or RSVP-TE created LSP, Penultimate Hop Popping (PHP),
or no label changes from SID hop-by-hop forwarding and/or SID/label
pop as in the case of SR-MPLS traffic steering.</t>

</section>
<section anchor="tcqf-with-ip-operations"><name>TCQF with IP operations</name>

<t>As how DetNet domains are currently assumed to be single administrative network
operator domains, this document does not ask for standardization
of the DSCP to use with TCQF. Instead, deployments wanting to use TCQF with
IP/IPv6 encapsulation need to assign within their domain DSCP from the
xxxx11 "EXP/LU" Codepoint space according to <xref target="RFC2474"/>, Section 6. This
allows up to 16 DSCP for intradomain use.</t>

</section>
<section anchor="tcqf-pseudocode-normative"><name>TCQF Pseudocode (normative)</name>

<t>The following pseudocode restates the forwarding behavior of <xref target="forwarding"/>
in an algorithmic fashion as pseudocode. It uses the objects of the TCQF configuration
data model defined in <xref target="model"></xref>.</t>

<figure title="TCQF Pseudocode" anchor="FIG-Pseudocode"><artwork><![CDATA[
void receive(pak) {
  // Receive side TCQF - retrieve cycle of received packet
  // from packet internal header
  iif = pak.context.iif
  if (tcqf.if_config[iif]) { // TCQF enabled on iif
    if (tcqf_tc[iif]) {      // MPLS TCQF enabled on iif
      tc = pak.mpls_header.lse[tos].tc
      pak.context.tcqf_cycle = map_tc2cycle( tc, tcqf_tc[iif])
    } else
    if (tcqf_dscp[iif]) {      // IP TCQF enabled on iif
      dscp = pak.ip_header.dscp
      pak.context.tcqf_cycle = map_dscp2cycle( dscp, tcqf_dscp[iif])
    } else // ... other encaps
  }
  forward(pak);
}

// ... Forwarding including any label stack operations

void forward(pak) {
  oif = pak.context.oif = forward_process(pak)

  if(ingres_flow_enqueue(pak))
    return // ingress packets are only enqueued here.

  if(pak.context.tcqf_cycle) // non TCQF packets cycle is 0
    if(tcqf.if_config[oif]) {    // TCQF enabled on OIF
      // Map tcqf_cycle iif to oif - encap agnostic
      cycle = pak.context.tcqf_cycle
            = map_cycle(cycle,
              tcqf.if_config[oif].cycle_map[[iif])
  
      // MPLS TC-TCQF
      if(tcqf.tc[oif]) {
        pak.mpls_header.lse[tos].tc = map_cycle2tc(cycle, tcqf_tc[oif])
      } else
      // IP TCQF enabled on iif
      if (tcqf_dscp[oif]) {
        pak.ip_header.dscp = map_cycle2dscp(cycle, tcqf_dscp[oif])
      } // else...  other future encap/tagging options for TCQF
  
      tcqf_enqueue(pak, oif.cycleq[cycle])
      return
    } else {
      // Forwarding of egress TCQF packets [1]
    }
  }
  // ... non TCQF OIF forwarding [2]
}

// Started when TCQF is enabled on an interface
// dequeues packets from oif.cycleq
// independent of encapsulation
void send_tcqf(oif) {
  cycle = 1
  cc =  tcqf.cycle_time *
        tcqf.cycle_time
  o =   tcqf.cycle_clock_offset
  nextcyclestart = floor(tnow / cc) * cc + cc + o

  while(1) {
    ingres_flow_2_tcqf(oif,cycle)
    while(tnow < nextcyclestart) { }
    while(pak = dequeue(oif.cycleq(cycle)) {
      send(pak)
    } 
    cycle = (cycle + 1) mod tcqf.cycles + 1
    nextcyclestart += tcqf.cycle_time
  }
}
]]></artwork></figure>

<t>Processing of ingress TCQF packets is performed
via ingres_flow_enqueue(pak) and
ingres_flow_2_tcqf(oif,cycle) as explained in <xref target="ingres_pseudocode"/>.</t>

<t>Processing of egres TCQF packet is out-of-scope. 
It can performed by any non-TCQF packet forwarding mechanism such as
some strict priority queuing in [2], and packets could accordingly be
marked with an according packet header traffic class indicator for
such a traffic class in [1].</t>

</section>
</section>
<section anchor="ingress"><name>TCQF Per-flow Ingress forwarding (normative)</name>

<t>Ingress flows in the context of this text
are packets of flows that enter the router from a non-TCQF interface
and need to be forwarded to an interface with TCQF.</t>

<t>In the most simple case, these packets are sent by the
source and the router is the first-hop router.
In another case, the routers ingress interface
connects to a hop where the previous router(s) did
perform a different bounded latency forwarding mechanism
than TCQF.</t>

<section anchor="ingress-flows-configuration-data-model"><name>Ingress Flows Configuration Data Model</name>

<figure title="TCQF Ingress Configuration Data Model" anchor="FIG-IData-Model"><artwork><![CDATA[
# Extends above defined tcqf
tcqf
...
| Ingress Flows, see below (TBD:
+-- iflow[flowid]
    +-- uint32 csize # in bits
]]></artwork></figure>

<t>The data model shown in <xref target="FIG-IData-Model"/> expands the tcqf data
model  from <xref target="FIG-Data-Model"/>. For every DetNet flow for which
this router is the TCQF ingress, the controller plane has to specify a maximum 
number of bits called csize (cycle size) that are permitted to 
go into each individual cycle.</t>

<t>Note, that iflow[flowid].csize is not specific to the sending
interface because it is a property of the DetNet flow.</t>

</section>
<section anchor="ingres_pseudocode"><name>Ingress Flows Pseudocode</name>

<t>When a TCQF ingress is received, it first has to be enqueued into a
per-flow queue. This is necessary because the permitted
burst size for the flow may be larger than what can fit
into a single cycle, or even into the number of cycles
used in the network.</t>

<figure title="TCQF Ingress Enqueue Pseudocode" anchor="FIG-Ingress-enqueue"><artwork><![CDATA[
bool ingres_flow_enqueue(pak) {
  if(!pak.context.tcqf_cycle &&
      flowid = match_detnetflow(pak)) {
    police(pak) // according to RFC9016 5.5
    enqueue(pak, flowq[oif][flowid])
    return true
  }
  return false
}
]]></artwork></figure>

<t>ingres_flow_enqueue(pak) as shown in <xref target="FIG-Ingress-enqueue"/>
performs this enqueuing of the packet. Its position
in the DetNet/TCQF forwarding code is shown in 
<xref target="FIG-Pseudocode"/>.</t>

<t>police(pak): If the router is not only the TCQF ingress router, but also
the first-hop router from the source, ingres_flow_enqueue(pak)
will also be the place where policing of the flows packet
according to the Traffic Specification of the flow would happen -
to ensure that packets violating the Traffic Specification
will not be forwarded, or be forwarded with lower priority
(e.g.: as best effort). This policing and resulting forwarding
action is not specific to TCQF and therefore out of scope for
this text. See <xref target="RFC9016"/>, section 5.5.</t>

<figure title="TCQF Ingress Pseudocode" anchor="FIG-Ingress-2-TCQF"><artwork><![CDATA[
void ingres_flow_2_tcqf(oif, cycle) {
  foreach flowid in flowq[oif][*] {
    free = tcqf.iflow[flowid].csize
    q = flowq[oif][flowid]
    while(notempty(q) &&
          (l = head(q).size) <= free) {
      pak = dequeue(q)
      free -= l
      tcqf_enqueue(pak, oif.cycleq[cycle])
    }
  }
}
]]></artwork></figure>

<t>ingres_flow_2_tcqf(oif, cycle) as shown in
<xref target="FIG-Ingress-2-TCQF"/> transfers ingress DetNet flow
packets from their per-flow queue into the queue of the cycle
that will be sent next. The position of ingres_flow_2_tcqf() 
in the DetNet/TCQF forwarding code is shown in <xref target="FIG-Pseudocode"/>.</t>

</section>
</section>
<section anchor="implementation-deployment-operations-and-validation-considerations-informative"><name>Implementation, Deployment, Operations and Validation considerations (informative)</name>

<section anchor="high-speed-implementation"><name>High-Speed Implementation</name>

<t>High-speed implementations with programmable forwarding planes of TCQF
packet forwarding require Time-Gated Queues for the cycle queues,
such as introduced by <xref target="IEEE802.1Qbv"/> and also employed in CQF <xref target="IEEE802.1Qch"/>.</t>

<t>Compared to CQF, the accuracy of clock synchronization across the nodes
is reduced as explained in <xref target="calculation"/> below.</t>

<t>High-speed forwarding for ingress packets as specified in <xref target="ingress"/>
above would require to pass packets first into a per-flow queue and
then re-queue them into a cycle queue. This is not ideal for
high speed implementations.  The pseudocode for ingres_flow_enqueue()
and ingres_flow_2_tcqf(), like the rest of the pseudocode in this
document is only meant to serve as the most compact and hopefully
most easy to read specification of the desired externally observable
behavior of TCQF - but not as a guidance for implementation, especially not
for high-speed forwarding planes.</t>

<t>High-speed forward could be implemented with single-enqueueing into
cycle queues as follows:</t>

<t>Let B[f] be the maximum amount of data that the router would need to
buffer for ingress flow f at any point in time. This can be calculated
from the flows Traffic Specification. For example, when using the
parameters of <xref target="RFC9016"/>, section 5.5.</t>

<figure><artwork><![CDATA[
B[f] <= MaxPacketsPerInterval*MaxPayloadSize*8

maxcycles = max( ceil( B[f] / tcqf.iflow[f].csize) | f)
]]></artwork></figure>

<t>Maxcycles is the maximum number of cycles required so that packets
from all ingress flows can be directly enqueued into maxcycles queues.
The router would then not cycle across tcqf.cycles number of queues,
but across maxcycles number of queues, but still cycling across tcqf.cycles
number of cycle tags.</t>

<t>Calculation of B[f] and in result maxcycles may further be refined (lowered)
by additionally known constraints such as the bitrates of the ingress interface(s)
and TCQF output interface(s).</t>

</section>
<section anchor="calculation"><name>Controller plane computation of cycle mappings</name>

<t>The cycle mapping is computed by the controller plane by taking at minimum
the link, interface serialization and node internal forwarding latencies as well
as the cycle_clock_offsets into account.</t>

<figure title="Calculation reference" anchor="Calc1"><artwork><![CDATA[
Router  . O1
 R1     . | cycle 1 | cycle 2 | cycle 3 | cycle 1 |
        .    .
        .     ............... Delay D
        .                    .
        .                    O1'
        .                     | cycle 1 |
Router  .   | cycle 1 | cycle 2 | cycle 3 | cycle 1 |
  R2    .   O2

CT  = cycle_time
C   = cycles
CC  = CT * C
O1  = cycle_clock_offset router R1, interface towards R2
O2  = cycle_clock_offset router R2, output interface of interest
O1' = O1 + D
]]></artwork></figure>

<t>Consider in <xref target="Calc1"/> that Router R1 sends packets via C = 3 cycles with a
cycle_clock offset of O1 towards Router R2. These packets arrive
at R2 with a cycle_clock offset of O1' which includes through D all latencies
incurred between releasing a packet on R1 from the cycle buffer until
it can be put into a cycle buffer on R2: serialization delay on R1,
link delay, non_CQF delays in R1 and R2, especially forwarding in
R2, potentially across an internal fabric to the output interface
with the sending cycle buffers.</t>

<figure title="Calculating cycle mapping" anchor="Calc2"><artwork><![CDATA[
A = ( ceil( ( O1' - O2 ) / CT) + C + 1) mod CC
map(i) = (i - 1 + A) mod C + 1
]]></artwork></figure>

<t><xref target="Calc2"/> shows a formula to calculate the cycle mapping between
R1 and R2, using the first available cycle on R2. In the example
of <xref target="Calc1"/> with CT = 1, (O1' - O2) =~ 1.8, A will be 0, resulting
in map(1) to be 1, map(2) to be 2 and map(3) to be 3.</t>

<t>The offset "C" for the calculation of A is included so that
a negative (O1 - O2) will still lead to a positive A.</t>

<t>In general, D will be variable [Dmin...Dmax], for example because
of differences in serialization latency between min and max size
packets, variable link latency because of temperature based length
variations, link-layer variability (radio links) or in-router
processing variability. In addition, D also needs to account for the
drift between the synchronized clocks for R1 and R2. This
is called the Maximum Time Interval Error (MTIE).</t>

<t>Let A(d) be A where O1' is calculated with D = d. To account for
the variability of latency and clock synchronization, map(i) has to
be calculated with A(Dmax), and the controller plane needs to
ensure that that A(Dmin)...A(Dmax) does cover at most (C - 1) cycles.</t>

<t>If it does cover C cycles, then C and/or CT are chosen too small,
and the controller plane needs to use larger numbers for either.</t>

<t>This (C - 1) limitation is based on the understanding that there is only
one buffer for each cycle, so a cycle cannot receive packets
when it is sending packets. While this could be changed by
using double buffers, this would create additional implementation
complexity and not solve the limitation for all cases, because
the number of cycles to cover [Dmin...Dmax] could also be (C + 1)
or larger, in which case a tag of 1...C would not suffice.</t>

</section>
<section anchor="link-speed-and-bandwidth-sharing"><name>Link speed and bandwidth sharing</name>

<t>TCQF hops along a path do not need to have the same bitrate, they
just need to use the same cycle time. The controller plane has to then
be able to take the TCQF capacity of each hop into account when
admitting flows based on their Traffic Specification and TCQF csize.</t>

<t>TCQF does not require to be allocated 100% of the
link bitrate. When TCQF has to share a link with other traffic
classes, queuing just has to be set up to ensure that all
data of a TCQF cycle buffer can be sent within the TCQF
cycle time. For example by making the TCQF cycle queues the
highest priority queues and then limiting their capacity through
admission control to leave time for other queues to be served
as well.</t>

</section>
<section anchor="validation"><name>Validation</name>

<t><xref target="LDN"/> describes an experimental validation of TCQF with high-speed forwarding
hardware and provides further details on the mathematical models.</t>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>TBD.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document has no IANA considerations.</t>

</section>
<section anchor="changelog"><name>Changelog</name>

<t>[RFC-editor: please remove]</t>

<t>Initial draft name: draft-eckert-detnet-mpls-tc-tcqf</t>

<t>00</t>

<t>Initial version</t>

<t>01</t>

<t>Added new co-author.</t>

<t>Changed Data Model to "Configuration Data Model",</t>

<t>and changed syntax from YANG tree to a non-YANG tree, removed empty section
targeted for YANG model. Reason: the configuration parameters that we need
to specify the forwarding behavior is only a subset of what likely would
be a good YANG model, and any work to define such a YANG model not necessary
to specify the algorithm would be scope creep for this specification. Better
done in a separate YANG document. 
Example additional YANG aspects for such a document are
how to map parameters to configuration/operational space, what additional
operational/monitoring parameter to support and how to map the
YANG objects required into various pre-existing YANG trees.</t>

<t>Improved text in forwarding section, simplified sentences, used simplified
configuration data model.</t>

<t>02</t>

<t>Refresh</t>

<t>03</t>

<t>Added ingress processing, and further implementation considerations.</t>

<t>New draft name: draft-eckert-detnet-tcqf</t>

<t>00</t>

<t>Added text for DSCP based tagging of IP/IPv6 packets, therefore changing the
original, MPLS-only centric scope of the document, necessitating a change
in name and title.</t>

<t>This was triggered by the observation of David Black at the IETF114 DetNet
meeting that with DetNet domains being single administrative domains, it
is not necessary to have standardized (cross administrative domain) DSCP
for the tagging of IP/IP6 packets for TCQF. Instead it is sufficient
to use EXP/LU DSCP code space and assignment of these is a local matter
of a domain as is that of TC values when MPLS is used. Standardized DSCP
in the other hand would have required likely work/oversight by TSVWG.</t>

<t>In any case, the authors feel that with this insight, there is no need to
constrain single-domain definition of TCQF to only MPLS, but instead both
MPLS and IP/IPv6 tagging can be easily specified in this one draft.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2474' target='https://www.rfc-editor.org/info/rfc2474'>
<front>
<title>Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
<author fullname='K. Nichols' initials='K.' surname='Nichols'><organization/></author>
<author fullname='S. Blake' initials='S.' surname='Blake'><organization/></author>
<author fullname='F. Baker' initials='F.' surname='Baker'><organization/></author>
<author fullname='D. Black' initials='D.' surname='Black'><organization/></author>
<date month='December' year='1998'/>
<abstract><t>This document defines the IP header field, called the DS (for differentiated services) field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2474'/>
<seriesInfo name='DOI' value='10.17487/RFC2474'/>
</reference>



<reference anchor='RFC3270' target='https://www.rfc-editor.org/info/rfc3270'>
<front>
<title>Multi-Protocol Label Switching (MPLS) Support of Differentiated Services</title>
<author fullname='F. Le Faucheur' initials='F.' surname='Le Faucheur'><organization/></author>
<author fullname='L. Wu' initials='L.' surname='Wu'><organization/></author>
<author fullname='B. Davie' initials='B.' surname='Davie'><organization/></author>
<author fullname='S. Davari' initials='S.' surname='Davari'><organization/></author>
<author fullname='P. Vaananen' initials='P.' surname='Vaananen'><organization/></author>
<author fullname='R. Krishnan' initials='R.' surname='Krishnan'><organization/></author>
<author fullname='P. Cheval' initials='P.' surname='Cheval'><organization/></author>
<author fullname='J. Heinanen' initials='J.' surname='Heinanen'><organization/></author>
<date month='May' year='2002'/>
<abstract><t>This document defines a flexible solution for support of Differentiated Services (Diff-Serv) over Multi-Protocol Label Switching (MPLS) networks.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3270'/>
<seriesInfo name='DOI' value='10.17487/RFC3270'/>
</reference>



<reference anchor='RFC8655' target='https://www.rfc-editor.org/info/rfc8655'>
<front>
<title>Deterministic Networking Architecture</title>
<author fullname='N. Finn' initials='N.' surname='Finn'><organization/></author>
<author fullname='P. Thubert' initials='P.' surname='Thubert'><organization/></author>
<author fullname='B. Varga' initials='B.' surname='Varga'><organization/></author>
<author fullname='J. Farkas' initials='J.' surname='Farkas'><organization/></author>
<date month='October' year='2019'/>
<abstract><t>This document provides the overall architecture for Deterministic Networking (DetNet), which provides a capability to carry specified unicast or multicast data flows for real-time applications with extremely low data loss rates and bounded latency within a network domain.  Techniques used include 1) reserving data-plane resources for individual (or aggregated) DetNet flows in some or all of the intermediate nodes along the path of the flow, 2) providing explicit routes for DetNet flows that do not immediately change with the network topology, and 3) distributing data from DetNet flow packets over time and/or space to ensure delivery of each packet's data in spite of the loss of a path.  DetNet operates at the IP layer and delivers service over lower-layer technologies such as MPLS and Time- Sensitive Networking (TSN) as defined by IEEE 802.1.</t></abstract>
</front>
<seriesInfo name='RFC' value='8655'/>
<seriesInfo name='DOI' value='10.17487/RFC8655'/>
</reference>



<reference anchor='RFC8964' target='https://www.rfc-editor.org/info/rfc8964'>
<front>
<title>Deterministic Networking (DetNet) Data Plane: MPLS</title>
<author fullname='B. Varga' initials='B.' role='editor' surname='Varga'><organization/></author>
<author fullname='J. Farkas' initials='J.' surname='Farkas'><organization/></author>
<author fullname='L. Berger' initials='L.' surname='Berger'><organization/></author>
<author fullname='A. Malis' initials='A.' surname='Malis'><organization/></author>
<author fullname='S. Bryant' initials='S.' surname='Bryant'><organization/></author>
<author fullname='J. Korhonen' initials='J.' surname='Korhonen'><organization/></author>
<date month='January' year='2021'/>
<abstract><t>This document specifies the Deterministic Networking (DetNet) data plane when operating over an MPLS Packet Switched Network.  It leverages existing pseudowire (PW) encapsulations and MPLS Traffic Engineering (MPLS-TE) encapsulations and mechanisms.  This document builds on the DetNet architecture and data plane framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='8964'/>
<seriesInfo name='DOI' value='10.17487/RFC8964'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC3209' target='https://www.rfc-editor.org/info/rfc3209'>
<front>
<title>RSVP-TE: Extensions to RSVP for LSP Tunnels</title>
<author fullname='D. Awduche' initials='D.' surname='Awduche'><organization/></author>
<author fullname='L. Berger' initials='L.' surname='Berger'><organization/></author>
<author fullname='D. Gan' initials='D.' surname='Gan'><organization/></author>
<author fullname='T. Li' initials='T.' surname='Li'><organization/></author>
<author fullname='V. Srinivasan' initials='V.' surname='Srinivasan'><organization/></author>
<author fullname='G. Swallow' initials='G.' surname='Swallow'><organization/></author>
<date month='December' year='2001'/>
<abstract><t>This document describes the use of RSVP (Resource Reservation Protocol), including all the necessary extensions, to establish label-switched paths (LSPs) in MPLS (Multi-Protocol Label Switching).  Since the flow along an LSP is completely identified by the label applied at the ingress node of the path, these paths may be treated as tunnels.  A key application of LSP tunnels is traffic engineering with MPLS as specified in RFC 2702.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3209'/>
<seriesInfo name='DOI' value='10.17487/RFC3209'/>
</reference>



<reference anchor='RFC4875' target='https://www.rfc-editor.org/info/rfc4875'>
<front>
<title>Extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for Point-to-Multipoint TE Label Switched Paths (LSPs)</title>
<author fullname='R. Aggarwal' initials='R.' role='editor' surname='Aggarwal'><organization/></author>
<author fullname='D. Papadimitriou' initials='D.' role='editor' surname='Papadimitriou'><organization/></author>
<author fullname='S. Yasukawa' initials='S.' role='editor' surname='Yasukawa'><organization/></author>
<date month='May' year='2007'/>
<abstract><t>This document describes extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for the set up of Traffic Engineered (TE) point-to-multipoint (P2MP) Label Switched Paths (LSPs) in Multi- Protocol Label Switching (MPLS) and Generalized MPLS (GMPLS) networks.  The solution relies on RSVP-TE without requiring a multicast routing protocol in the Service Provider core.  Protocol elements and procedures for this solution are described.</t><t>There can be various applications for P2MP TE LSPs such as IP multicast.  Specification of how such applications will use a P2MP TE LSP is outside the scope of this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4875'/>
<seriesInfo name='DOI' value='10.17487/RFC4875'/>
</reference>



<reference anchor='RFC8296' target='https://www.rfc-editor.org/info/rfc8296'>
<front>
<title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='J. Tantsura' initials='J.' surname='Tantsura'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<author fullname='I. Meilik' initials='I.' surname='Meilik'><organization/></author>
<date month='January' year='2018'/>
<abstract><t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a &quot;multicast domain&quot;, without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol.  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The details of the encapsulation depend on the type of network used to realize the multicast domain.  This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t></abstract>
</front>
<seriesInfo name='RFC' value='8296'/>
<seriesInfo name='DOI' value='10.17487/RFC8296'/>
</reference>



<reference anchor='RFC8402' target='https://www.rfc-editor.org/info/rfc8402'>
<front>
<title>Segment Routing Architecture</title>
<author fullname='C. Filsfils' initials='C.' role='editor' surname='Filsfils'><organization/></author>
<author fullname='S. Previdi' initials='S.' role='editor' surname='Previdi'><organization/></author>
<author fullname='L. Ginsberg' initials='L.' surname='Ginsberg'><organization/></author>
<author fullname='B. Decraene' initials='B.' surname='Decraene'><organization/></author>
<author fullname='S. Litkowski' initials='S.' surname='Litkowski'><organization/></author>
<author fullname='R. Shakir' initials='R.' surname='Shakir'><organization/></author>
<date month='July' year='2018'/>
<abstract><t>Segment Routing (SR) leverages the source routing paradigm.  A node steers a packet through an ordered list of instructions, called &quot;segments&quot;.  A segment can represent any instruction, topological or service based.  A segment can have a semantic local to an SR node or global within an SR domain.  SR provides a mechanism that allows a flow to be restricted to a specific topological path, while maintaining per-flow state only at the ingress node(s) to the SR domain.</t><t>SR can be directly applied to the MPLS architecture with no change to the forwarding plane.  A segment is encoded as an MPLS label.  An ordered list of segments is encoded as a stack of labels.  The segment to process is on the top of the stack.  Upon completion of a segment, the related label is popped from the stack.</t><t>SR can be applied to the IPv6 architecture, with a new type of routing header.  A segment is encoded as an IPv6 address.  An ordered list of segments is encoded as an ordered list of IPv6 addresses in the routing header.  The active segment is indicated by the Destination Address (DA) of the packet.  The next active segment is indicated by a pointer in the new routing header.</t></abstract>
</front>
<seriesInfo name='RFC' value='8402'/>
<seriesInfo name='DOI' value='10.17487/RFC8402'/>
</reference>



<reference anchor='RFC8986' target='https://www.rfc-editor.org/info/rfc8986'>
<front>
<title>Segment Routing over IPv6 (SRv6) Network Programming</title>
<author fullname='C. Filsfils' initials='C.' role='editor' surname='Filsfils'><organization/></author>
<author fullname='P. Camarillo' initials='P.' role='editor' surname='Camarillo'><organization/></author>
<author fullname='J. Leddy' initials='J.' surname='Leddy'><organization/></author>
<author fullname='D. Voyer' initials='D.' surname='Voyer'><organization/></author>
<author fullname='S. Matsushima' initials='S.' surname='Matsushima'><organization/></author>
<author fullname='Z. Li' initials='Z.' surname='Li'><organization/></author>
<date month='February' year='2021'/>
<abstract><t>The Segment Routing over IPv6 (SRv6) Network Programming framework enables a network operator or an application to specify a packet processing program by encoding a sequence of instructions in the IPv6 packet header.</t><t>Each instruction is implemented on one or several nodes in the network and identified by an SRv6 Segment Identifier in the packet.</t><t>This document defines the SRv6 Network Programming concept and specifies the base set of SRv6 behaviors that enables the creation of interoperable overlays with underlay optimization.</t></abstract>
</front>
<seriesInfo name='RFC' value='8986'/>
<seriesInfo name='DOI' value='10.17487/RFC8986'/>
</reference>



<reference anchor='RFC9016' target='https://www.rfc-editor.org/info/rfc9016'>
<front>
<title>Flow and Service Information Model for Deterministic Networking (DetNet)</title>
<author fullname='B. Varga' initials='B.' surname='Varga'><organization/></author>
<author fullname='J. Farkas' initials='J.' surname='Farkas'><organization/></author>
<author fullname='R. Cummings' initials='R.' surname='Cummings'><organization/></author>
<author fullname='Y. Jiang' initials='Y.' surname='Jiang'><organization/></author>
<author fullname='D. Fedyk' initials='D.' surname='Fedyk'><organization/></author>
<date month='March' year='2021'/>
<abstract><t>This document describes the flow and service information model for Deterministic Networking (DetNet). These models are defined for IP and MPLS DetNet data planes.</t></abstract>
</front>
<seriesInfo name='RFC' value='9016'/>
<seriesInfo name='DOI' value='10.17487/RFC9016'/>
</reference>


<reference anchor='I-D.ietf-bier-te-arch'>
   <front>
      <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Michael Menth' initials='M.' surname='Menth'>
         <organization>University of Tuebingen</organization>
      </author>
      <author fullname='Gregory Cauchie' initials='G.' surname='Cauchie'>
         <organization>KOEVOO</organization>
      </author>
      <date day='25' month='April' year='2022'/>
      <abstract>
	 <t>   This memo describes per-packet stateless strict and loose path
   steered replication and forwarding for &quot;Bit Index Explicit
   Replication&quot; (BIER, RFC8279) packets.  It is called BIER Tree
   Engineering (BIER-TE) and is intended to be used as the path steering
   mechanism for Traffic Engineering with BIER.

   BIER-TE introduces a new semantic for &quot;bit positions&quot; (BP).  They
   indicate adjacencies of the network topology, as opposed to (non-TE)
   BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFER).  A
   BIER-TE packets BitString therefore indicates the edges of the (loop-
   free) tree that the packet is forwarded across by BIER-TE.  BIER-TE
   can leverage BIER forwarding engines with little changes.  Co-
   existence of BIER and BIER-TE forwarding in the same domain is
   possible, for example by using separate BIER &quot;sub-domains&quot; (SDs).
   Except for the optional routed adjacencies, BIER-TE does not require
   a BIER routing underlay, and can therefore operate without depending
   on an &quot;Interior Gateway Routing protocol&quot; (IGP).

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-bier-te-arch-13'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-bier-te-arch-13.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-detnet-bounded-latency'>
   <front>
      <title>DetNet Bounded Latency</title>
      <author fullname='Norman Finn' initials='N.' surname='Finn'>
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname='Jean-Yves Le Boudec' initials='J.' surname='Le Boudec'>
         <organization>EPFL</organization>
      </author>
      <author fullname='Ehsan Mohammadpour' initials='E.' surname='Mohammadpour'>
         <organization>EPFL</organization>
      </author>
      <author fullname='Jiayi Zhang' initials='J.' surname='Zhang'>
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname='Balazs Varga' initials='B.' surname='Varga'>
         <organization>Ericsson</organization>
      </author>
      <date day='8' month='April' year='2022'/>
      <abstract>
	 <t>   This document presents a timing model for sources, destinations, and
   DetNet transit nodes.  Using the model, it provides a methodology to
   compute end-to-end latency and backlog bounds for various queuing
   methods.  The methodology can be used by the management and control
   planes and by resource reservation algorithms to provide bounded
   latency and zero congestion loss for the DetNet service.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-detnet-bounded-latency-10'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-detnet-bounded-latency-10.txt' type='TXT'/>
</reference>


<reference anchor='I-D.eckert-detnet-bounded-latency-problems'>
   <front>
      <title>Problems with existing DetNet bounded latency queuing mechanisms</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname='Stewart Bryant' initials='S.' surname='Bryant'>
         <organization>Stewart Bryant Ltd</organization>
      </author>
      <date day='12' month='July' year='2021'/>
      <abstract>
	 <t>   The purpose of this memo is to explain the challenges and limitations
   of existing (standardized) bounded latency queuing mechanisms for
   desirable (large scale) MPLS and/or IP based networks to allow them
   to support DetNet services.  These challenges relate to low-cost,
   high-speed hardware implementations, desirable network design
   approaches, system complexity, reliability, scalability, cost of
   signaling, performance and jitter experience for the DetNet
   applications.  Many of these problems are rooted in the use of per-
   hop, per-flow (DetNet) forwarding and queuing state, but highly
   accurate network wide time synchronization can be another challenge
   for some networks.

   This memo does not intend to propose a specific queuing solution, but
   in the same way in which it describes the challenges of mechanisms,
   it reviews how those problem are addressed by currently proposed new
   queuing mechanisms.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-eckert-detnet-bounded-latency-problems-00'/>
   <format target='https://www.ietf.org/archive/id/draft-eckert-detnet-bounded-latency-problems-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.qiang-DetNet-large-scale-DetNet'>
   <front>
      <title>Large-Scale Deterministic IP Network</title>
      <author fullname='Li Qiang' initials='L.' surname='Qiang'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Xuesong Geng' initials='X.' surname='Geng'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Bingyang Liu' initials='B.' surname='Liu'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Liang Geng' initials='L.' surname='Geng'>
         <organization>China Mobile</organization>
      </author>
      <author fullname='Guangpeng Li' initials='G.' surname='Li'>
         </author>
      <date day='2' month='September' year='2019'/>
      <abstract>
	 <t>   This document presents the overall framework and key method for
   Large-scale Deterministic Network (LDN).  LDN can provide bounded
   latency and delay variation (jitter) without requiring precise time
   synchronization among nodes, or per-flow state in transit nodes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-qiang-detnet-large-scale-detnet-05'/>
   <format target='https://www.ietf.org/archive/id/draft-qiang-detnet-large-scale-detnet-05.txt' type='TXT'/>
</reference>


<reference anchor='I-D.dang-queuing-with-multiple-cyclic-buffers'>
   <front>
      <title>A Queuing Mechanism with Multiple Cyclic Buffers</title>
      <author fullname='Bingyang Liu' initials='B.' surname='Liu'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Joanna Dang' initials='J.' surname='Dang'>
         <organization>Huawei</organization>
      </author>
      <date day='22' month='February' year='2021'/>
      <abstract>
	 <t>   This document presents a queuing mechanism with multiple cyclic
   buffers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-dang-queuing-with-multiple-cyclic-buffers-00'/>
   <format target='https://www.ietf.org/archive/id/draft-dang-queuing-with-multiple-cyclic-buffers-00.txt' type='TXT'/>
</reference>


<reference anchor="IEEE802.1Qbv" >
  <front>
    <title>IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged Networks - Amendment 25: Enhancements for Scheduled Traffic</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2015"/>
  </front>
</reference>
<reference anchor="IEEE802.1Qch" >
  <front>
    <title>IEEE Std 802.1Qch-2017: IEEE Standard for Local and Metropolitan Area Networks - Bridges and Bridged Networks - Amendment 29: Cyclic Queuing and Forwarding</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="TSN-ATS" target="https://1.ieee802.org/tsn/802-1qcr/">
  <front>
    <title>P802.1Qcr - Bridges and Bridged Networks Amendment: Asynchronous Traffic Shaping</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <date year="2020" month="July" day="09"/>
  </front>
  <seriesInfo name="IEEE" value=""/>
</reference>
<reference anchor="LDN" >
  <front>
    <title>Towards Large-Scale Deterministic IP Networks</title>
    <author initials="B." surname="Liu" fullname="Binyang Liu">
      <organization></organization>
    </author>
    <author initials="S." surname="Ren" fullname="Shoushou Ren">
      <organization></organization>
    </author>
    <author initials="C." surname="Wang" fullname="Chuang Wang">
      <organization></organization>
    </author>
    <author initials="V." surname="Angilella" fullname="Vincent Angilella">
      <organization></organization>
    </author>
    <author initials="P." surname="Medagliani" fullname="Paolo Medagliani">
      <organization></organization>
    </author>
    <author initials="S." surname="Martin" fullname="Sebastien Martin">
      <organization></organization>
    </author>
    <author initials="J." surname="Leguay" fullname="Jeremie Leguay">
      <organization></organization>
    </author>
    <date year="2021"/>
  </front>
  <seriesInfo name="IEEE" value="2021 IFIP Networking Conference (IFIP Networking)"/>
  <seriesInfo name="doi" value="10.23919/IFIPNetworking52078.2021.9472798"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA7V9e3PbRrbn/6rSd+i1a2/ImKQkOn5px1OjSHKiW46tiMpk
t2yXFySaJMYkQAOgZMXxfvZ7fuecfgAk7cytWk2NQwL9PH3ej2a/39/fmxRp
ls+Ozbqe9p/u7+3v1Vm9sMfmzNa2XGZ5VtXZxLyy9W1RfqCWpkNv6GvXnCV1
Yi4XSW5N31wns5lNzendZEHNf13bNdomeWpeFOVtUqbc9fr01xddMy1KMy7W
eUodFklt88mduc3quVkUt+ZfWU0TmyynV+XMmmqSLKyROav9vWQ8Lu3NsUlt
ndu6X08+Tvf30mKSJ0tadFom07pvJx9sWfejJv3Dw/29W9rl2fn1q/Nr2jVN
OyvKu2NT1en+XrYqj01drqt6eHj47HC4v1fVpU2Wx+bi/PoFoFLVtJf3yaLI
aZo7SytZZcf7e8aYupjoE/mS2lU9PzaP+HtVlDTQtAotqrtl88GkWC5tXrsn
+F+yrudFycP3uQ3+ZIfXhS0XtqrMOW/Svy1K2t2Ldb0u7a3NzLWdzPNiUcwy
W5nfRie+HfZl62MzHA4PzSnNWyYLc/5pVdKYt8mdbzfJagLOKMnpjE/pJJLw
pkhpHacn5tmjw0eH0eM1DUZ94tnsMskWBNna/mNSDabJepDabbsa1ZZwpDY/
lnc0Y3NTv+XZjS0rWo8ppma0Lkt7Zy5OR+1JqsGYe/+j4iaDZDJYf9g22Ume
EpDMTwPzS7LIquZs/MicFnm1XtSEs+1ZktkSLf4xw9cBnR3OKy/KZVLTMvnI
rl6cDn948oP7/HD45NB9fvr40SP/+dljtCHky6ft/g+Hh8/c5x+ePgl9hs8e
+88/HA7DWE/982eHR495XGMu+meDzBJhjzNb9mvbT8rJ/LjxRolEybGv5Ojb
NEmp1aq/Kovxwi4r3/xjluSzvhBrn+m3z/Srj3y7FM0+CpPog/T7S4B7RS0n
zEH64/V0Sqd+LARBvc7Pz58eDgdHv45vhO6MMqp7eEUYRPRJbIaZy8uCJmXm
s7R1WayKRUavTUIkbXLhZJXp9wndsnRGBIKW8jl1nI7emxOiyxS0aYaPjs15
Pk/yiWVa5VlGk7lN1wvqc01sZ5pN7sm6Iur1aMVrvM6Wtj+yOeEynXWDp16P
XnWJh1YfzE9lsV4NjPROCdBEq4dHj9pQ0HPcgEJq3Ps+dXuiM++Azi8xdE4A
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
nkMXwqR+AAA=

-->

</rfc>

