<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.36 (Ruby 3.1.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-detnet-glbf-00" category="std" consensus="true" submissionType="IETF" tocDepth="5" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="detnet-glbf">Deterministic Networking (DetNet) Data Plane - guaranteed Latency Based Forwarding (gLBF) for bounded latency with low jitter and asynchronous forwarding in Deterministic Networks</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert" role="editor">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>alex@futurewei.com</email>
      </address>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization>Independent</organization>
      <address>
        <postal>
          <country>UK</country>
        </postal>
        <email>sb@stewartbryant.com</email>
      </address>
    </author>
    <author initials="S." surname="Hommes" fullname="Stefan Hommes">
      <organization>ZF</organization>
      <address>
        <postal>
          <country>DE</country>
        </postal>
        <email>stefan.hommes@zf.de</email>
      </address>
    </author>

    <date year="2023" month="June" day="28"/>

    
    <workgroup>DETNET</workgroup>
    

    <abstract>


<?line 212?>

<t>This memo proposes a mechanism called "guaranteed Latency Based Forwarding" (gLBF) as part of DetNet for hop-by-hop packet forwarding with per-hop deterministically bounded latency and minimal jitter.</t>

<t>gLBF is intended to be useful across a wide range of networks and applications with need for high-precision deterministic networking services, including in-car networks or networks used for industrial automation across on factory floors, all the way to ++100Gbps country-wide networks.</t>

<t>Contrary to other mechanisms, gLBF does not require network wide clock synchronization, nor does it need to maintain per-flow state at network nodes, avoiding drawbacks of other known methods while leveraging their advantages.</t>

<t>Specifically, gLBF uses the queuing model and calculus of Urgency Based Scheduling (UBS, <xref target="UBS"/>),
which is used by TSN Asynchronous Traffic Shaping <xref target="TSN-ATS"/>. gLBF is intended to be a plug-in replacement for
TSN-ATN or as a parallel mechanism beside TSN-ATS because it allows to keeping the same controller-plane
design which is selecting paths for TSN-ATS, sizing TSN-ATS queues, calculating latencies and admitting
flows to calculated paths for calculated latencies.</t>

<t>In addition to reducing the jitter compared to TSN-ATS by additional buffering (dampening) in the network,
gLBF also eliminates the need for per-flow, per-hop state maintenance required by TSN-ATS.  This avoids the need to signal per-flow state to every hop from the controller-plane and associated scaling problems.  It also reduces implementation cost for high-speed networking hardware due to the avoidance of additional high-speed speed read/write memory access to retrieve,
process and update per-flow state variables for a large number of flows.</t>



    </abstract>



  </front>

  <middle>


<?line 230?>

<section anchor="overview-informative"><name>Overview (informative)</name>

<section anchor="terminology"><name>Terminology</name>

<dl>
  <dt>CQF</dt>
  <dd>
    <t>Cyclic Queuing and Forwarding.  A queuing mechanism defined by annex T of IEEE802.1Q.</t>
  </dd>
  <dt>DT</dt>
  <dd>
    <t>Dead Time. A term from CQF indicating the time during each cycle in which no frames can be sent because the the receiving node could not receive it into the desired cycle buffer.</t>
  </dd>
  <dt>node</dt>
  <dd>
    <t>Term used to indicate a system that with respect to gLBF does not act as a host, aka: sender/receiver. This memo avoids the term router to avoid implying that this is an IP/IPv6 router, as opposed to an LSR (label switch router). Likewise, a node can also be an 802.1 bridge implementing gLBF.</t>
  </dd>
  <dt>TCQF</dt>
  <dd>
    <t>Tagged Cyclic Queuing and Forwarding. The mechanism specified in this memo.</t>
  </dd>
</dl>

</section>
<section anchor="summary"><name>Summary</name>

<t>This memo proposes a mechanism called "guaranteed Latency Based Forwarding" (gLBF) for
hop-by-hop packet forwarding with per-hop deterministically bounded latency and minimal jitter.</t>

<t>gLBF is intended to be useful across a wide range of networks and applications with need for high-precision deterministic networking services, including in-car networks or networks used for industrial automation across on factory floors, all the way to ++100Gbps country-wide networks.</t>

<t>At its foundation, gLBF addresses the problems of burst accumulation and jitter accumulation across multiple hops.</t>

<t>Burst accumulation is  the phenomenon in which bursts of packets from senders in admission-controlled network will increase across intermediate nodes. This can only be managed with exponential complexity in admission control processing and significantly worst-case increase in end-to-end latency and/or lowered maximum utilization. What is needed for dynamic, large-scale or easy to manage admission control solutions are forwarding mechanisms without this problem, so that admission control for bandwidth and jitter/buffer-requirements can be linear: decomposed into solely per-hop calculations independent of changes in prior-hop traffic characteristics. Without forwarding plane solutions to overcome burst accumulation, this is not possible</t>

<t>Existing solutions addressing burst-accumulation do this by maintaining inter-packet gaps on a per-flow basis, such as in TSN Asynchronous Traffic Shaping (TSN-ATS). gLBF instead ensures inter-packet gaps are always maintained without the need for per-flow state. The basic idea involves assigning a specific queuing delay budget for any given node and class of traffic. This budget is pre-known from admission control calculus.  As the packet is transmitted, the actual queuing delay that was experienced by the packet at the node is subtracted from that budget and carried in a new header field of the packet.  Upon receiving the packet, the subsequent node subjects the packet to a delay stage.  Here the packet needs to wait for the time specified by that parameter before the node proceeds with regular processing of the packet.  This way, any queuing delay variations are absorbed and deterministic delay without the possibility of burst accumulation can be achieved.</t>

<t>By addressing burst-accumulation, gLBF also overcomes the problem of jitter-accumulation. This is the second core problem of mechanisms such as TSN-ATS: Depending on the amount of competing admitted traffic on a hop at any point in time packets of a flow may experience zero to maximum delay across the hop. This is the per-hop jitter. This jitter is additive across multiple hope, resulting in the inability for applications requiring (near) synchronous packet delivery to solely rely on such mechanisms. It likewise limits the ability of high utilization of networks with large number of bounded latency flows.</t>

<t>The basic principle on which gLBF operates was already proposed by researchers in the early 1990th
and called "Dampers". These dampers where not pursued or adopted due to the lack of network equipment capabilities
back then.  Only with recent and upcoming improvements in advanced forwarding planes will it be possible to
build these technologies at scale and cost.</t>

<t>Contrary to other proposals, gLBF does not require network wide clock synchronization.  Likewise, it does not need to maintain per-flow state at network nodes, as delay budget and the queuing delay variations that are to be absorbed are carried as part of the packets themselves, making them "self-contained".  This eliminate the for the per-flow, per-hop state maintenance required by TSN-ATS, which involves
scaling problems of signaling this per-flow state to every hop from the controller-plane as well as the
high-speed networking hardware implementation cost of high-speed speed read/write memory access to retrieve,
process and update these per-flow state variables for large number of flows.</t>

<t>Opposed to other damper proposals, gLBF also supports the queuing model and calculus of Urgency Based Scheduling (UBS, <xref target="UBS"/>),
which is used by TSN-ATS. gLBF is intended to be a plug-in replacement for
TSN-ATN or as a parallel mechanism beside TSN-ATS because it allows to keeping the same controller-plane
design which is selecting paths for TSN-ATS, sizing TSN-ATS queues, calculating latencies and admitting
flows to calculated paths for calculated latencies.</t>

<t>While gLBF as presented here is intended for use with IETF forwarding protocols and to provide
DetNet QoS for bounded latency and lower bounded jitter, it would equally applicable to other forwarding
planes, such as IEEE 802.1 Ethernet switching - assuming appropriate packet headers are defined
to carry the hop-by-hop and end-to-end metadata required by the mechanism.</t>

</section>
<section anchor="application-scenarios-and-use-cases"><name>Application scenarios and use Cases</name>

<t>gLBF addresses the same use cases that are targeted by deterministic networking and high-precision networking services in general.  Common requirements of those services involve the need to provide service levels within very tightly defined service level bounds, in particular very specific latencies without the possibility of congestion-induced loss.  The ability to provide services with corresponding service level guarantees enables many applications that would simply not be feasible without such guarantees.  The following describes some use cases and application scenarios.</t>

<t>TODO: USE CASE FOR INTRA-VEHICLE NETWORK, REMOTE INDUSTRIAL CONTROLLER (FACTORY FLOOR &amp; REMOTE)</t>

</section>
<section anchor="background"><name>Background</name>

<t>The following background introduces and explains gLBF step by step.
It uses IEEE 802.1 "Time Sensitive Networking" (TSN) mechanisms for reference, because
at the time of this memo, TSN bounded latency mechanisms are the most commonly understood and
deployed mechanisms to provide bounded latency and jitter services.</t>

<t>All mechanisms compared here are as well as those used by TSN based on the overall service design
that traffic flows have a well-defined rate and burstyness, which are tracked by the controller-plane and
called here the "envelope" of the flow.</t>

<t>The traffic model used for gLBF is taken from UBS gives the flow a rate r [bps/sec] and
a burst size b [bits] and the traffic envelope condition is that the total number of
bits w(t) over a period t [sec] of for the flow must be equal to or smaller than (r * t + b).
In one typical case, a flow wants to send a packet of size b one every interval of p [sec].
This translates into a rate r = b / p for the flow because after the flow has sent the first packet
of b bits, it will take p seconds until (r * t) has a size of b again: (r * t) = ((b / p) * p).</t>

<t>The controller-plane uses this per-flow information to calculate for each flow a path with sufficient free bandwidth
and per-hop buffers so that the bounded end-to-end latency of packets can be guaranteed. It then
allocates bandwidth and buffer resources to the flow so that further flows will not impact it.</t>

<t>Within this framework, bounded latency mechanisms can in general be divided into "on-time" and "in-time"
mechanisms.</t>

<section anchor="in-time-mechanisms"><name>In-time mechanisms</name>

<t>"In-time" bounded latency mechanisms forward packets in an (almost) work conserving manner.</t>

<t>When there is no competing traffic in the network, packets of traffic flows that comply
to their admitted envelope are forwarded without any mechanism introduced queuing latency.
When the maximum amount of admitted traffic is present, then packets of admitted flows
will experience the maximum guaranteed, so-called bounded latency. In result, in-time mechanism
introduce the maximum amount of jitter because the amount of competing traffic can
quickly change and then the latency of packets will change greatly.</t>

<t>IEEE TSN Asynchronous Traffic Shaping is the prime example of
an in-time mechanism. IETF <xref target="RFC2212"/>, "Integrated Services" is an older mechanism
based on the same principles.  In-time mechanisms have the benefit of not requiring
clock-synchronization between nodes to support their queuing.</t>

</section>
<section anchor="on-time-mechanisms"><name>On-time mechanisms</name>

<t>On-time bounded latency mechanisms do deliver packets (near) synchronously with zero or a small
maximum jitter - significantly smaller than that of in-time mechanisms.</t>

<t>EEE TSN Cyclic Queuing and Forwarding (CQF) is an example of an on-time
mechanism as is the Tagged Cyclic Queuing and Forwarding (TCQF) mechanism proposed to DetNet.<br />
Unlike the before mentioned in-time mechanisms, these mechanisms require clock synchronization
between router.</t>

</section>
<section anchor="control-loops-vs-in-time-and-on-time"><name>Control loops vs. in-time and on-time</name>

<t>One set of applications that require or prefer on-time (low jitter) delivery of packets are
control loops in vehicles or industrial environments and hence low-speed and short-range networks.</t>

<t>Emerging or future use-cases such as remote PLC or remote driving extend these requirements also
into metropolitan scale networks. In these environments, on-time forwarding is also called
synchronous forwarding for synchronous control loops.</t>

<t>Typically, in synchronous control loops, central units such as Programmable Logic Controllers
(PLC) do control a set of sensors and actors, polling or periodically receiving status information
from sensors and sending action instructions to actors. When packet forwarding is
on-time (synchronous), this central unit does exactly know the time at which sensors
sent a packet and the time at which packets are received by actors and they can react on it.</t>

<t>These solutions do not require sensors and actors to have accurate, synchronised clocks. Instead,
the central unit can control the time at which sensor and actors perform their operations
within the accuracy of the (zero/low) jitter of the network packet transmission.</t>

<t>When bounded latency forwarding is (only) in-time, edge nodes in the network and/or sensors
and actors need to convert the packets arriving with high jitter into an on-time arrival model
to continue supporting this application required model.</t>

<t>This conversion is typically called a playout-buffer mechanism and involves the need to synchronizing time
between senders and receivers, and hence most commonly the need for the network to support clock
synchronization to support these edge devices and/or sender receivers.</t>

<t>In result, existing bounded latency mechanisms to support synchronous, on-time delivery of packets
do require clock synchronization across the network. In the existing mechanisms like CQF for
the forwarding mechanism itself, in the on-time mechanisms to synchronize edge-devices and hosts.</t>

</section>
<section anchor="challenges-with-network-wide-clock-synchronization"><name>Challenges with network wide clock synchronization</name>

<t>While clock synchronization is a well understood technology, it is also a significant operational
if not device equipment cost factor [TBD: Add details if desired].</t>

<t>Therefore, clock synchronization with e.g.: IEEE 1588 PTP is
only deployed where no simpler solutions exist that provide the same benefits but without
clock synchronization. Today this for example means that in mobile networks, only the so-called
fronthaul deploys clock synchronization, but not the backhaul.</t>

<t>In result, it could be a challenge
to introduce new applications such as the above mentioned remote PLC, driving applications if
they wanted to rely on a bounded latency network service. But even for existing markets such
as in-car or industrial networks, removal or reduction of the need for clock synchronization could
be a significant evolution to reduce cost and increase simplicity of solutions.</t>

</section>
</section>
</section>
<section anchor="glbf-introduction-informative"><name>gLBF introduction (informative)</name>

<section anchor="dampers"><name>Dampers</name>

<t>The principle of the mechanism presented here is the so-called "Damper" mechanism, first mentioned
in the early 1990th, but never standardized back then, primarily because the required forwarding
was considered to be too advanced to be supportable in equipment at the time. These limitations
are not starting to be resolved, and hence it seems like a good time to re-introduce this mechanism.</t>

<t>The principle of damper based forwarding is easily explained: When a packet is sent by a node A,
this node will have measured the latency L, how long the packet was processed by the node. The main factor
of L is  the queuing latency of the packet in A because of competing traffic sent to the
same outgoing interface. Based on the admission control and queuing algorithms used in the node, there
can be a known upper bound M(ax) for this processing latency though, and when the packet then arrives at the
next-hop receiving node B, this node will simply further delay the packet by (B-L), and in result
the packet will have synchronously been forwarded from A to B with a constant latency of M(ax).</t>

<figure title="Forwarding without Damper" anchor="FIG1"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+         +-+      |      |   +-+         +-+      |
|-x-|F|---------|Q|------|------|-x-|F|---------|Q|------|
|   +-+         +-+      | Link |   +-+         +-+      |
+------------------- ----+      +------------------------+
  |<--------- Hop A/B latency --->|
]]></artwork></figure>

<t><xref target="FIG1"/> shows a single hop from node A to node B without Dampers.</t>

<t>A receives a packet. The F)orwarding module determines some outgoing
interface towards node B where it is enqueued into Q because
competing packets may already be in line to be sent from Q to B.
This is because packets may be arriving simultaneously from multiple
different input interfaces on A (not shown in picture), and/or the
speed of the receiving interface on A is higher than the speed of the
link to B.</t>

<t>Forwarding F can be L2 switching and/or L3 routing, the choice does not
impact the considerations described here.</t>

<t>When the packet is finally sent from Q over link to B, B repeats the same steps
towards the next (not shown) node.</t>

<t>(x) is the reception time of
the packet in A and B, and the per-hop latency of the packet
is xB - xA, predominantly determined by the time the packet has
to wait in Q plus any other relevant processing latency, fixed or
variable from F plus the propagation latency of the packet across
link, which is predominantly determined by the serialization latency
of the packet plus the propagation latency of the link, which is
the speed of light in the material used, for example fiber, where
the speed of light is 31 percent slower than across vacuum.</t>

<t>All the factors impacting the hop A/B latency other than Q in A are
naturally bounded: A well defined maximum can be calculated or
overestimated. The transmission of the packet from A to B is composed
from the serialization latency of the packet which can be calculated
from the packet length of the packet and per-packet-bit speed of the
packet. The propagation latency through the link can be calculated from
speed of light and material (speed of light is 31% slower through fiber than
vacuum for example). And so on.</t>

<t>To have a guaranteed bounded latency through Q, an admission control
system is required that tracks, accounts and limits the total amount
of traffic through Q. Admission control mechanisms rely on knowing the
maximum amount of bursts that each traffic flow can cause and adding
up those bursts to determine the maximum amount of simultaneous packet data
in Q that therefore impacts the maximum latency of each individual packet
through Q.</t>

<t>With such an admission control system, one can therefore calculate
a maximum hop A/B propagation latency MAX for a packet, but 
packets will naturally have variable hop A/B latency lower than MAX,
based on differences in packet size and differences in competing
traffic. In result, their relative arrival times xB in B will be different
from their relative arrival times xA in A. This leads to so-called
"burst-aggregation" and hence the problem that the admission control
system can not easily calculate the maximum burst and latency
through Q in B as it can do for Q in A.</t>

<t>If however packets could be made to be forwarded such that
their Hop A/B latency would all be the same (synchronous, on-time), then the
admission control system could apply the same calculus to
B as it was able to apply to A. This is what damper mechanisms attempt to achieve.</t>

<figure title="Forwarding with Damper" anchor="FIG2"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+   +-+   +-+      |      |   +-+   +-+   +-+      |
|-x-|D|-y-|F|---|Q|------|------|-x-|D|-y-|F|---|Q|------|
|   +-+   +-+   +-+      | Link |   +-+   +-+   +-+      |
+------------------------+      +------------------------+
        |<- A/B in-time latency ->|
        |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG2"/> shows the most simple to explain, but not implement, Damper
mechanism to achieve exactly this. Node A measures the time at
xA, sends this value in a packet header to B. B measures the
time directly at reception of the packet in xB. It then delays
the packet for a time (MAX-(xB-yA)). In result, the latency
(yB-yA) will exactly be MAX, up to the accuracy of the damper.</t>

<t>The first challenge with simple approach is the need to synchronize
the clocks between A and B, so that (xB-yA) can correctly be calculated.</t>

<figure title="Forwarding with Damper and measuring" anchor="FIG3"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+   +-+   +-+      |      |   +-+   +-+   +-+      |
|-x-|D|-y-|F|---|Q|----z-|------|-x-|D|-y-|F|---|Q|----z-|
|   +-+   +-+   +-+      | Link |   +-+   +-+   +-+      |
+------------------------+      +------------------------+
        |<- A/B in-time latency ->|
        |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG3"/> shows how this can be resolved by also measuring the time
at z. A calculates d = (MAX1-(zA-yA)) and sends d in a header of the
packet to B. B then delays the packet in D by d relative to the also
locally measured time xB. Because the calculation of d in A and the
delay by d in D does not depend on clock synchronization between A
and B anymore, this approach eliminate the need for clock synchronization.</t>

<t>But in result of this change, the measurement of latency incurred by
transmitting the packet over link is also not included in this
approach.</t>

<t>MAX1 in this approach is the bounded latency for all processing of
a packet except for this link propagation latency P, equivalent to
the speed of light across the transmission medium times the length of the medium,
and MAX = MAX1 + P.</t>

<t>The serialization latencies latency across the sending interface
on A and the receiving interface on B can be included in MAX1 though.
It is only necessary for the measured timestamps zA and xB to
be the logically for the same point in time assuming the link had a minimum
length, e.g.: for a  back to back connection. For example, the reference
time is the time when the first bit of the packet can be observed
on the shortest wire between A an B. A can most likely measure zA only
some fixed offset o of time before r, hence needs to correct zA += o
before calculating d. Likewise, B could for example only measure xB
exactly after the whole packet arrived. this would be l * r later than
the reference time, where r is the serialization rate of the receiving
interface on B and l is the length of the packet. B would hence need
to adjust d -= l * r to subtract this time from the time the packet
needs to be delayed in D.</t>

<figure title="gLBF refined model" anchor="FIG4"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
| +-+    +-+   +-+   +-+ |      | +-+    +-+   +-+   +-+ |
|-|F|--x-|D|-y-|Q|-z-|M|-|------|-|F|--x-|D|-y-|Q|-z-|M|-|
| +-+    +-+   +-+   +-+ |      | +-+    +-+   +-+   +-+ |
+------------------------+      +------------------------+
       |<- Dampened Q ->|              |<- Dampened Q ->|
             |<- A/B in-time latency ->|
             |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG4"/> shows a further refined model for simpler implementation.
Larger routers/switches are typically modular, and forwarding
happens on a different modular component (such as a linecard)
than the queuing for the outgoing interface. Expecting clock
synchronization even within such a large device is undesirable.</t>

<t>In result, <xref target="FIG4"/> shows damper operation as occurring solely before
enqueuing packets into Q and after dequeuing them. The Damper
module measures the x timestamp, extracts d from the packet header,
adjusts it according to the above described considerations and then
delays the packet by that value and enqueues the packet afterwards. 
After the packet is dequeued, the Marking module measures the time
z, adjusts it according to the previously described considerations
calculates the value of d and overwrites the packet header before
sending the packet.</t>

</section>
<section anchor="dampers-and-controller-plane"><name>Dampers and controller-plane</name>

<figure title="Path selection and gLBF example" anchor="FIG5"><artwork><![CDATA[
         Controller-plane:
        Path Control  and
         Admission Control
      ..     .      .      ..
     .       .       .       . 
   +---+   +---+   +---+   +---+  Src---| A |---| B |---| C |---| D |
   +---+   +---+   +---+   +---+
     |       |       |       |
   +---+   +---+   +---+   +---+
   | E |---| F |---| G |---| H |--- Dst
   +---+   +---+   +---+   +---+
]]></artwork></figure>

<t>While the damper mechanism described so far can be realized with different
queuing mechanisms and hence different calculus for every interface
for which bounded latency can be supported, the role of the controller
plane involves other components beside admission control, and those
need to be possible to tightly be coupled with admission control for
efficient use of resources.</t>

<t><xref target="FIG5"/> shows the most common problem. The controller-plane needs to
provide for a new traffic flow from Src to Dst a path through the
network and reserve the resources. The most simple form for just bandwidth
reservation is called Constrained Shortest Path First (CSPF). With the
need to also provide end-to-end latency guarantees in support of bounded
latency, not only does the path calculation becomes more complex, but
many per-hop bounded latency queuing mechanisms support also to select
more than one per-hop latency on the hop, and the controller-plane
needs to determine for each hop of a possible hop, which one is best.</t>

<t>In result, the controller-plane needs to know exactly what parameters
the bounded latency queuing mechanism on each hop/interface can have
to perform these operations, and standardization of these parameters
ultimately results in standardizing the bounded latency queuing mechanism -
and not only the damper part.</t>

</section>
</section>
<section anchor="glbf-spec"><name>gLBF specification (normative)</name>

<section anchor="damper-with-ubs-queuingcalculus"><name>Damper with UBS queuing/calculus</name>

<t>guaranteed Latency Based Forwarding (gLBF) is using the queuing model
of Urgency Based Scheduling (UBS), which is also used in TSN
Asynchronus Traffic Shaping (TSN-ATS).  This allows gLBF to
re-use or co-develop one and the same controller-plane and its
optimization algorithms for bandwidth and latency control for
TSN-ATS or a DetNet L3 equivalent thereof and gLBF. Hence, gLBF
should provide the most easily operationalised on-time solution
for networks that want to evolve from an in-time model via TSN-ATS,
or that even would want to operate both options in parallel.</t>

<t>Effectively, gLBF replaces the per-flow interleaves regulators of UBS
with per-flow stateless damper operations. Where UBS only provides
for in-time latency guarantees, gLBF provides in result in-time
latency service, but with fundamentally the same calculus as UBS.</t>

<figure title="Path selection and gLBF example" anchor="FIG6"><artwork><![CDATA[
   +-----------------------------------------------+
   | UBS strict priority Queuing block             |
   |                                               |
   |               +--------------+   +----------+ |
   | +-------+   /-| Prio 1 queue |---|          | |
   | | Packet|  /  +--------------+   | Strict   | |
-->| | Prio  |->         ...         -| Priority | |--->
   | | enque |  \  +--------------+   | Schedule | |
   | +-------+   \-| Prio 8 queue |---|          | |
   |               +--------------+   +----------+ |
   +-----------------------------------------------+
]]></artwork></figure>

<t>Strict Priority Scheduling removes packets always from the
highest priority queue (1 is highest) that has a pending packet
and forward it. UBS defines two options for the traffic model
traffic flows. The more flexible one defines that each flow
specifies a rate r and a maximum burst size b (in bits).</t>

<t>In result, the bounded latency of a packet in priority 1 is (roughly)
the latency required to serialize the sum of the bursts 
of all the flows admitted into priority 1. The bounded latency of a packet
in priority 2 is that priority latency plus the latency required
to serialize the sum of the bursts of all the flows admitted into
priority 2. And so on.</t>

</section>
<section anchor="glbf-processing"><name>gLBF processing</name>

<t>The following text extends/refines the damper processing as necessary
for gLBF.</t>

<figure title="refined gLBF processing diagram" anchor="FIG7"><artwork><![CDATA[
   +------------------------+       +------------------------+ 
   | Node A                 |       | Node B                 |
   | +-+    +-+   +-+   +-+ |       | +-+    +-+   +-+   +-+ |
 --|-|F|--x-|D|-y-|Q|-z-|M|-|-------|-|F|--x-|D|-y-|Q|-z-|M|-|--->
IIF| +-+    +-+   +-+   +-+ |OIF IIF| +-+    +-+   +-+   +-+ |OIF
   +------------------------+       +------------------------+
          |<- Dampened Q ->|               |<- Dampened Q ->|
                |<- A/B in-time latency -->|
                |<--A/B on-time latency -------->|
]]></artwork></figure>

<t>The Delay module retrieves the delay from a packet header fields,
requirements for that packet header field are defined in <xref target="DM"/>.</t>

<t>Because serialization speeds on the Incoming InterFace (IIF) will be different
for different IIF, and because D will likely need to compensate the measured
time x based on the packet length and serialization speed, an internal
packet header should maintain this information. Note that this is solely
an implementation consideration and should not impact the configuration model
of gLBF.</t>

<t>The Queuing module is logically as described in UBS, except that
the priority of a packet in gLBF is not selected based on per-flow state,
but instead an appropriate packet header field of the packet is looked
up in the Packet Prio Enque stage of Q and the packet accordingly
enqueued based on that fields value. Possible options for indicating
such a priority in a packet header field are defined below in <xref target="DM"/>.</t>

<t>Like Q, M also needs to look up the packet priority to know MAX1 for
the packet and hence calculate d that it rewrites in the packet header.</t>

<t>The overall configuration data model to be defined for gLBF is hence
the configuration data model for UBS, which is a set of priority queues
and their maximum size, and in addition for gLBF for each of these
queues a controller-plane calculated MAX maximum latency value to be used
by M.</t>

<t>Given how the node knows the serialization speed of OIF, MAX1 for each of
the queues could automatically be derived from the maximum length in bytes
for each of the UBS priority queues, but this may not provide enough
flexibility for fine-tuning (TBD), especially when packet downgrade as
describe below is used.</t>

<t>TBD: paint a small yang-like data model, even though its trivial, like in the TCQF draft.
This should primarily include additional diagnostic data model elements,
such as maximum occupancy of any of the priority queus and number of overruns.</t>

</section>
<section anchor="error-handling"><name>Error handling</name>

<t>A well specified standard for a damper mechanism such as described in
this document needs to take care of error cases as well. The prime error
condition is, when the sending node A of a gLBF packet recognizes that
the packet was enqueued for longer than MAX1 and hence the to-be-calculated
delay to be put into the packet would have to be &lt; 0.</t>

<t>In this case, error signaling, such as ICMPv6/ICMP needs to be triggered
(throttled !), and the packet be discarded - to avoid failure of admission
control / congestion further down the path for other packets as well.</t>

<t>The data model (below) describes an optional data model that allows
instead of discarding of the packet to signal an ECN like mechanism together
with lower-priority forwarding of such packet to inform the receiver directly
about the problem and allow the application to deal with such conditions
better than through other error signaling.</t>

</section>
<section anchor="DM"><name>Data Model for gLBF packet metadata</name>

<t>gLBF is specifically designated to support per-hop, per-flow stateless
operations because it does not require any per-flow, but only per-packet
metadata for its processing. While it is possible to</t>

<section anchor="damper-24-bit-value-unit-1-usec"><name>damper:  24 bit value, unit 1 usec.</name>

<t>This is a value potentially different for every packet in a flow
and it is rewritten by every gLBF forwarder along the path.</t>

<t>gLBF requires a packet header indicating the delay that the damper
on the next hop needs to apply to the packet. Dampening only needs
to be accurate to the extent that synchronous delivery needs to be
accurate. A unit of 1 usec is considered today to be sufficient for
all purposes. The maximum size of delay is the maximum per-hop
queuing latency. 65 msec is considered to be much more than ever
desirable. Therefore, a 16 bit header field is sufficient.</t>

<t>Note that link propagation latency does not impact delay. Hence
the size of delay does not create any constraint on the length of links.</t>

</section>
<section anchor="end-to-end-priority-3-bits"><name>end-to-end-priority: 3 bits</name>

<t>This is a field that needs to be the same for all packets of
a flow so that they will be forwarded with the same latency
processing and hence do not incur different latencies and therefore
possible reordering. This field is written when the packet
enters the gLBF path and only read.</t>

<t>8 Priorities and hence 8 different latencies per hop are considered
sufficient on a per-hop basis. If prio is an end-to-end packet header 
field such as by using 8 different DSCP in IPv6/IP, this results in
8 different latency traffic classes.</t>

</section>
<section anchor="hop-by-hop-priority-3-bits-per-hop"><name>hop-by-hop-priority: 3 bits (per hop)</name>

<t>This is a better, more advanced alternative to the end-to-end-priority.
This data is optional. If it is present for a particular hop, then
it supersedes the end-to-end-priority.</t>

<t>Because this data is per-hop, it should not be encoded in an
end-to-end part of the packet header, but into a hop-by-hop part of the
header:</t>

<t>Because DetNet traffic needs the resources of each flow to be controlled,
re-routing of DetNet flows without the controller-plane is highly
undesirable and could easily result in congestion. A per-hop,
per-flow stateless forwarding mechanism such as SR-MPLS or SRv6 is
therefore highly desirable to provide a per-hop steering field. The priority
could easily be part of such a per-hop steering field by allocating
dynamically, or on-demand up to 8 different SID (Segment IDentifiers),
such as up to 8 MPLS labels, or using 3 bits of the parameter field
of IPv6 SIDs.</t>

<t>When such per-hop priority is indicated, the controller-plane can
support much more than 8 end-to-end latencies, simply by using different
per-hop latencies. For example one flow may use priority 1-1-1-1-1
across four hops, the new slower flow may use 1-2-1-2 across 4 hops,
the next one may use 2-2-2-2, and so on.</t>

</section>
<section anchor="phop-prio-3-bits"><name>phop-prio: 3 bits</name>

<t>This field is re-written on every hop when hop-by-hop-priorities are used.</t>

<t>This is an optional field which may be beneficial in and end-to-end
header if hop-by-hop priorities are used for forwarding in gLBF
and the hop-by-hop-priority of the packet on the prior hop is not
available from the hop-by-hop packet header anymore. This is typically
the case in MPLS based forwarding, such as SR-MPLS because this information
would have been removed. Note that this header field is only required
in support of optional simplified high-speed forwarding implementation
options.</t>

</section>
<section anchor="error-handling-data-items"><name>Error handling data items</name>

<t>Di: one bit</t>

<t>Downgrade intent. This bit is set when the packet enters the gLBF
domain and never changed.</t>

<t>Ds: one bit</t>

<t>Downgrade status. This bit is set to 0 when the packet enters the
gLBF domain and potentially changed to 1 by one gLBF forwarder
as described in the following.</t>

<t>When the Di bit is not set, and a gLBF forwarder recognizes that the
packet can not be forwarded within its guaranteed latency, the packet
is discarded and forwarding plane specific error signaling is triggered
(such as IGMP/ICMPv6). Discarding is done to avoid causing latency
errors further down the path because of this packet.</t>

<t>When this bit is set, the packet will not be discarded, but instead
the Ds bit is set to indicate that the packet must not be forwarded
with gLBF guaranteed latency anymore, but only with best or even
lower-than-best effort.</t>

<t>Di and DS may be encoded into the two ECN bits for IP/IPv6 dataplanes.
The required behavior should be backward compatible with existing
ECN implementations should the packet unexpected pass a router that
processes the packet not as gLBF.</t>

</section>
<section anchor="accuracy-and-sizing-of-the-damper-field-considerations"><name>Accuracy and sizing of the damper field considerations</name>

<t>This memo recommends that the damper field in packet headers has
a size of 24 bits or larger and represents the dampening time with
a resolution of 1 nsec. The following text explains the reasoning
for this recommendation.</t>

<t>The accuracy needed for the damper value in the packet header as well
as the internal calculations performed for gLBF depends on a variety of
factors. The most important factor is the accuracy of the provided
bounded latency as desired/required by the applications.</t>

<t>Even though Ethernet is defined as an asynchronous medium, the
clock accuracy is required to be +- 100 ppm (part per million). For a
1500 byte packet across a 100 Mbps Ethernet the propagation
latency difference between fastest and slowest clock is 24 nsec.
If gLBF is to be supported also on such slower speed networks with
multiple hops, then these errors may add up (?), and it is likely
not possible to provide end-to-end propagation latency accuracy
much better than 1 usec without requiring more transmission
accuracy through mechanisms such as PTP - which gLBF attempts
to avoid/minimize. For higher speed links, errors in short term
propagation latency variation becomes irrelevant though.</t>

<t>In WAN network deployments, propagation latency is in the order of
msec such as ca. 1 msec for 250 Km of fiber. Serialization latency
on a 1gbps Ethernet is ca. 1 usec for a 128 byte packet. It is
likely that an accuracy of propagation latency in the order of
1 usec is sufficient when the round-trip-time is potentially
1000 times faster.</t>

<t>In result of these two simple data points, we consider that the
accuracy of end-to-end propagation latency of interest is 1 usec.
To avoid introducing additive errors, the resolution
of the damper value needs to be higher. This memo therefore
considers to use 1 nsec resolution to represent damper values.
This too is the value used in PTP.</t>

<t>The maximum value and hence the size of the damper field in
packets depends on the maximum latency introduced in
buffering on the sending node plus smaller factors such
as serialization latency. This maximum is primarily depending
on the slowest links to be supported. A 128 byte packet
on a 100 Mbps link has ca. 10 usec propagation latency.
With just 16 bit damper value with nsec accuracy this would
allow only 6 packet buffers. This may be too low. Hence
the damper field should at minimum be at least 24 bits.</t>

</section>
</section>
<section anchor="ingress-and-egress-processing"><name>Ingress and Egress processing</name>

<section anchor="network-ingress-edge-policing"><name>Network ingress edge policing</name>

<t>When packets enter a gLBF domain from a prior hop,
such as a node from a different domain or a sending host, and that
prior hop is sending gLBF packet markings, then the timing
of the packet arrival as well as the markings in packet header(s) for
gLBF MUST only be observed when that prior hop is trusted by the gLBF domain</t>

<t>If the prior hop can not be trusted for correct marking and/or timing of
the packets, the first-hop gLBF node in the gLBF domain MUST implement
a per-flow policer for the flow to avoid that packets from such a prior hop will cause
problems with gLBF guarantees in the gLBF domain.</t>

<t>A policer is to be placed logically after the damper module of gLBF and 
before the queuing module.</t>

<t>Instead of a policer, the ingress edge node of the gLBF domain MAY instead
use a per-flow shaper or interleaved regulator. When a prior hop sends
for example packets of a flow with too high a rate, a shaper would
attempt to avoid discard packets from such a flow until also the burst size
of the flow is exceeded, by further delaying them. A policer would immediately
discard any packets that does not meet their flows envelope.</t>

</section>
<section anchor="glbf-sender-types"><name>gLBF sender types</name>

<section anchor="simple-glbf-senders"><name>Simple gLBF senders</name>

<t>Senders are expected to send their traffic flows such that their
relative timing complies to the admitted traffic envelope. Senders
that for example only send one flow, such as simple sensors or
actors, typically will be able to do this.</t>

<t>When senders can actually do this (send packets for gLBF with the
right timing), then these packets do not need to have gLBF packet header elements.
Instead, this ingress network node can calculate the damper time locally from
the following consideration to avoid any need for gLBF processing
in the sender.</t>

<t>The maximum gLBF damper time in this case is the serialization time of the largest packet
for gLBF received from the sender. Thus, when the sender sends smaller
packets than the maximum admitted packet size, then the first hop network
node needs to dampen packets based on that difference in serialization time.</t>

</section>
<section anchor="normal-glbf-senders"><name>Normal gLBF senders</name>

<t>When senders can not fully comply to send packets with their
admitted envelope, then they need to implement gLBF and indicate in the packet header the
gLBF damper value. For example, when the sender can not ensure that
at the target sending time of a gLBF packet the outgoing interface is
free, then that other still serializing packet will impact the timing
of the following packet(s) for gLBF. Another reason is when the sender has to send
packets from multiple flows and those can not or are are not generated in a coordinated
fashion to avoid delay, then they could compete on the outgoing interface
of the sender, introducing delay.</t>

<t>Normal gLBF senders simply need to implement the queue and marking stage
of gLBF, but not the dampening stage, because that only applies to receivers/forwarders.</t>

</section>
<section anchor="non-glbf-senders"><name>Non gLBF senders</name>

<t>When senders can not be simple gLBF senders but can also not
implement the gLBF queuing and marking stage, then the following
first hop node of the gLBF domain needs to treat them like untrusted
prior hop but always use a shaper or interleaved regulator so as not
to discard their packets.</t>

</section>
</section>
<section anchor="receivers-and-glbf"><name>receivers and gLBF</name>

<section anchor="normal-glbf-receivers"><name>Normal gLBF receivers</name>

<t>Normal gLBF receivers can process packet gLBF markings and need to 
therefore implement the gLBF dampening block.</t>

</section>
<section anchor="glbf-incapable-receivers"><name>gLBF incapable receivers</name>

<t>When receivers can not implement the gLBF dampening stage, then
the worst-case burst that may arrive at the receiver is to be
counted as added jitter to the end-to-end service.</t>

<t>It is impossible to let the network eliminate such bursts without
additional coordination and gating of packets across all senders
and their network ingress nodes by gating of those packets. This is
not a gLBF specific issue, but simply a limitation of the (near)
synchronous service model offered by gLBF and equally exists
in any delay and latency model with this type of service:</t>

<t>Consider a set of N senders conspire to generate a burst at the
same receiver. They do know from the admission control model the
latency each of them has to that receiver and can thus time the generation
of packets such that the last-hop router would have to send all those
N packets (one from each sender) in parallel on the interface. Which
is obviously not possible.</t>

<t>With gLBF capable receivers, this possible burst is taken into account
by including the latency introduced by such a worst-case burst into the
end-to-end latency through the controller-plane, and indicating the actual
latency that the packet needs to be dampened in the gLBF header field to the receiver.
But when the receiver does not support such dampening, then that
maximum last-hop burst-size simply turns into possible jitter.</t>

</section>
</section>
<section anchor="further-considerations"><name>Further considerations</name>

<t>A host may be a different type of gLBF sender than it is gLBF receiver.
In a common case in cloud applications, a container or VM in a data center
may the a sender/receiver, and such an application may be considered
to be trusted by the gLBF domain if it is an application of the network
operator itself (such as part of a higher level service of the network operator),
but not when it is a customer application.</t>

<t>gLBF marking needs to happen after contention of packets from all applications,
so it is something that can considered to happen inside the operating system.
This operating system of such a host may not (yet) implement gLBF, so
it may not be possible to correctly generate the gLBF marking as a sender.
Instead, the application may generate the appropriate packet markings for
steering and gLBF, but may need to leave the damper marking incorrect.</t>

<t>On the other hand, dampening received gLBF packets on a receiver can happen at the
application level, so that the operating system does not need to do it. Such
dampening is exactly the same functionality that in applications is normally
called "playout buffering", except that it will be a much smaller amount of
delay time because playout buffering needs to take the whole path delay into
account, whereas gLBF dampening is only for the prior hop.</t>

</section>
<section anchor="summary-1"><name>Summary</name>

<t>There is a non-trivial set of options for ingress/egress processing
that could be beneficial to simplify and secure dealing with different
type of sender and receivers.</t>

<t>Later versions of this memo can attempt
to define specific profiles of edge behavior to limit the recommended
set of implememtation options for sender/receivers and gLBF edge nodes.</t>

</section>
</section>
</section>
<section anchor="controller-plane-considerations-informative"><name>Controller-plane considerations (informative)</name>

<section anchor="glbf-versus-ubs-tsn-ats"><name>gLBF versus UBS / TSN-ATS</name>

<t>By relying on <xref target="UBS"/> for both the traffic model as well as the
bounded latency calculus, gLBF should be easy to operationalize
by relying on controller-plane implementations for TSN-ATS: UBS/TSN-ATS
and gLBF provide the same bounded latency and use the same model
to manage bandwidth for different flows: By calculating which
flow needs to go on which hop into which priority queues.</t>

<t>The main change to a UBS/TSN-ATS controller-plane when using gLBF
is that when a flow is to be admitted into the network, removed,
or rerouted. In UBS, each of these operations imply that the
controller-plane needs to signal to each node along the path
the traffic flow parameters so the forwarding plane can establish
the per-hop,per-flow state for the flow. Depending on network
configuration this will also imply configuration of the next-hop
for the flow for the routing.</t>

<t>For gLBF hop-by-hop operations, the first hop needs to receive
the per-path or per-hop priority information that is then imposed
into an appropriate packet header for the flows packets.</t>

</section>
<section anchor="first-hop-policing"><name>first-hop policing</name>

<t>In gLBF, the controller-plane has to perform this action only against
the ingress node to the gLBF domain. The traffic parameters such as
rate and burst size are only relevant to establish a policer so
that the flow can not violate the admitted traffic parameters for
the flow. This "policing" on the first hop is actually a function
independent of gLBF, UBS or any other method used across the path.</t>

</section>
<section anchor="path-steering"><name>path steering</name>

<t>gLBF operated independently of the path steering mechanism, but
the controller-plane will very likely want to ensure that gLBF
(or for that matter any DetNet) traffic does not unexpectedly gets
rerouted by in-networking routing mechanisms because normally
it will or can not reserve resources for such re-routed flows
on such arbitrary failure paths without significant additional
effort and/or waste of resources.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA considerations</name>

<t>None yet.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor="RFC2210">
<front>
<title>The Use of RSVP with IETF Integrated Services</title>
<author fullname="J. Wroclawski" initials="J." surname="Wroclawski"><organization/></author>
<date month="September" year="1997"/>
<abstract><t>This note describes the use of the RSVP resource reservation protocol with the Controlled-Load and Guaranteed QoS control services. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="2210"/>
<seriesInfo name="DOI" value="10.17487/RFC2210"/>
</reference>



<reference anchor="RFC2212">
<front>
<title>Specification of Guaranteed Quality of Service</title>
<author fullname="S. Shenker" initials="S." surname="Shenker"><organization/></author>
<author fullname="C. Partridge" initials="C." surname="Partridge"><organization/></author>
<author fullname="R. Guerin" initials="R." surname="Guerin"><organization/></author>
<date month="September" year="1997"/>
<abstract><t>This memo describes the network element behavior required to deliver a guaranteed service (guaranteed delay and bandwidth) in the Internet. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="2212"/>
<seriesInfo name="DOI" value="10.17487/RFC2212"/>
</reference>



<reference anchor="RFC2474">
<front>
<title>Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
<author fullname="K. Nichols" initials="K." surname="Nichols"><organization/></author>
<author fullname="S. Blake" initials="S." surname="Blake"><organization/></author>
<author fullname="F. Baker" initials="F." surname="Baker"><organization/></author>
<author fullname="D. Black" initials="D." surname="Black"><organization/></author>
<date month="December" year="1998"/>
<abstract><t>This document defines the IP header field, called the DS (for differentiated services) field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="2474"/>
<seriesInfo name="DOI" value="10.17487/RFC2474"/>
</reference>



<reference anchor="RFC3270">
<front>
<title>Multi-Protocol Label Switching (MPLS) Support of Differentiated Services</title>
<author fullname="F. Le Faucheur" initials="F." surname="Le Faucheur"><organization/></author>
<author fullname="L. Wu" initials="L." surname="Wu"><organization/></author>
<author fullname="B. Davie" initials="B." surname="Davie"><organization/></author>
<author fullname="S. Davari" initials="S." surname="Davari"><organization/></author>
<author fullname="P. Vaananen" initials="P." surname="Vaananen"><organization/></author>
<author fullname="R. Krishnan" initials="R." surname="Krishnan"><organization/></author>
<author fullname="P. Cheval" initials="P." surname="Cheval"><organization/></author>
<author fullname="J. Heinanen" initials="J." surname="Heinanen"><organization/></author>
<date month="May" year="2002"/>
<abstract><t>This document defines a flexible solution for support of Differentiated Services (Diff-Serv) over Multi-Protocol Label Switching (MPLS) networks.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="3270"/>
<seriesInfo name="DOI" value="10.17487/RFC3270"/>
</reference>



<reference anchor="RFC8655">
<front>
<title>Deterministic Networking Architecture</title>
<author fullname="N. Finn" initials="N." surname="Finn"><organization/></author>
<author fullname="P. Thubert" initials="P." surname="Thubert"><organization/></author>
<author fullname="B. Varga" initials="B." surname="Varga"><organization/></author>
<author fullname="J. Farkas" initials="J." surname="Farkas"><organization/></author>
<date month="October" year="2019"/>
<abstract><t>This document provides the overall architecture for Deterministic Networking (DetNet), which provides a capability to carry specified unicast or multicast data flows for real-time applications with extremely low data loss rates and bounded latency within a network domain.  Techniques used include 1) reserving data-plane resources for individual (or aggregated) DetNet flows in some or all of the intermediate nodes along the path of the flow, 2) providing explicit routes for DetNet flows that do not immediately change with the network topology, and 3) distributing data from DetNet flow packets over time and/or space to ensure delivery of each packet's data in spite of the loss of a path.  DetNet operates at the IP layer and delivers service over lower-layer technologies such as MPLS and Time- Sensitive Networking (TSN) as defined by IEEE 802.1.</t></abstract>
</front>
<seriesInfo name="RFC" value="8655"/>
<seriesInfo name="DOI" value="10.17487/RFC8655"/>
</reference>



<reference anchor="RFC8200">
<front>
<title>Internet Protocol, Version 6 (IPv6) Specification</title>
<author fullname="S. Deering" initials="S." surname="Deering"><organization/></author>
<author fullname="R. Hinden" initials="R." surname="Hinden"><organization/></author>
<date month="July" year="2017"/>
<abstract><t>This document specifies version 6 of the Internet Protocol (IPv6). It obsoletes RFC 2460.</t></abstract>
</front>
<seriesInfo name="STD" value="86"/>
<seriesInfo name="RFC" value="8200"/>
<seriesInfo name="DOI" value="10.17487/RFC8200"/>
</reference>



<reference anchor="RFC8964">
<front>
<title>Deterministic Networking (DetNet) Data Plane: MPLS</title>
<author fullname="B. Varga" initials="B." role="editor" surname="Varga"><organization/></author>
<author fullname="J. Farkas" initials="J." surname="Farkas"><organization/></author>
<author fullname="L. Berger" initials="L." surname="Berger"><organization/></author>
<author fullname="A. Malis" initials="A." surname="Malis"><organization/></author>
<author fullname="S. Bryant" initials="S." surname="Bryant"><organization/></author>
<author fullname="J. Korhonen" initials="J." surname="Korhonen"><organization/></author>
<date month="January" year="2021"/>
<abstract><t>This document specifies the Deterministic Networking (DetNet) data plane when operating over an MPLS Packet Switched Network.  It leverages existing pseudowire (PW) encapsulations and MPLS Traffic Engineering (MPLS-TE) encapsulations and mechanisms.  This document builds on the DetNet architecture and data plane framework.</t></abstract>
</front>
<seriesInfo name="RFC" value="8964"/>
<seriesInfo name="DOI" value="10.17487/RFC8964"/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="RFC3209">
<front>
<title>RSVP-TE: Extensions to RSVP for LSP Tunnels</title>
<author fullname="D. Awduche" initials="D." surname="Awduche"><organization/></author>
<author fullname="L. Berger" initials="L." surname="Berger"><organization/></author>
<author fullname="D. Gan" initials="D." surname="Gan"><organization/></author>
<author fullname="T. Li" initials="T." surname="Li"><organization/></author>
<author fullname="V. Srinivasan" initials="V." surname="Srinivasan"><organization/></author>
<author fullname="G. Swallow" initials="G." surname="Swallow"><organization/></author>
<date month="December" year="2001"/>
<abstract><t>This document describes the use of RSVP (Resource Reservation Protocol), including all the necessary extensions, to establish label-switched paths (LSPs) in MPLS (Multi-Protocol Label Switching).  Since the flow along an LSP is completely identified by the label applied at the ingress node of the path, these paths may be treated as tunnels.  A key application of LSP tunnels is traffic engineering with MPLS as specified in RFC 2702.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="3209"/>
<seriesInfo name="DOI" value="10.17487/RFC3209"/>
</reference>



<reference anchor="RFC4875">
<front>
<title>Extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for Point-to-Multipoint TE Label Switched Paths (LSPs)</title>
<author fullname="R. Aggarwal" initials="R." role="editor" surname="Aggarwal"><organization/></author>
<author fullname="D. Papadimitriou" initials="D." role="editor" surname="Papadimitriou"><organization/></author>
<author fullname="S. Yasukawa" initials="S." role="editor" surname="Yasukawa"><organization/></author>
<date month="May" year="2007"/>
<abstract><t>This document describes extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for the set up of Traffic Engineered (TE) point-to-multipoint (P2MP) Label Switched Paths (LSPs) in Multi- Protocol Label Switching (MPLS) and Generalized MPLS (GMPLS) networks.  The solution relies on RSVP-TE without requiring a multicast routing protocol in the Service Provider core.  Protocol elements and procedures for this solution are described.</t><t>There can be various applications for P2MP TE LSPs such as IP multicast.  Specification of how such applications will use a P2MP TE LSP is outside the scope of this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="4875"/>
<seriesInfo name="DOI" value="10.17487/RFC4875"/>
</reference>



<reference anchor="RFC8296">
<front>
<title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
<author fullname="IJ. Wijnands" initials="IJ." role="editor" surname="Wijnands"><organization/></author>
<author fullname="E. Rosen" initials="E." role="editor" surname="Rosen"><organization/></author>
<author fullname="A. Dolganow" initials="A." surname="Dolganow"><organization/></author>
<author fullname="J. Tantsura" initials="J." surname="Tantsura"><organization/></author>
<author fullname="S. Aldrin" initials="S." surname="Aldrin"><organization/></author>
<author fullname="I. Meilik" initials="I." surname="Meilik"><organization/></author>
<date month="January" year="2018"/>
<abstract><t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a &quot;multicast domain&quot;, without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol.  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The details of the encapsulation depend on the type of network used to realize the multicast domain.  This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t></abstract>
</front>
<seriesInfo name="RFC" value="8296"/>
<seriesInfo name="DOI" value="10.17487/RFC8296"/>
</reference>



<reference anchor="RFC8402">
<front>
<title>Segment Routing Architecture</title>
<author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"><organization/></author>
<author fullname="S. Previdi" initials="S." role="editor" surname="Previdi"><organization/></author>
<author fullname="L. Ginsberg" initials="L." surname="Ginsberg"><organization/></author>
<author fullname="B. Decraene" initials="B." surname="Decraene"><organization/></author>
<author fullname="S. Litkowski" initials="S." surname="Litkowski"><organization/></author>
<author fullname="R. Shakir" initials="R." surname="Shakir"><organization/></author>
<date month="July" year="2018"/>
<abstract><t>Segment Routing (SR) leverages the source routing paradigm.  A node steers a packet through an ordered list of instructions, called &quot;segments&quot;.  A segment can represent any instruction, topological or service based.  A segment can have a semantic local to an SR node or global within an SR domain.  SR provides a mechanism that allows a flow to be restricted to a specific topological path, while maintaining per-flow state only at the ingress node(s) to the SR domain.</t><t>SR can be directly applied to the MPLS architecture with no change to the forwarding plane.  A segment is encoded as an MPLS label.  An ordered list of segments is encoded as a stack of labels.  The segment to process is on the top of the stack.  Upon completion of a segment, the related label is popped from the stack.</t><t>SR can be applied to the IPv6 architecture, with a new type of routing header.  A segment is encoded as an IPv6 address.  An ordered list of segments is encoded as an ordered list of IPv6 addresses in the routing header.  The active segment is indicated by the Destination Address (DA) of the packet.  The next active segment is indicated by a pointer in the new routing header.</t></abstract>
</front>
<seriesInfo name="RFC" value="8402"/>
<seriesInfo name="DOI" value="10.17487/RFC8402"/>
</reference>



<reference anchor="RFC8754">
<front>
<title>IPv6 Segment Routing Header (SRH)</title>
<author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"><organization/></author>
<author fullname="D. Dukes" initials="D." role="editor" surname="Dukes"><organization/></author>
<author fullname="S. Previdi" initials="S." surname="Previdi"><organization/></author>
<author fullname="J. Leddy" initials="J." surname="Leddy"><organization/></author>
<author fullname="S. Matsushima" initials="S." surname="Matsushima"><organization/></author>
<author fullname="D. Voyer" initials="D." surname="Voyer"><organization/></author>
<date month="March" year="2020"/>
<abstract><t>Segment Routing can be applied to the IPv6 data plane using a new type of Routing Extension Header called the Segment Routing Header (SRH). This document describes the SRH and how it is used by nodes that are Segment Routing (SR) capable.</t></abstract>
</front>
<seriesInfo name="RFC" value="8754"/>
<seriesInfo name="DOI" value="10.17487/RFC8754"/>
</reference>



<reference anchor="RFC8938">
<front>
<title>Deterministic Networking (DetNet) Data Plane Framework</title>
<author fullname="B. Varga" initials="B." role="editor" surname="Varga"><organization/></author>
<author fullname="J. Farkas" initials="J." surname="Farkas"><organization/></author>
<author fullname="L. Berger" initials="L." surname="Berger"><organization/></author>
<author fullname="A. Malis" initials="A." surname="Malis"><organization/></author>
<author fullname="S. Bryant" initials="S." surname="Bryant"><organization/></author>
<date month="November" year="2020"/>
<abstract><t>This document provides an overall framework for the Deterministic Networking (DetNet) data plane.  It covers concepts and considerations that are generally common to any DetNet data plane specification. It describes related Controller Plane considerations as well.</t></abstract>
</front>
<seriesInfo name="RFC" value="8938"/>
<seriesInfo name="DOI" value="10.17487/RFC8938"/>
</reference>



<reference anchor="RFC8986">
<front>
<title>Segment Routing over IPv6 (SRv6) Network Programming</title>
<author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"><organization/></author>
<author fullname="P. Camarillo" initials="P." role="editor" surname="Camarillo"><organization/></author>
<author fullname="J. Leddy" initials="J." surname="Leddy"><organization/></author>
<author fullname="D. Voyer" initials="D." surname="Voyer"><organization/></author>
<author fullname="S. Matsushima" initials="S." surname="Matsushima"><organization/></author>
<author fullname="Z. Li" initials="Z." surname="Li"><organization/></author>
<date month="February" year="2021"/>
<abstract><t>The Segment Routing over IPv6 (SRv6) Network Programming framework enables a network operator or an application to specify a packet processing program by encoding a sequence of instructions in the IPv6 packet header.</t><t>Each instruction is implemented on one or several nodes in the network and identified by an SRv6 Segment Identifier in the packet.</t><t>This document defines the SRv6 Network Programming concept and specifies the base set of SRv6 behaviors that enables the creation of interoperable overlays with underlay optimization.</t></abstract>
</front>
<seriesInfo name="RFC" value="8986"/>
<seriesInfo name="DOI" value="10.17487/RFC8986"/>
</reference>



<reference anchor="RFC9016">
<front>
<title>Flow and Service Information Model for Deterministic Networking (DetNet)</title>
<author fullname="B. Varga" initials="B." surname="Varga"><organization/></author>
<author fullname="J. Farkas" initials="J." surname="Farkas"><organization/></author>
<author fullname="R. Cummings" initials="R." surname="Cummings"><organization/></author>
<author fullname="Y. Jiang" initials="Y." surname="Jiang"><organization/></author>
<author fullname="D. Fedyk" initials="D." surname="Fedyk"><organization/></author>
<date month="March" year="2021"/>
<abstract><t>This document describes the flow and service information model for Deterministic Networking (DetNet). These models are defined for IP and MPLS DetNet data planes.</t></abstract>
</front>
<seriesInfo name="RFC" value="9016"/>
<seriesInfo name="DOI" value="10.17487/RFC9016"/>
</reference>



<reference anchor="RFC9262">
<front>
<title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
<author fullname="T. Eckert" initials="T." role="editor" surname="Eckert"><organization/></author>
<author fullname="M. Menth" initials="M." surname="Menth"><organization/></author>
<author fullname="G. Cauchie" initials="G." surname="Cauchie"><organization/></author>
<date month="October" year="2022"/>
<abstract><t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for &quot;Bit Index Explicit Replication&quot; (BIER)  packets (RFC 8279); it is called &quot;Tree Engineering for Bit Index Explicit Replication&quot; (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.</t><t>BIER-TE introduces a new semantic for &quot;bit positions&quot; (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFERs).  A BIER-TE &quot;packets BitString&quot; therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER &quot;subdomains&quot; (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the &quot;Interior Gateway Protocol&quot; (IGP).</t></abstract>
</front>
<seriesInfo name="RFC" value="9262"/>
<seriesInfo name="DOI" value="10.17487/RFC9262"/>
</reference>



<reference anchor="RFC9320">
<front>
<title>Deterministic Networking (DetNet) Bounded Latency</title>
<author fullname="N. Finn" initials="N." surname="Finn"><organization/></author>
<author fullname="J.-Y. Le Boudec" initials="J.-Y." surname="Le Boudec"><organization/></author>
<author fullname="E. Mohammadpour" initials="E." surname="Mohammadpour"><organization/></author>
<author fullname="J. Zhang" initials="J." surname="Zhang"><organization/></author>
<author fullname="B. Varga" initials="B." surname="Varga"><organization/></author>
<date month="November" year="2022"/>
<abstract><t>This document presents a timing model for sources, destinations, and Deterministic Networking (DetNet) transit nodes. Using the model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing methods. The methodology can be used by the management and control planes and by resource reservation algorithms to provide bounded latency and zero congestion loss for the DetNet service.</t></abstract>
</front>
<seriesInfo name="RFC" value="9320"/>
<seriesInfo name="DOI" value="10.17487/RFC9320"/>
</reference>


<reference anchor="SCQF">
   <front>
      <title>Segment Routing (SR) Based Bounded Latency</title>
      <author fullname="Mach Chen" initials="M." surname="Chen">
         <organization>Huawei</organization>
      </author>
      <author fullname="Xuesong Geng" initials="X." surname="Geng">
         <organization>Huawei</organization>
      </author>
      <author fullname="Zhenqiang Li" initials="Z." surname="Li">
         <organization>China Mobile</organization>
      </author>
      <date day="13" month="March" year="2023"/>
      <abstract>
	 <t>   One of the goals of DetNet is to provide bounded end-to-end latency
   for critical flows.  This document defines how to leverage Segment
   Routing (SR) to implement bounded latency.  Specifically, the SR
   Identifier (SID) is used to specify transmission time (cycles) of a
   packet.  When forwarding devices along the path follow the
   instructions carried in the packet, the bounded latency is achieved.
   This is called Cycle Specified Queuing and Forwarding (CSQF) in this
   document.

   Since SR is a source routing technology, no per-flow state is
   maintained at intermediate and egress nodes, SR-based CSQF naturally
   supports flow aggregation that is deemed to be a key capability to
   allow DetNet to scale to large networks.


	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-chen-detnet-sr-based-bounded-latency-02"/>
   
</reference>


<reference anchor="LSDN">
   <front>
      <title>Large-Scale Deterministic IP Network</title>
      <author fullname="Li Qiang" initials="L." surname="Qiang">
         <organization>Huawei</organization>
      </author>
      <author fullname="Xuesong Geng" initials="X." surname="Geng">
         <organization>Huawei</organization>
      </author>
      <author fullname="Bingyang Liu" initials="B." surname="Liu">
         <organization>Huawei</organization>
      </author>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Huawei</organization>
      </author>
      <author fullname="Liang Geng" initials="L." surname="Geng">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Guangpeng Li" initials="G." surname="Li">
         </author>
      <date day="2" month="September" year="2019"/>
      <abstract>
	 <t>   This document presents the overall framework and key method for
   Large-scale Deterministic Network (LDN).  LDN can provide bounded
   latency and delay variation (jitter) without requiring precise time
   synchronization among nodes, or per-flow state in transit nodes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-qiang-detnet-large-scale-detnet-05"/>
   
</reference>


<reference anchor="TCQF">
   <front>
      <title>Deterministic Networking (DetNet) Data Plane - Tagged Cyclic Queuing and Forwarding (TCQF) for bounded latency with low jitter in large scale DetNets</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname="Yizhou Li" initials="Y." surname="Li">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Stewart Bryant" initials="S." surname="Bryant">
         <organization>University of Surrey ICS</organization>
      </author>
      <author fullname="Andrew G. Malis" initials="A. G." surname="Malis">
         <organization>Malis Consulting</organization>
      </author>
      <author fullname="Jeong-dong Ryoo" initials="J." surname="Ryoo">
         <organization>ETRI</organization>
      </author>
      <author fullname="Peng Liu" initials="P." surname="Liu">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Guangpeng Li" initials="G." surname="Li">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Shoushou Ren" initials="S." surname="Ren">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Fan Yang" initials="F." surname="Yang">
         <organization>Huawei Technologies</organization>
      </author>
      <date day="19" month="June" year="2023"/>
      <abstract>
	 <t>   This memo specifies a forwarding method for bounded latency and
   bounded jitter for Deterministic Networks and is a variant of the
   IEEE TSN Cyclic Queuing and Forwarding (CQF) method.  Tagged CQF
   (TCQF) supports more than 2 cycles and indicates the cycle number via
   an existing or new packet header field called the tag to replace the
   cycle mapping in CQF which is based purely on synchronized reception
   clock.

   This memo standardizes TCQF as a mechanism independent of the tagging
   method used.  It also specifies tagging via the (1) the existing MPLS
   packet Traffic Class (TC) field for MPLS packets, (2) the IP/IPv6
   DSCP field for IP/IPv6 packets, and (3) a new TCQF Option header for
   IPv6 packets.

   Target benefits of TCQF include low end-to-end jitter, ease of high-
   speed hardware implementation, optional ability to support large
   number of flow in large networks via DiffServ style aggregation by
   applying TCQF to the DetNet aggregate instead of each DetNet flow
   individually, and support of wide-area DetNet networks with arbitrary
   link latencies and latency variations as well as low accuracy clock
   synchronization.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-eckert-detnet-tcqf-03"/>
   
</reference>


<reference anchor="I-D.dang-queuing-with-multiple-cyclic-buffers">
   <front>
      <title>A Queuing Mechanism with Multiple Cyclic Buffers</title>
      <author fullname="Bingyang Liu" initials="B." surname="Liu">
         <organization>Huawei</organization>
      </author>
      <author fullname="Joanna Dang" initials="J." surname="Dang">
         <organization>Huawei</organization>
      </author>
      <date day="22" month="February" year="2021"/>
      <abstract>
	 <t>   This document presents a queuing mechanism with multiple cyclic
   buffers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-dang-queuing-with-multiple-cyclic-buffers-00"/>
   
</reference>


<reference anchor="BIER-TE">
   <front>
      <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname="Michael Menth" initials="M." surname="Menth">
         <organization>University of Tuebingen</organization>
      </author>
      <author fullname="Gregory Cauchie" initials="G." surname="Cauchie">
         <organization>KOEVOO</organization>
      </author>
      <date day="25" month="April" year="2022"/>
      <abstract>
	 <t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for &quot;Bit Index Explicit Replication&quot; (BIER) packets (RFC 8279); it is called &quot;Tree Engineering for Bit Index Explicit Replication&quot; (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.

 BIER-TE introduces a new semantic for &quot;bit positions&quot; (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFERs). A BIER-TE &quot;packets BitString&quot; therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER &quot;subdomains&quot; (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the &quot;Interior Gateway Protocol&quot; (IGP).
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-bier-te-arch-13"/>
   
</reference>


<reference anchor="DNBL">
   <front>
      <title>Deterministic Networking (DetNet) Bounded Latency</title>
      <author fullname="Norman Finn" initials="N." surname="Finn">
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname="Jean-Yves Le Boudec" initials="J." surname="Le Boudec">
         <organization>EPFL</organization>
      </author>
      <author fullname="Ehsan Mohammadpour" initials="E." surname="Mohammadpour">
         <organization>EPFL</organization>
      </author>
      <author fullname="Jiayi Zhang" initials="J." surname="Zhang">
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname="Balazs Varga" initials="B." surname="Varga">
         <organization>Ericsson</organization>
      </author>
      <date day="8" month="April" year="2022"/>
      <abstract>
	 <t>This document presents a timing model for sources, destinations, and Deterministic Networking (DetNet) transit nodes.  Using the model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing methods.  The methodology can be used by the management and control planes and by resource reservation algorithms to provide bounded latency and zero congestion loss for the DetNet service.
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-detnet-bounded-latency-10"/>
   
</reference>


<reference anchor="I-D.stein-srtsn">
   <front>
      <title>Segment Routed Time Sensitive Networking</title>
      <author fullname="Yaakov (J) Stein" initials="Y. J." surname="Stein">
         <organization>RAD</organization>
      </author>
      <date day="29" month="August" year="2021"/>
      <abstract>
	 <t>   Routers perform two distinct user-plane functionalities, namely
   forwarding (where the packet should be sent) and scheduling (when the
   packet should be sent).  One forwarding paradigm is segment routing,
   in which forwarding instructions are encoded in the packet in a stack
   data structure, rather than programmed into the routers.  Time
   Sensitive Networking and Deterministic Networking provide several
   mechanisms for scheduling under the assumption that routers are time
   synchronized.  The most effective mechanisms for delay minimization
   involve per-flow resource allocation.

   SRTSN is a unified approach to forwarding and scheduling that uses a
   single stack data structure.  Each stack entry consists of a
   forwarding portion (e.g., IP addresses or suffixes) and a scheduling
   portion (deadline by which the packet must exit the router).  SRTSN
   thus fully implements network programming for time sensitive flows,
   by prescribing to each router both to-where and by-when each packet
   should be sent.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-stein-srtsn-01"/>
   
</reference>


<reference anchor="I-D.eckert-detnet-bounded-latency-problems">
   <front>
      <title>Problems with existing DetNet bounded latency queuing mechanisms</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname="Stewart Bryant" initials="S." surname="Bryant">
         <organization>Stewart Bryant Ltd</organization>
      </author>
      <date day="12" month="July" year="2021"/>
      <abstract>
	 <t>   The purpose of this memo is to explain the challenges and limitations
   of existing (standardized) bounded latency queuing mechanisms for
   desirable (large scale) MPLS and/or IP based networks to allow them
   to support DetNet services.  These challenges relate to low-cost,
   high-speed hardware implementations, desirable network design
   approaches, system complexity, reliability, scalability, cost of
   signaling, performance and jitter experience for the DetNet
   applications.  Many of these problems are rooted in the use of per-
   hop, per-flow (DetNet) forwarding and queuing state, but highly
   accurate network wide time synchronization can be another challenge
   for some networks.

   This memo does not intend to propose a specific queuing solution, but
   in the same way in which it describes the challenges of mechanisms,
   it reviews how those problem are addressed by currently proposed new
   queuing mechanisms.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-eckert-detnet-bounded-latency-problems-00"/>
   
</reference>


<reference anchor="UBS" >
  <front>
    <title>Urgency-Based Scheduler for Time-Sensitive Switched Ethernet Networks</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <author initials="S." surname="Samii" fullname="Soheil Samii">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="IEEE" value="28th Euromicro Conference on Real-Time Systems (ECRTS)"/>
</reference>
<reference anchor="LBF" >
  <front>
    <title>High-Precision Latency Forwarding over Packet-Programmable Networks</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <date year="2020" month="April"/>
  </front>
  <seriesInfo name="IEEE" value="2020 IEEE/IFIP Network Operations and Management Symposium (NOMS 2020)"/>
  <seriesInfo name="doi" value="10.1109/NOMS47738.2020.9110431"/>
</reference>
<reference anchor="gLBF" target="https://dl.ifip.org/db/conf/cnsm/cnsm2021/1570754857.pdf">
  <front>
    <title>gLBF: Per-Flow Stateless Packet Forwarding with Guaranteed Latency and Near-Synchronous Jitter,</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization></organization>
    </author>
    <date year="2021" month="October"/>
  </front>
  <seriesInfo name="IEEE" value="2021 17th International Conference on Network and Service Management (CNSM), Izmir, Turkey"/>
  <seriesInfo name="doi" value="10.23919/CNSM52442.2021.9615538"/>
</reference>
<reference anchor="gLBF-Springer2023" >
  <front>
    <title>High Precision Latency Forwarding for Wide Area Networks Through Intelligent In-Packet Header Processing (gLBF)</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization></organization>
    </author>
    <date year="2023" month="February"/>
  </front>
  <seriesInfo name="Springer" value="Journal of Network and Systems Management, 31, Article number: 34 (2023)"/>
  <seriesInfo name="doi" value="https://doi.org/10.1007/s10922-022-09718-9"/>
</reference>
<reference anchor="IEEE802.1Q" target="https://doi.org/10.1109/ieeestd.2018.8403927">
  <front>
    <title>IEEE Standard for Local and Metropolitan Area Network — Bridges and Bridged Networks (IEEE Std 802.1Q)</title>
    <author >
      <organization>IEEE 802.1 Working Group</organization>
    </author>
    <date year="2018"/>
  </front>
  <seriesInfo name="doi" value="10.1109/ieeestd.2018.8403927"/>
</reference>
<reference anchor="IEEE802.1Qbv" >
  <front>
    <title>IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged Networks - Amendment 25: Enhancements for Scheduled Traffic (TAS)</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2015"/>
  </front>
</reference>
<reference anchor="CQF" >
  <front>
    <title>IEEE Std 802.1Qch-2017: IEEE Standard for Local and Metropolitan Area Networks - Bridges and Bridged Networks - Amendment 29: Cyclic Queuing and Forwarding (CQF)</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="TSN-ATS" target="https://1.ieee802.org/tsn/802-1qcr/">
  <front>
    <title>P802.1Qcr - Bridges and Bridged Networks Amendment: Asynchronous Traffic Shaping</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <date year="2020" month="July" day="09"/>
  </front>
  <seriesInfo name="IEEE" value=""/>
</reference>
<reference anchor="IPV6-PARMS" target="https://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xhtml">
  <front>
    <title>Internet Protocol Version 6 (IPv6) Parameters</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="IANA" value=""/>
</reference>
<reference anchor="LDN" target="https://dl.ifip.org/db/conf/networking/networking2021/1570696888.pdf">
  <front>
    <title>Towards Large-Scale Deterministic IP Networks</title>
    <author initials="B." surname="Liu" fullname="Binyang Liu">
      <organization></organization>
    </author>
    <author initials="S." surname="Ren" fullname="Shoushou Ren">
      <organization></organization>
    </author>
    <author initials="C." surname="Wang" fullname="Chuang Wang">
      <organization></organization>
    </author>
    <author initials="V." surname="Angilella" fullname="Vincent Angilella">
      <organization></organization>
    </author>
    <author initials="P." surname="Medagliani" fullname="Paolo Medagliani">
      <organization></organization>
    </author>
    <author initials="S." surname="Martin" fullname="Sebastien Martin">
      <organization></organization>
    </author>
    <author initials="J." surname="Leguay" fullname="Jeremie Leguay">
      <organization></organization>
    </author>
    <date year="2021"/>
  </front>
  <seriesInfo name="IEEE" value="2021 IFIP Networking Conference (IFIP Networking)"/>
  <seriesInfo name="doi" value="10.23919/IFIPNetworking52078.2021.9472798"/>
</reference>
<reference anchor="multipleCQF" target="https://www.ieee802.org/1/files/public/docs2021/new-finn-multiple-CQF-0921-v02.pdf">
  <front>
    <title>Multiple Cyclic Queuing and Forwarding</title>
    <author initials="N." surname="Finn" fullname="Norm Finn">
      <organization></organization>
    </author>
    <date year="2021" month="October"/>
  </front>
</reference>


    </references>


<?line 1049?>

<section anchor="high-speed-implementation-considerations"><name>High speed implementation considerations</name>

<section anchor="high-speed-example-pseudocode-instead-of-reference-pseudocode"><name>High speed example pseudocode instead of reference pseudocode</name>

<t>This memo does not describe a normative reference code that aligns with
the normative functional description above <xref target="glbf-spec"/>. The primary reason
is that a naive 1:1 implementation of the functional description would
lead to inferior performance. Nevertheless, the feasibility of high speed
implementations is an important factor in the ability to deploy 
mechanisms like gLBF. Therefore, this appendix describes considerations
for such high speed implementations including pseudocode for on
possible option.</t>

<t><xref target="gLBF"/> describes two approaches for possible optimized hardware implementation
approaches for gLBF. One using "Push In First Out" (PIFO) queues, the
other one times FIFO queues. The following is a representation and
explanation of that second approach because it is hopefully more feasible
for nearer term hardware implementations given the fact that scalable
FIFO high-speed hardware implementations are still a matter for research.</t>

<t>However, the timed FIFO style algorithm presented here is also subject
to possible scalability challenges for hardware because it requires for
each outgoing interface  O(IIF * priorities^2) number of FIFO queues,
where IIF is the number of (incoming) interfaces on the node, and priorities is the
number of priority levels desired (TSN allows up to 8). If however
the priority of flows (packets) used is not per-hop but the same for every
hop (per-path), then the number is just (IIF * priorities).</t>

</section>
<section anchor="ubs-high-speed-implementations"><name>UBS high speed implementations</name>

<t>The algorithm for the pseudocode shown in this appendix further down in this section
is based on the analysis of gLBF behavior done in and for <xref target="gLBF"/>. 
This analysis re-applies the same type of analysis and algorithm that
was done in <xref target="UBS"/> and can be used to implement TSN-ATS in high
speed switching hardware. Therefore, this appendix will start by explaining
the UBS mechanisms.</t>

<t>UBS (see <xref target="UBS"/>, Figure 4), logically consists of two separate stages.
The first stage is a per priority, per incoming interface (IIF) interleaved
regulator. An interleaved regulator is a FIFO where dequeuing of the
queue head packet (qhead) is based on the per-flow state of qhead.</t>

<t>A target departure time for that qhead is calculated from the flow state of
the packet maintained on the router across packets and once that departure time
is reached, the packet is passed to one of the egress strict priority
queues. This is called interleaved regulator, because the FIFO will have
packets from multiple flows (all from the same incoming interface and
outgoing priority), hence 'interleave', and regulator because of the delaying
of the packet up to the target departure time.</t>

<t>The innovation of interleaved regulators as opposed to the prior per-flow shapers
as used in <xref target="RFC2210"/> is the recognition and mathematical proof that the arrival and
target departure times of all packets received from the same IIF (prior hop node)
and the same egress priority will be in order and that they can 
be enqueued into a single FIFO where the per-flow processing only needs to
happen for the qhead. Without (anything but negligible) added latency
vs. per-flow shapers.</t>

<t>With this understanding, the interleaved regulator and following strict
priority stage can easily be combined into a single queuing stage with
appropriate scheduling. In this "flattened" approach, each logical egress
strict priority queue consists of the per-IIF interleaved regulator (FIFO queue)
for that priority.</t>

<t>Scheduling of packets on egress does now need to perform the per-queue
processing of the per-flow state of the qhead, and then take the target
departure time of that packet into account, selecting the interleaved regulator
with the highest priority and earliest target departure time qhead.</t>

</section>
<section anchor="glbf-compared-to-ubs"><name>gLBF compared to UBS</name>

<t>In gLBF, the very same line of thoughts as in UBS can be applied and are the basis
for the described algorithm and shown pseudocode.</t>

<t>In glBF, the order of packets in their arrival and target departure times
depends on the egress priority, the IIF, but also on the priority the packet had
on the prior hop (pprio). All packets with the same (IIF,prio,prio) will arrive
in the same order in which they need to depart, and in which it is therefore
possible to use a FIFO to enqueue the packets and only do timed dequeuing
of the qhead.</t>

<t>Both prio and pprio are of interest, because when gLBF uses an encapsulation
allowing per-hop priority indications, its priority on each hop can be different.
In UBS, priority can equally be different across hops for the same packet,
but the prior hop priority is not necessary to put packets into separate
interleaved regulators because UBS targets in-time delay, where the
interleaved regulator does (only) need to compensate for burst accumulation,
but in gLBF the delay to be introduced depends on the damper value which
depends on the prior hop priority and in result, the order in which in
gLBF packets should depart (absent any burst accumulation) depends also
on the prior hop priority.</t>

<t>Because gLBF does not deal with per-flow state on the router as UBS
does in its interleaved regulators, the FIFOs for gLBF are called timed
FIFOs in this memo and not interleaved regulators</t>

</section>
<section anchor="comparison-to-normative-behavior"><name>Comparison to normative behavior</name>

<t>Whereas the normative description described D, Q and M blocks,
where the D block performs the dampening, and the Q block performs
the priority queuing block, in the high speed hardware optimization,
these are replaced by a single DQ block where the packets are
enqueued into a single stage per-(IIF,pprio,prio) FIFO (similar to UBS) and then
the dampening happens (similar to UBS) on dequeuing from that stage
by the damper time but scheduling/prioritizing packets based on their prio.</t>

<figure title="High Speed single stage gLBF" anchor="FIG-hs-diagram"><artwork><![CDATA[
   +------------------------+       +------------------------+ 
   | Node A                 |       | Node B                 |
   | +-+    +-------+   +-+ |       | +-+    +-------+   +-+ |
 --|-|F|--x-| DQ y  |-z-|M|-|-------|-|F|--x-| DQ y  |-z-|M|-|--->
IIF| +-+    +-------+   +-+ |OIF IIF| +-+    +-------+   +-+ |OIF
   +------------------------+       +------------------------+
          |<- Dampened Q ->|               |<- Dampened Q ->|
                 |<- A/B in-time latency ->|
                 |<--A/B on-time latency -------->|
]]></artwork></figure>

<t>In the normative definition, the damper value to be put into the packet
depended on the time y, where the packet left the damper stage D and
entered the priority queue stage Q. Simplified, the damper value is
(MAX1 - (z - y)).</t>

<t>In the high-speed implementation, the packets are not passed from
a damper state queue to a priority queue. Instead they stay in the
same queue. This is on one hand one of the core reasons why this
approach can support high speed - it does not require two-stage
enqueuing/dequeing/ But it eliminates also the ability to take a time stamp
at time y.</t>

<t>To therefore be able to replicate the normative gLBF behavior with a
single stage, it is necessary in the marking stage M (where the new
damper value is calculated), to somehow know y.</t>

<t>Luckily, y is exactly the target departure time of the packet for
the D and therefore also the DQ stage, so already needs to be
calculated on entry to DQ by calculation: y = (x + damper - &lt;details&gt;),
as explained below.</t>

<t>The pseudocode consists of glbf_enqueue() describing the enqueuing
into the DQ stage, and glbf_dequeue() describing the dequeuing
from the DQ stage. glbf_dequeue() (synchronously) calls 
glbf_send() which represents the marking stage M.</t>

</section>
<section anchor="pseudocode"><name>Pseudocode</name>

<section anchor="glbfenqueue"><name>glbf_enqueue()</name>

<figure title="Reference pseudocode for glbf_enqueue()" anchor="FIG-glbf-enqueue"><artwork><![CDATA[
void glbf_enqueue(pak,oif) {
  tdamp = pak.header.tdamp // damper value from packet
  prio  = pak.header.prio  // this hops packet prio
  pprio = pak.header.pprio // previous hops packet prior
  iif   = pak.context.iif  // incoming interface of packet

  ta = adj_rcv_time(now(),                  \[1]
                    pak.context.iif.speed,
                    pak.context.length)

  td = now() + ta // (dampened earliest) departure time
  pak.context.max1 = max1\[oif,prio]
  enqueue(pak, td, q(oif,iif,prio,pprio))
}
]]></artwork></figure>

<t>pak.header are parsed fields from the received gLBF packet. tdamp is
the damper value.  pak.context is a node local header of the packet.
iif is the interface on which the packet was received.</t>

<t>prio and pprio are current prior hop priority from the packet header.
If for example SRH (<xref target="RFC8754"/>) is used
in conjunction with gLBF, and <xref target="RFC8986"/> formatting of SIDs
is used, then the priority for each hop could be expressed as
a 4-bit SID ARG field (see <xref target="RFC8986"/>, section 3.1) to indicate
16 different priorities per hop.</t>

<t>Parsing the prior hop priority is not a normative requirement of gLBF,
but a specific requirement of the high speed algorithm
presented here to allow the use of single stage timed FIFOs instead of PIFOs.
This type of parsing is not required for SRH, but would be a benefit
of a packet header which like SRH keeps the prior hops information,
opposed to the SR-MPLS approach where past hop SD/Labels are discarded.</t>

<t>now() takes a timestamp from a local (unsynchronised) clock at the
time of execution.</t>

<t>[1] pak.context.ta (time of arrival) is the calculated time at which the first bit of the packet
was entering the incoming interface of the node. adj_rcv_time() is defined
in the next subsection. td is the target
departure time calculated from the current time and the damper
value from the packet. It simply convert the relative damper value to
an absolute timestamp.</t>

<t>max1[oif,prio] is the only gLBF specific interface level state
maintained (read-only) across packets. It is the maximum time calculated
by admission control in the controller-plane for each priority. It
is transferred into a context header field here even though it will
only be used further down in dequeuing because of the assumption that
access to state information is not desirable at the time critical stage
of dequeuing/serialization, whereas such state lookup is very common
for many forwarding plane features before enqueuing.</t>

<t>Finally, the packet is enqueued into a per-oif,iif,prio,pprio timed
FIFO queue.</t>

</section>
<section anchor="adjrcvtime"><name>adj_rcv_time()</name>

<t>To calculate the reference time against which the damper value in the
packet is to be used, this specification assumes the time when the
first bit of the packet is seen on the media connecting to the
incoming interface.</t>

<figure title="Example pseudocode for adv_rcv_time()" anchor="FIG-adj-rcv-time"><artwork><![CDATA[
time_t adj_rcv_time(now, speed, length) {
  time_t now
  int speed, length
      
  return now - length * 8 / speed - FUDGE
}
]]></artwork></figure>

<t>In most simple node equipment, the primary variable latency introduced 
between that (first bit) measurement point and the time when the time
parameter t for adj_rcv_time() can be taken is the deserialization time of the
packet. This can easily be calculated from the packet length as assumed to be 
known from pak.context.length and the bitrate of the incoming interface known
from pak.context.iif.speed plus fixed measured or calculated other
latency FUDGE through internal processing. The example pseudocode, those
are assumed to be static.</t>

<t>If other internal factors in prior forwarding within the node do create
significant enough variation, then those may need compensation through
additional mechanisms. In this case, instead of as shown in
glbf_enqueue(), the reference time for calculation should be taken
directly upon receipt of the packet, before entering the forwarding stage F,
and then used as the now parameter for adj_rcv_time(). This is explicitly
not shown in the code so as to highlight the most simple implementation
option that should be sufficient for most node types.</t>

</section>
<section anchor="glbfdequeue"><name>glbf_dequeue()</name>

<figure title="Pseudocode for glbf_dequeue()" anchor="FIG-glbf-dequeue-"><artwork><![CDATA[
void glbf_dequeue(oif) {
  next_packet: while(1) {
    tnow = now()
    ftd = tnow + 1  // time of first packet to send
    fq = NULL      // queue of first packet to send
    foreach prio in maxpriority...minpriority {
      foreach iif in iifs {
        foreach pprio in priorities}
          // find qhead with earliest departure time
          if (q = q(oif,iif,prio,pprio).qhead) {
            td = q.qhead.td   // target (departure) time
            if td < ftd
              ftd = td
              fq = q
            }
          }
        }
      }
      if fq { // found packet
        pak = dequeue(q,oif)
        glbf_send(oif,tnow,pak)
        break next_packet
      }
    }
  }
}
]]></artwork></figure>

<t>glbf_dequeue() finds the gLBF packet to send as the enqueued packet with the highest
priority and the earliest departure time td (as calculated in glbf_enqueue()),
where td must also not in the future, because otherwise the packet still needs to
be dampened.</t>

<t>The outer loops across this hops prio will find the packet
with exactly those properties, dequeues and sends it. For this,
the  strict priority is expressed through the term maxpriority...minpriority,
which first searches from maximum to minimum priority..</t>

<t>The two inner loops simply look for the packet with the earliest
target departure time across all the (IIF,pprio) timed FIFO queues
for the same prio and OIF.</t>

<t>In ASIC / FPGA implementations, finding this packet is not a sequential
operation as shown in the pseudocode, but can be a single clock-cycle
parallel compare operation across the td values of all queues qheads - at the expense of
chip space, similar to how TCAMs work.</t>

</section>
<section anchor="glbfsend"><name>glbf_send()</name>

<figure title="Reference pseudocode for glbf dequeue" anchor="FIG-glbf-dequeue"><artwork><![CDATA[
void glbf_send(oif,tnow,pak) {
  qtime = tnow - pak.context.td          // \[1]
  td = pak.context.max1 - qtime - FUDGE2 // \[2]
  pak.header.tdamp = td
  serialize(oif,pak)
}
]]></artwork></figure>

<t>Sending packet pak represents the marking block M in the specification.
This needs to calculate the new damping value t and update it in the
packet header before sending the packet.</t>

<t>td needs to be the maximum time max1 that the packet could have
stayed in priority queuing minus the time qtime that it actually did stay in
the queue and minus any additional time FUDGE2 that the packet will still
needs to be processed by the router before its first bit will show up
on the sending interface. This is calculated as shown in 
in [1] and [2] of <xref target="FIG-glbf-dequeue"/>.</t>

<t>The primary factor impacting FUDGE2 is whether or not this calculation and
updating of the packet header td field can be done directly before serialization
starts, or whether it potentially would need to be done while there is
still another packet in the process of being serialized on the interface.
Taking the added latency of a currently serializing packet into account
can for example be implemented by remembering the timestamp of when
that packet started to be serialized and its length - and then taking
that into account to calculate FUDGE2.</t>

</section>
</section>
<section anchor="performance-considerations"><name>Performance considerations</name>

<t>IEEE 802.1 PTP clock synchronization does need to capture the accurate
arrival time of PTP packets. It is also measuring the residency time
of PTP packets between receiving and sending the packet with an
accuracy of nsec and add this to a PTP packet header field  (correctionField).
Given how this needs to be a hardware supported functionality, it is
unclear whether there is a relevant difference supporting this for
few PTP signaling packets as compared to a much larger number of
gLBF data packets - or whether it is a good indication of the feasibility
packet processing steps gLBF requires.</t>

</section>
</section>
<section anchor="history-and-comparison-with-other-bounded-latency-methods"><name>History and comparison with other bounded latency methods</name>

<t>Preceding this work, the best solution to solve the requirements outlined in
this document, where <xref target="TCQF"/> and <xref target="SCQF"/>, which are proven to
be feasible for high speed forwarding planes, because of vendor high-speed
forwarding plane implementation using low-cost FPGA for cyclic queuing. On the other hand,
it was concluded from implementation analysis, that <xref target="UBS"/> was infeasible for the
same type of high-speed, low-cost hardware due to the need for high-speed
flow-state operations, especially read/write cycles to update the state for every packet
at packet processing speeds.</t>

<t>While TCQF and <xref target="SCQF"/> are very good solution proven to work
at high-speed, low cost, available for deployment and ready for standardization, 
the need for network wide and hop-by-hop clock synchronization (albeit at lower
accuracy than required for other mechanisms feasible at high-speed, low-cost) as well
as the need to find network wide good compromise clock cycle times makes planning and
managing them in dynamic, large-scale and/or low-cost network solutions still more complex
to operationalize than what the authors wished for.</t>

<t>In parallel to short term operationalizable solutions <xref target="TCQF"/> and <xref target="SCQF"/>, <xref target="LBF"/> was researched,
which is exploring a wide range of options to signal and control latency through advanced
per-hop processing and in-packet latency related new header elements. Unfortunately, with
the flexibility of <xref target="LBF"/> it was impossible to find a calculus for simple admission control. 
Ultimately, <xref target="gLBF"/> was designed out of the desire to have a mechanism 
derived from <xref target="LBF"/> that also provides guaranteed bounded latency, has the flexibility
benefits of <xref target="UBS"/> with respect to fine-grained and per-hop independent latency
management but does hopefully still fits the limits of what can be implemented in
high-speed, low-cost forwarding/queuing hardware.</t>

<t>This high-speed hardware forwarding feasibility of gLBF has yet to be proven.
Here are some comsiderations, why the authors think that this should be well
feasible:</t>

<t>The total number of FIFO that a platform needs to support is comparable to
the number of queues already supportable in the same type of devices today,
except that service provider core nodes may not all implement that many,
because absent of DetNet services, there is no requirement for them.</t>

<t>The need to implement timed FIFOs (if the proposed high-speed implementation
approach is used) is equal or less complex to shapers, which by now have
also started to appear on high-speed (100Gbps and faster) core routers,
primarily due to high-speed virtual leased line type of services.</t>

<t>The re-marking of packet header fields derived from the calculated
latency of the packet experienced in the node is arguably something where
iOAM type functionality likely provides also prior evidence of feasibility in
high speed hardware forwarding planes. Similarily, processing of PPT timing
protocol packets also have similar requirements.</t>

<t>Even when implementation challenges at high-speed, low-cost make gLBF a
longer term option in those networks, implementation at low-speed (1/10 Gbps)
such as in manufacturing or cars may be an interesting option to explore given
how it has the no-jitter benefits of <xref target="CQF"/> without the need for cycle
management or clock-synchronization: Best of both worlds <xref target="CQF"/> and TSN-ATS ??</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+296XIbWZIm+v88RVylzR2gEwAXLSnRuqqbEsVMVWtLkVk5
M119ywJAkIwSEIGMCJBiKmU2DzFPOE8yvh8/gaCkKuu2W9Y2KqskCcRyFj++
++fT6TQs6mVZXR5l2+5i+jiEruxWxVF2UnRFsy6rsu3KRfa66G7q5j1cl43g
G/hznJ3kXZ69XeVVkU2zy23e5FVXFMvsZd4V1eI2e5q38Ndp3dzkzZLuvHz5
9HScXdRNNq+31RK+Xcm1N2V3la3qm+wvZQfvzfJqmeXtbbW4auqq3rZ4kz6m
rIYH14Z8Pm+K66NsWXRV0U0vV/OLsKwXVb6GCS2b/KKbFov3RdNN3RXT/f1w
A9M/eX7++vl5WMCILuvm9ihru2UoN81R1jXbtjvc33+yfxjariny9VH24vn5
aYC/YKB/zld1BS+4LdqwKY9ClmVdveC/+fdlsemujrKH+GdbN/CIi9a+b2/X
yd+Ler0uqk4+CPm2u6obfOoUv8V/PJ/zumhWRdtmz2lK+mXdwFxOt922KW6K
MjsvFldVvaovy6LNfjo71stwHkV3lB0eHu5nz+B9Tb7Knn/YNPDEm/xWL1uU
HazEGexsnj1bwRbbF/USxvDsOHvycP/hfvx0C0+CO9ybinVermARu+KfF+3s
It/OloV+19RIasWy7Opmd4bHq+IDrC+Qw7NVsV7/vc8wh+H+84WOawb7uDul
s64AMu6yp80tvDGZ0QuY6aaA/8TP5cHt/J9bvm9Ot8mje+P5F/1o8K0XeZX9
gJTVJi/9H6f9d9Glsyu69J9/vXCbZa86eR5CVTfrvCuvC6TMd6fPDg8P9o8y
+/1QP37w3QP59f7hd/vy6+NHDx/qr3Cu9Ncnj+DaUFYXvWffP9x/Ir8+ePxd
vPPJI/31wb6+EL5/YM+7/9h+fazXPtk/sF8PH+ltT+Ad8O4sO3v24ynsxfRk
trgqKuUTbTOdIzebCt+aCt+CG16enbzmG34p8+pS7wBKuiym7QKIQj6Ca8/t
4Skb6ha/XODL8ZslPuSXbbEFVjdFtjhdb1dduYHnLG4Xq3IxnW8vLoqmxZE/
ffH83fT8OT+zLICBz8uimXbFNG8WV3DByeunL9238r7dWeAVsPVlBVPt2uro
bxnM7rx675lumnoOJ7mllf7p6RnxykwEzk+wYHgRi40zWP7ldgVnH8XFebku
pmdF1ZZIFtkZDAW/z553V0UDb4oigE5+0QAvQDo6Etp98fw5LNLhYxAyz7dN
vS4XTZ09qysYOryzyOoqe1fkqym+Jzu7hZVYt9no+bN352djesQSZgAPANqh
PyNTxn922kA0Adv+wyw72wBTsmMsp/AP9VVeVcCkkm97N5/Bzfm6LHv3ntVX
RbmSr5Dqnp4mi/dDeXk1fdsUi7ItYTIqgp3wra9hLd/msD8dXFhfNvl6ncNu
fOXS7QMTxV/3Xpy+eKv3ZG82RQMnta5aktiv8iq/LFB6wSKuN3VbbtfZ6PWb
V2f0gLE8clmXR9nB/uzgYP/JHn774Lvv7j+e4SWzJ/Dhg/sHyaIf7k/3H3x5
3c9nPVH4WUHZu/l4lgqZO0QQfH3ZX/vsHn2UvYWTd4o6zFkHA6c38nr7bSBF
5/tdZQmX73WRN9Mzp/T8gZShyb0vbc1BdvAdPPYFPLKpaD9A1KXkrTuG7zkr
musSPnbbNXr2+uzVeJK9+HVdNpPsfNu8L25723V4/8nBkz288OHhgweHuF8H
syePDh4+vP843a+D6QELzA65IMjgq67btEd7e8vVrLwoNzOQPXvL+d4Chri3
qNo1/Qdv3Dt4+N0+sPDHD7+bbZYXfx+bftdBTYX4sIQXgpmebRrY/qKBSd7v
UQ+e3eyzZxdZ4M/lssiOQfm0A5udA51sL3nfV6vyEjfyRTUVovuhyHEKcNYX
sA5R/76LmnSER9m9P9TbBkmovkjpRhhjpJtJdv9gAqMCLRw4SbVdz/H++w+y
Ec5TXiUUZDRQl7T/yAD297/ba4ELHB5O9/H/T747eDx9khLTffjqPwUd4HF9
vH84O/gxIYB7+DnyjGoJ2017/bIGvYE5atE19aZelfB1svvZ//6f/wueXS4v
C+a9/PsyUsdInrvM+KWyG+kqsuaJF9JF2c9i5H0PlLVJJd/jO+gm4eZlURRg
N83w+hmoZfefHH43zAkcFdx5Y7Jo8+uvX7a1X7Ycl63SZZlOP79s0+wYKHtJ
XPHw4VH2vAKpvSBqJyvUNJNldg4W5QXYn6Pz47MvrG5PgfHm9PnZ63F2nrfv
edFnWbrsD3EVUG+kj6dHbkVIw9tZEN3vxdUUbv9OBvDX0hcuxNev0xMwlEgf
zH5kZZHu8aY/zOA/bImIUOCa6fF5qlLeeytL0XxpNjYXOPXe7aBbfHaVb2Ao
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
4+rgRWD+j5rsH+D2b7P5eIZR4BpWsLvdYACCzvhEzeKbHHkwGpEocHIVWqSs
0hTxTlZLybF2zUnIGxnZjOMr5G9akVVHDk9bvt/BE/bg6mT0qvnkFxSf0o+v
8paDcvRJicvMowlob2a4SCzJ0W7C7YPnsrsBFLgKjFeZ9ZielPME6Nb8EvjC
kX39u2w0omGN4e/NWOhlh+IkBcIr6hYO5Xi6aUE0P4o6CvWgpsT8vt0iRZSk
JzZFEX3KZMeqjSFFO+aPxiXQ8z3gYHchBXH2xPgV2ftoqwZUKxe0Kakjm1+G
dna9bZB7ijHMCryM4GLbsFZEB5rWHOUMSBwMS5ZofP7MwpeWiGKrlAnwObaH
g40KAY57WSIvEz/5PZCpyEvv0TDvlfJXcM4MlA7fYE498dz4RQj3XujNnxmA
6Hi2emihw2nJV8iIxxmZrkAIxOHQvsDgdEOKbUE8kNXYqnaeKT3zvYQI74JK
mSMtL0VibgOvPGXkiH/LWIcLZThvNaoD0aQwCbg0k0gmPbMhm4srutV2nGml
Kevkeq0S/5leTKMPRAnOkebfEIkQIytTYde97QD6rMQdhtpYbyODTemOsYuE
84H7IX+hhUzyKoCyuXgP4pVjK8qsK3EA7ZwomqFcewl2MeiUmEpDGdFfCk6o
r7DBSRUf8jX5vy4C0X1vqjM2fD5+lALNT58mnCh82ZBhJUVB7T0J09erpc8/
C4lsJlXeXG6UvbJzRlgsE2uBA3hR0pJF1xAaPuQPmvb8QXB5d1NI9IKFBRvj
QrtCenI23wycTf3sMydzWatP0zZi1/upnjfy3lJCC0m9oGQixDHtRS4T0UjH
Dya+sx/IXHSTvyJ3XnYlbjLtET80ciyKajFRfE2KA2ie9Ox4v3lGYdnZ/kUl
/KcKPbqylxSooLSKuiJW2p/YRLw0brnVGzjoAAy64ZzmIRv7TAJPq7retNk1
0Ji+CeegM4e9RpOH+cyO3aKvxVAb6dN6XzaKWAPj6N12xxL4YVgkQyDD7woL
nSgLweUcABMtYTpsYJKhSrwKXiFOL4puXwEJTzl3wjILgATWRUOpkvBIrh1H
TWDKlpE6BMB4rUHsv335LCPLgP5aNhzIKj6gl0PWPLF10ZMVSNQl9TDs1o3Z
DS8qudnPY2JL5ZEX+JniDw934DOgduK/SpYR1R/WDDH5E9b0zisn2UKK9rcV
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
RMGu1jw1yQkpFluqtOVkpB5gX9SGqqUlbsRm3S8JwVjal7eWVETRNTKR2CVK
ZgVlE0TVD8Z6Ua4kMRmdvZZJg1SPOqDKMk7cwFR4XgA53WtVEt169Hh5NFNc
r3jC5+pjVfZl1m6XXnoKPnNLOELZnkIzhfD0ljo+Sajt40f4+tMnhqaqpXQh
QUfpxT52UjcUskjQkGJmERDVbQR84iPza4Fqjnv/bop2L9MIByZjP8Kp7OlE
bLF2+2H3k0swh7l1FwjqSw3sqcJS8ojJlaIPkEPjKHsaGwcR0ZFCSM5uO2yX
lHbB6QYU0EG9g//s1eiaKxG1AUoqJG+Hn9ruopBg5Lw5MmMVYeWGwwPqeJdi
pgTGxYnciSaQEj5XU5DyvKRmJAwI4KuqHT5WJhqVhszvBteTwkKECsNnkX8g
LfwKnr44gmSgd5lEFnaSEfFwItzufFW2/ATNxE8T8ZMo1Cw70Tgv7o1qL2nN
OsdXkfGSf4Qnml5iagv32g1JpEv/kGoE7o4pKnBMHvYAgH2Xq6ycMAGbHLFr
eNRuxnvMDxbJ0bJiXEovP7YpPou84GbQJj4TFw+MIdwXlUj7IetBLbuIeIiS
QLqZk5PrEjPduHrYm+FqFfh4nrYvJOLwdMEKZmB7FdFAIqYSFUJzvrPm29SR
WGLADtUqUwisZx3qAMDGLaCwE6lxo1AMBiYuUvTu6SrdU8Mxbi2vA5v1uakN
sD2cfiCNNHhlCXmucW08UROtl5yU4Zo/SOkkpvQTHpdoZKIUC7IeGXP6jpVL
f3d3+K7riAc6uLV0LqgWQJJ+DAcwerqZH41qpSryLJGTCCfDlTljW03Tu2K2
KGmyHeytsKOMzOCpHFdSCaXSx2V5qfpjapaqT3V0xyvuaywqIpmLpCTlQxhp
obJpzZjLm3kJQ8XGF1LojYsWa4qQvVFhMMIbmJcqcM6uRttvMDMpRcZFGf7i
+PXxTt7qa3RI3FJG83Q6pVxcvPYHjNtyJtrn4GIoqukvtpBwW2yX9YKD+Ra7
jh0b4vc+ddb1oBF0hzwzFFB3Nz1Xqs5hQSSlkHikXR21ZHka989isPOPHyOe
6KcIV4DrzuEHk28wgBwfd3B00F8JjWoMv4hj3NhcUArTC1JfhUthvd4se43V
BPAMLN8SvowVVIKOAc+/spUNfa2EjeTdtFfpIi/PIEUSk/yy4IiXPOEcdTmP
tbba6wYl1gdX9d/bcaPhq7topHVeJEcIBD1QxSJSVkRniNmMYwEVML4TE+i0
7Y6cm+S+NaFlX4GMvsmbvsoWenfyTN9UhSgw995ugS+DUGGk5Dfb7l42evvi
9M3YUExQyWA+SKUDlPB3CleoCtXLqSbbw9LdzFkcKM26cuSC1dwFQgnEpkKu
Qh8LaYCFcgCS8f+IHlaFQKLCXBvKAb1r6mBEldcaL+EoHL4SlEf0Cgaagqu1
ufMp+BlH+XLlpheksbUwBuqQ9AM3nZxonA+RdfHpbXeLBY0KOau1pAV30jac
3HY7/wviN3vnGA+TCde6x/EW2kDdalnlPqGCk+a4G8PM3iDMV/YPrpLr/zsc
OxwVt6uTwC1k8AYJocfrRqUgiI3j0y2zENUJdoS5gjF+RIiPiGiE6CCwfHPC
Alb8XylaHFM1rjT23MHGYrVpJHrTWDInmXVavbNUoFotOdXUBfxqpOqdS5zQ
mcJTKDtwZ9XGLPVRT7j74EudgG2+me6RC1iv+JTdJNU3+m1biMbSpgBqcKRW
t23ZmifUbGGq9JHiKXy5spZZxmLG7gQBbMFPXSU13u0ixgfRyZDfF3Fn9CVq
uWoUQTCc0rCtWlRwPa6btIWOreqVsj/DikmvAH2yoY4bUrrBTgsGYYqsHTYJ
Pxi1RaHDmwCbu0RN4gFsd8xJI64uqJaUrlygotkJtpmU7bAuyWhnJYOeNkaJ
BD2S6bFwZ46B9VzoNLh8suPqjqAqPZ9OI5/C2BFFqrg5+I0WhFoTo1/wLwLw
TgH2UpsM7qcLKVtPEiKWON2OdMhyXUTVkS4UmH3fzjsq7fpMj0akSHxxCBIW
Es3ZQoWUTLUQ5SUdQyCqRKm1TOrIqOisFbpCyhO9Q3xYPVzlEAUU14WK+29w
zX1KQCFrj7RGIPKfy7AYoRM75gjllIC0QwcoAY0l6wDH2mbsv8Yh/deJeMqU
FpKqu8Iy93qpsbEd6eCmip+jrKr62kTw4DoQCFK9Ies1tpERdc3nSbaY7a15
6h8/vjt9dnh4sA8soNRKKqqXtGAxiM6rQsDW0EukOgAxMU3shVUaHL8BzupO
DGRn4cojpx7FbAaURWOrRqYrzN0pIkT9vJTDrH7KCCmCvCxQuZ/gawm6AipP
q8Kf0eSw+faHBm+DWPbiKVdhwGeRGlOgSTMCM42DHhSEKS5BpUd1YCwRf60a
uQai7m+Hhj6JX24pxIw4Zxqru4PTsHBQ3Y0PUETvZW5HDh9DMwDSngvsqF8J
ZVB8C9fgOZ9Ha+jT5OGiQd67WKE6Bc+6Zyqg+L2EN8tuhT5gOrO/hG3L6pO+
MjjTUdRuxiFiq0Z4DgeQ7eJUWIHPJCMW2Y2FKVxfCXo3PduDy7hxpSzYtt6w
zqoYIeADEHpcWY+LwT7FWPVEocDFszc4/2BQODvo3pTykDeoAHR3yASVGerM
pvJUCcQhun/qliIvBSPulMqkMeLNCGuMeKpaAmseXPecyzEifBpz7cUy7qh/
CDQr6EdRneLyo8uVjkKrnFyjMfy8bDy7GZ4vYiom5TI9rsEvIDhcTpjiQr9E
N3XM+Sq35pWRN402+Dsot8eOraV4Rag8TPAq+o/g83KakGXE4nU801Jd3p1P
uuSJGYKnQICqo7IPZiQlTKJ8kHOJz1qcjUpuSVAma8f0k+CJGyFvMIhBIENk
EPBvDNmnxVtR8JL/nMhr2xaCSbTIN61UxXLNDcnPXTfsMkbwGZtNLYTYHUYp
ziIKlBRAvna7nFidZP/4S1V5wQrNXjdVWhSOmqcb7GFROLqpjVyRd2w7R5dd
1DnDHVJZFwmPDtNsa4DXkpdpcmj4GczARrhz4yGsZgo6cfLRYrFdy6orhrB0
Y7ky9LeapaYlw/ROTFpLRUGa3hUDKyVE6nH4e7RdViGJRUuAi6kc5OecauzQ
27k7lbGNkTpH3zkMB9Uk/nBzxSkMYp+lp4ouRfkC3SYIEMObOjFd06X159xW
FhVVOlyBv1c7kJyD2kNo+LHEpp8Rhy5bzt+NvkA1DymbkULNqa/Q++0i5z2Z
CLzzK86VNP8A3nwijUtEHvaK8iOc54+961Jb/hffBGWizjtnX5vfwzf0IfCd
lgMP0paGoZRULznRtzotTfmYtaPc0WZYi8FdZh7smDBxxlELI0AUMJZ/49gZ
Mpl7pv0+d66n1bU2nqzD5mJehnnSGIpTDNDhbQrKnvoiXMJ5aveVbJv+PXdD
iK+/oxtC74Ldbgi4ubfYLeaubggDFwx1Q+i9aLcbwu4Ff7/dEP661rpyw1e2
Q5hetVPpeKCNESjgccaOHH92kJdRV4QX1Q6HuSjZLpzsSoo7QYhFekSvAg3V
S73YS+AiQRrh8ZywE5qUjmW2w3l02D/OuCyNoJgGxgd66YgglafZ6Ff4z+14
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

-->

</rfc>

