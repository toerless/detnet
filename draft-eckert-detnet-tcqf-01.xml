<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-detnet-tcqf-01" category="std" consensus="true" submissionType="IETF" tocDepth="5" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="detnet-tcqf">Deterministic Networking (DetNet) Data Plane - Tagged Cyclic Queuing and Forwarding (TCQF) for bounded latency with low jitter in large scale DetNets</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization>University of Surrey ICS</organization>
      <address>
        <email>s.bryant@surrey.ac.uk</email>
      </address>
    </author>
    <author initials="A. G." surname="Malis" fullname="Andrew G. Malis">
      <organization>Malis Consulting</organization>
      <address>
        <email>agmalis@gmail.com</email>
      </address>
    </author>
    <author initials="G." surname="Li" fullname="Guangpeng Li">
      <organization>Huawei Network Technology Laboratory</organization>
      <address>
        <email>liguangpeng@huawei.com</email>
      </address>
    </author>

    <date year="2022" month="November" day="06"/>

    
    <workgroup>DETNET</workgroup>
    

    <abstract>


<t>This memo specifies a forwarding method for bounded latency for Deterministic Networks.
It uses cycle tagging of packets for cyclic queuing and forwarding with multiple buffers (TCQF).
This memo standardizes tagging via the MPLS packet Traffic Class (TC) field for MPLS links and the
IP/IPv6 DSCPfield for IP/IPv6 links. The short-hand for this mechanism is Tagged Cyclic Queuing and Forwarding (TCQF).</t>

<t>Target benefits of TCQF include low end-to-end
jitter, ease of high-speed hardware implementation, optional ability to support large number
of flow in large networks via DiffServ style aggregation by applying TCQF to
the DetNet aggregate instead of each DetNet flow individually, and support of wide-area DetNet
networks with arbitrary link latencies and latency variations.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction-informative"><name>Introduction (informative)</name>

<t>Cyclic Queuing and Forwarding (CQF), <xref target="IEEE802.1Qch"/>, is an IEEE standardized queuing mechanism in support of deterministic bounded latency. See also <xref target="I-D.ietf-detnet-bounded-latency"/>, Section 6.6.</t>

<t>CQF benefits for Deterministic QoS include the tightly bounded jitter it provides as well as the per-flow stateless operation, minimizing the complexity of high-speed hardware implementations and allowing to support on transit hops arbitrary number of DetNet flow in the forwarding plane because of the absence of per-hop, per-flow QoS processing. In the terms of the IETF QoS architecture, CQF can be called DiffServ QoS technology, operating only on a traffic aggregate.</t>

<t>CQFs is limited to only limited-scale wide-area network deployments because it cannot take the propagation latency of links into account, nor potential variations thereof. It also requires very high precision clock synchronization, which is uncommon in wide-area network equipment beyond mobile network fronthaul. See <xref target="I-D.eckert-detnet-bounded-latency-problems"/> for more details.</t>

<t>This specification introduces and utilizes an enhanced form of CQF where packets are tagged with cycle identifiers for a limited number of cycles (such as 3...7) and hop-by-hop forwarded through the use of per-cycle buffers. This multiple buffer forwarding overcome the distance and clock synchronization limitations of CQF. <xref target="I-D.qiang-DetNet-large-scale-DetNet"/> and <xref target="I-D.dang-queuing-with-multiple-cyclic-buffers"/> provide additional details about the background of TCQF. TCQF does not depend on other elements of <xref target="RFC8655"/>, so it can also be used in otherwise non-deterministic IP or MPLS networks to achieve bounded latency and low jitter.</t>

<t>TCQF is likely especially beneficial when networks are architected to avoid per-hop, per-flow state even for traffic steering, which is the case for networks using SR-MPLS <xref target="RFC8402"/> for traffic steering of MPLS unicast traffic, SRv6 <xref target="RFC8986"/> for traffic steeering of IPv6 unicast traffic and/or BIER-TE <xref target="I-D.ietf-bier-te-arch"/> for tree engineering of MPLS multicast traffic (using the TC and/or DSCP header fields of BIER packets according to <xref target="RFC8296"/>).</t>

<t>In these networks, it is specifically undesirable to require per-flow signaling to non-edge forwarders (such as P-LSR in MPLS networks) solely for DetNet QoS because such per-flow state is unnecessary for traffic steering and would only be required for the bounded latency QoS mechanism and require likely even more complex hardware and manageability support than what was previously required for per-hop steering state (such as in RSVP-TE, <xref target="RFC4875"/>). Note that the DetNet architecture <xref target="RFC8655"/> does not include full support for this DiffServ model, which is why this memo describes how to use TCQF with the DetNet architecture per-hop, per-flow processing as well as without it.</t>

</section>
<section anchor="using-tcqf-in-the-detnet-architecture-and-mpls-forwarding-plane-informative"><name>Using TCQF in the DetNet Architecture and MPLS forwarding plane (informative)</name>

<t>This section gives an overview of how the operations of TCQF relates
to the DetNet architecture. We first revisit QoS with DetNet in the absence of TCQF
using an MPLS network as an example.</t>

<figure title="A DetNet MPLS Network" anchor="FIG-DetNet-MPLS"><artwork><![CDATA[
 DetNet MPLS       Relay       Transit         Relay       DetNet MPLS
 End System        Node         Node           Node        End System
    T-PE1          S-PE1        LSR-P          S-PE2       T-PE2
 +----------+                                             +----------+
 |   Appl.  |<------------ End-to-End Service ----------->|   Appl.  |
 +----------+   +---------+                 +---------+   +----------+
 | Service  |<--| Service |-- DetNet flow --| Service |-->| Service  |
 +----------+   +---------+  +----------+   +---------+   +----------+
 |Forwarding|   |Fwd| |Fwd|  |Forwarding|   |Fwd| |Fwd|   |Forwarding|
 +-------.--+   +-.-+ +-.-+  +----.---.-+   +-.-+ +-.-+   +---.------+
         :  Link  :    /  ,-----.  \   : Link :    /  ,-----.  \
         +........+    +-[ Sub-  ]-+   +......+    +-[ Sub-  ]-+
                         [Network]                   [Network]
                          `-----'                     `-----'
         |<- LSP -->| |<-------- LSP -----------| |<--- LSP -->|
  
         |<----------------- DetNet MPLS --------------------->|
]]></artwork></figure>

<t>The above <xref target="FIG-DetNet-MPLS"/>, is copied from <xref target="RFC8964"/>, Figure 2, 
and only enhanced by numbering the nodes to be able to better refer
to them in the following text.</t>

<t>Assume a DetNet flow is sent from T-PE1 to T-PE2 across S-PE1, LSR, S-PE2. 
In general, bounded latency QoS processing is then required on the
outgoing interface of T-PE1 towards S-PE1, and any further outgoing
interface along the path. When T-PE1 and S-PE2 know that their next-hop
is a service LSR, their DetNet flow label stack may simply have the
DetNet flows Service Label (S-Label) as its Top of Stack (ToS) LSE,
explicitly indicating one DetNet flow.</t>

<t>On S-PE1, the next-hop LSR is
not DetNet aware, which is why S-PE1 would need to send a label stack
where the S-Label is followed by a Forwarding Label (F-Label), and
LSR-P would need to perform bounded latency based QoS on that F-Label.</t>

<t>For bounded latency QoS mechanisms relying on per-flow regulator state (aka:
per-flow packet scheduling), such as in <xref target="TSN-ATS"/>, this requires the use of a
per-detnet flow F-Labels across the network from S-PE1 to S-PE2. These could
for for example be assigned/managed through RSVP-TE <xref target="RFC3209"/>
enhanced as necessary with QoS parameters matching the underlying bounded
latency mechanism (such as <xref target="TSN-ATS"/>).</t>

<t>With TCQF, a sequence of LSR and DetNet service node implements
TCQF with MPLS TC, ideally from T-PE1 (ingress) to T-PE2 (egress).  The ingress
node needs to perform per-DetNet-flow per-packet "shaping"/"regulating" to  assign
each packet of a flow to a particular TCQF cycle. This is specified in <xref target="ingress"/>.</t>

<t>All LSR/Service nodes after the ingress node only have to map a
received TCQF tagged DetNet packet to the configured cycle
on the output interface, not requiring any per-DetNet-flow QoS state.
These LSR/Service nodes do therefore also not require per-flow
interactions with the controller plane for the purpose of bounded latency.</t>

<t>Per-flow state therefore is only required on nodes that are 
DetNet service nodes, or when explicit, per-DetNet flow steering
state is desired, instead of ingress steering through e.g.: SR-MPLS.</t>

<t>Operating TCQF per-flow stateless across a service node, such as S-PE1, S-PE2
in the picture is only one option. It is of course equally feasible to
Have one TCQF domain from T-PE1 to S-PE2, start a new TCQF domain there,
running for example up to S-PE2 and start another one to T-PE2.</t>

<t>A service node must act as an egress/ingress edge of a TCQF domain if it needs
to perform operations that do change the timing of packets other than
the type of latency that can be considered in configuration of TCQF (see <xref target="calculation"></xref>).</t>

<t>For example, if T-PE1 is ingress for a TCQF domain, and T-PE2 is the egress,
S-PE1 could perform the DetNet Packet Replication Function (PRF)  without having to be a TQCF 
edge node as long as it does not introduce latencies not included in the TCQF
setup and the controller plane reserves resources for the multitude of flows
created by the replication taking the allocation of resources in the TCQF cycles into account.</t>

<t>Likewise, S-PE2 could perform the Packet Elimination Function without being
a TCQF edge node as this most likely does not introduce any non-TCQF acceptable
latency - and the controller plane accordingly reserves only for one flow
the resources on the S-PE2-&gt;T-PE2 leg.</t>

<t>If on the other hand, S-PE2 was to perform the Packet Reordering Function (PRF), this could
create large peaks of packets when out-of-order packets are released together.
A PRF would either have to take care of shaping out those bursts for the traffic
of a flow to again conform to the admitted CIR/PIR, or else the service node
would have to be a TCQF egress/ingress, performing that shaping itself as an
ingress function.</t>

</section>
<section anchor="forwarding"><name>TCQF per-flow stateless forwarding (normative)</name>

<section anchor="model"><name>Configuration Data model and tag processing for MPLS TC tags</name>

<t>The following data model summarizes the configuration parameters
as required for TCQF and discussed in further sections. 'tcqf' 
includes the parameters independent of the tagging on an interface.
'tcqf_*' describes the parameters for interfaces using MPLS TC and
IP DSCP tagging.</t>

<figure title="TCQF Configuration Data Model" anchor="FIG-Data-Model"><artwork><![CDATA[
# Encapsulation agnostic data
tcqf 
+-- uint16 cycles
+-- uint16 cycle_time
+-- uint32 cycle_clock_offset
+-- if_config[oif] # Outgoing InterFace
    +-- uint32 cycle_clock_offset
    +-- cycle_map[iif] # Incoming InterFace
        +--uint8 oif_cycle[iif_cycle]
 
# MPLS TC tagging specific data
tcqf_tc[oif]
+--uint8 tc[oif_cycle]

# IP/IPv6 DSCP tagging specific data
tcqf_dscp[oif]
+--uint8 dscp[oif_cycle]
]]></artwork></figure>

</section>
<section anchor="packet-processing"><name>Packet processing</name>

<t>This section explains the TCQF packet processing and through
it, introduces the semantic of the objects in <xref target="FIG-Data-Model"/></t>

<t>tcqf contains the router wide configuration of TCQF parameters,
independent of the specific tagging mechanism on any interface. Any
interface can have a different tagging method. This document uses the term
router when it is irrelevant whether forwarding is for IP or MPLS packet,
and the term Label Switched Router (LSR) to indicate MPLS is used, or IP
router to indicate IP or IPv6 are used.</t>

<t>The model represents a single TQCF domain, which is a set of
interfaces acting both as ingress (iif) and egress (oif)
interfaces, capable to forward TCQF packets amongst each other. A router
may have multiple TCQF domains each with a set of interfaces disjoint
from those of any other TCQF domain.</t>

<t>tcqf.cycles is the number of cycles used across all interfaces in the TCQF domain.
routers MUST support 3 and 4 cycles. To support interfaces with MPLS TC tagging,
7 or less cycles MUST be used across all interfaces in the CQF domain.</t>

<t>The unit of tcqf.cycle_time is micro-seconds.
routers MUST support configuration of cycle-times of 20,50,100,200,500,1000,2000 usec.</t>

<t>Cycles start at an offset of tcqf.cycle_clock_offset in units of nsec as follows. 
Let clock1 be a timestamp of the local reference clock for TCQF, at which
cycle 1 starts, then:</t>

<t>tcqf.cycle_clock_offset = (clock1 mod (tcqf.cycle_time * tcqf.cycles) )</t>

<t>The local reference clock of the LSR/router is expected to be synchronized with
the neighboring LSR/router in TCQF domain.  tcqf.cycle_clock_offset can be configurable
by the operator, or it can be read-only. In either case will the operator be
able to configure working TCQF forwarding through appropriately calculated
cycle mapping.</t>

<t>tcqf.if_config[oif] is optional per-interface configuration of TCQF parameters.
tcqf.if_config[oif].cycle_clock_offset may be different from tcqf.cycle_clock_offset,
for example, when interfaces are on line cards with independently synchronized clocks,
or when non-uniform ingress-to-egress propagation latency over a complex router/LSR
fabric makes it beneficial to allow per-egress interface or line card configuration
of cycle_clock_offset. It may be configurable or read-only.</t>

<t>The value of -1 for tcqf.if_config[oif].cycle_clock_offset is used to indicate
that the domain wide tcqf.cycle_clock_offset is to be used for oif.
This is the only permitted negative number for this parameter.</t>

<t>When a packet is received from iif with a cycle value of iif_cycle and the
packet is routed towards oif, then the cycle value (and buffer) to use on
oif is tcqf.if_config[oif].cycle_map[iif].oif_cycle[iif_cycle]. This is
called the cycle mapping and is must be configurable. This cycle mapping
always happens when the packet is received with a cycle tag on an interface
in a TCQF domain and forwarded to another interface in the same TCQF domain.</t>

<t>tcqf_tc[oif].tc[oif_cycle] defines how to map from the internal cycle number
oif_cycle to an MPLS TC value on interface oif. tcqf_tc[oif] MUST be
configured, when oif uses MPLS. This oif_cycle &lt;=&gt; tc mapping is not only
 used to map from internal cycle number to MPLS TC tag when sending
packets, but also to map from MPLS TC tag to the internal cycle number when
receiving packets. Likewise, tcqf_dscp[oif] MUST be configured, when oif uses
IP/IPv6.</t>

<t>This data model does not determine whether interfaces use MPLS or IP/IPv6
encapsulation. This is determined by the setup of the DetNet domain. A mixed
use of MPLS and IP/IPv6 interfaces is possible with this data model, but
at the time of writing this document not supported by DetNet.</t>

</section>
<section anchor="tcqf-with-mpls-label-stack-operations"><name>TCQF with MPLS label stack operations</name>

<t>In the terminology of <xref target="RFC3270"/>, TCQF QoS as defined here, is 
TC-Inferred-PSC LSP (E-LSP) behavior: Packets are determined to
belong to the TCQF PSC solely based on the TC of the received
packet.</t>

<t>The internal cycle number SHOULD be assigned from the Top of Stack (ToS)
MPLS label TC bits before any other label stack operations
happens. On the egress side, the TC value of the ToS MPLS label
SHOULD be assigned from the internal cycle number after any label
stack processing.</t>

<t>With this order of processing, TCQF can support forwarding of
packets with any label stack operations such as label swap in the
case of LDP or RSVP-TE created LSP, Penultimate Hop Popping (PHP),
or no label changes from SID hop-by-hop forwarding and/or SID/label
pop as in the case of SR-MPLS traffic steering.</t>

</section>
<section anchor="tcqf-with-ip-operations"><name>TCQF with IP operations</name>

<t>As how DetNet domains are currently assumed to be single administrative network
operator domains, this document does not ask for standardization
of the DSCP to use with TCQF. Instead, deployments wanting to use TCQF with
IP/IPv6 encapsulation need to assign within their domain DSCP from the
xxxx11 "EXP/LU" Codepoint space according to <xref target="RFC2474"/>, Section 6. This
allows up to 16 DSCP for intradomain use.</t>

</section>
<section anchor="tcqf-pseudocode-normative"><name>TCQF Pseudocode (normative)</name>

<t>The following pseudocode restates the forwarding behavior of <xref target="forwarding"/>
in an algorithmic fashion as pseudocode. It uses the objects of the TCQF configuration
data model defined in <xref target="model"></xref>.</t>

<figure title="TCQF Pseudocode" anchor="FIG-Pseudocode"><artwork><![CDATA[
void receive(pak) {
  // Receive side TCQF - retrieve cycle of received packet
  // from packet internal header
  iif = pak.context.iif
  if (tcqf.if_config[iif]) { // TCQF enabled on iif
    if (tcqf_tc[iif]) {      // MPLS TCQF enabled on iif
      tc = pak.mpls_header.lse[tos].tc
      pak.context.tcqf_cycle = map_tc2cycle( tc, tcqf_tc[iif])
    } else
    if (tcqf_dscp[iif]) {      // IP TCQF enabled on iif
      dscp = pak.ip_header.dscp
      pak.context.tcqf_cycle = map_dscp2cycle( dscp, tcqf_dscp[iif])
    } else // ... other encaps
  }
  forward(pak);
}

// ... Forwarding including any label stack operations

void forward(pak) {
  oif = pak.context.oif = forward_process(pak)

  if(ingres_flow_enqueue(pak))
    return // ingress packets are only enqueued here.

  if(pak.context.tcqf_cycle) // non TCQF packets cycle is 0
    if(tcqf.if_config[oif]) {    // TCQF enabled on OIF
      // Map tcqf_cycle iif to oif - encap agnostic
      cycle = pak.context.tcqf_cycle
            = map_cycle(cycle,
              tcqf.if_config[oif].cycle_map[[iif])
  
      // MPLS TC-TCQF
      if(tcqf.tc[oif]) {
        pak.mpls_header.lse[tos].tc = map_cycle2tc(cycle, tcqf_tc[oif])
      } else
      // IP TCQF enabled on iif
      if (tcqf_dscp[oif]) {
        pak.ip_header.dscp = map_cycle2dscp(cycle, tcqf_dscp[oif])
      } // else...  other future encap/tagging options for TCQF
  
      tcqf_enqueue(pak, oif.cycleq[cycle])
      return
    } else {
      // Forwarding of egress TCQF packets [1]
    }
  }
  // ... non TCQF OIF forwarding [2]
}

// Started when TCQF is enabled on an interface
// dequeues packets from oif.cycleq
// independent of encapsulation
void send_tcqf(oif) {
  cycle = 1
  cc =  tcqf.cycle_time *
        tcqf.cycle_time
  o =   tcqf.cycle_clock_offset
  nextcyclestart = floor(tnow / cc) * cc + cc + o

  while(1) {
    ingres_flow_2_tcqf(oif,cycle)
    while(tnow < nextcyclestart) { }
    while(pak = dequeue(oif.cycleq(cycle)) {
      send(pak)
    } 
    cycle = (cycle + 1) mod tcqf.cycles + 1
    nextcyclestart += tcqf.cycle_time
  }
}
]]></artwork></figure>

<t>Processing of ingress TCQF packets is performed
via ingres_flow_enqueue(pak) and
ingres_flow_2_tcqf(oif,cycle) as explained in <xref target="ingres_pseudocode"/>.</t>

<t>Processing of egres TCQF packet is out-of-scope. 
It can performed by any non-TCQF packet forwarding mechanism such as
some strict priority queuing in [2], and packets could accordingly be
marked with an according packet header traffic class indicator for
such a traffic class in [1].</t>

</section>
</section>
<section anchor="ingress"><name>TCQF Per-flow Ingress forwarding (normative)</name>

<t>Ingress flows in the context of this text
are packets of flows that enter the router from a non-TCQF interface
and need to be forwarded to an interface with TCQF.</t>

<t>In the most simple case, these packets are sent by the
source and the router is the first-hop router.
In another case, the routers ingress interface
connects to a hop where the previous router(s) did
perform a different bounded latency forwarding mechanism
than TCQF.</t>

<section anchor="ingress-flows-configuration-data-model"><name>Ingress Flows Configuration Data Model</name>

<figure title="TCQF Ingress Configuration Data Model" anchor="FIG-IData-Model"><artwork><![CDATA[
# Extends above defined tcqf
tcqf
...
| Ingress Flows, see below (TBD:
+-- iflow[flowid]
    +-- uint32 csize # in bits
]]></artwork></figure>

<t>The data model shown in <xref target="FIG-IData-Model"/> expands the tcqf data
model  from <xref target="FIG-Data-Model"/>. For every DetNet flow for which
this router is the TCQF ingress, the controller plane has to specify a maximum 
number of bits called csize (cycle size) that are permitted to 
go into each individual cycle.</t>

<t>Note, that iflow[flowid].csize is not specific to the sending
interface because it is a property of the DetNet flow.</t>

</section>
<section anchor="ingres_pseudocode"><name>Ingress Flows Pseudocode</name>

<t>When a TCQF ingress is received, it first has to be enqueued into a
per-flow queue. This is necessary because the permitted
burst size for the flow may be larger than what can fit
into a single cycle, or even into the number of cycles
used in the network.</t>

<figure title="TCQF Ingress Enqueue Pseudocode" anchor="FIG-Ingress-enqueue"><artwork><![CDATA[
bool ingres_flow_enqueue(pak) {
  if(!pak.context.tcqf_cycle &&
      flowid = match_detnetflow(pak)) {
    police(pak) // according to RFC9016 5.5
    enqueue(pak, flowq[oif][flowid])
    return true
  }
  return false
}
]]></artwork></figure>

<t>ingres_flow_enqueue(pak) as shown in <xref target="FIG-Ingress-enqueue"/>
performs this enqueuing of the packet. Its position
in the DetNet/TCQF forwarding code is shown in 
<xref target="FIG-Pseudocode"/>.</t>

<t>police(pak): If the router is not only the TCQF ingress router, but also
the first-hop router from the source, ingres_flow_enqueue(pak)
will also be the place where policing of the flows packet
according to the Traffic Specification of the flow would happen -
to ensure that packets violating the Traffic Specification
will not be forwarded, or be forwarded with lower priority
(e.g.: as best effort). This policing and resulting forwarding
action is not specific to TCQF and therefore out of scope for
this text. See <xref target="RFC9016"/>, section 5.5.</t>

<figure title="TCQF Ingress Pseudocode" anchor="FIG-Ingress-2-TCQF"><artwork><![CDATA[
void ingres_flow_2_tcqf(oif, cycle) {
  foreach flowid in flowq[oif][*] {
    free = tcqf.iflow[flowid].csize
    q = flowq[oif][flowid]
    while(notempty(q) &&
          (l = head(q).size) <= free) {
      pak = dequeue(q)
      free -= l
      tcqf_enqueue(pak, oif.cycleq[cycle])
    }
  }
}
]]></artwork></figure>

<t>ingres_flow_2_tcqf(oif, cycle) as shown in
<xref target="FIG-Ingress-2-TCQF"/> transfers ingress DetNet flow
packets from their per-flow queue into the queue of the cycle
that will be sent next. The position of ingres_flow_2_tcqf() 
in the DetNet/TCQF forwarding code is shown in <xref target="FIG-Pseudocode"/>.</t>

</section>
</section>
<section anchor="implementation-deployment-operations-and-validation-considerations-informative"><name>Implementation, Deployment, Operations and Validation considerations (informative)</name>

<section anchor="high-speed-implementation"><name>High-Speed Implementation</name>

<t>High-speed implementations with programmable forwarding planes of TCQF
packet forwarding require Time-Gated Queues for the cycle queues,
such as introduced by <xref target="IEEE802.1Qbv"/> and also employed in CQF <xref target="IEEE802.1Qch"/>.</t>

<t>Compared to CQF, the accuracy of clock synchronization across the nodes
is reduced as explained in <xref target="calculation"/> below.</t>

<t>High-speed forwarding for ingress packets as specified in <xref target="ingress"/>
above would require to pass packets first into a per-flow queue and
then re-queue them into a cycle queue. This is not ideal for
high speed implementations.  The pseudocode for ingres_flow_enqueue()
and ingres_flow_2_tcqf(), like the rest of the pseudocode in this
document is only meant to serve as the most compact and hopefully
most easy to read specification of the desired externally observable
behavior of TCQF - but not as a guidance for implementation, especially not
for high-speed forwarding planes.</t>

<t>High-speed forward could be implemented with single-enqueueing into
cycle queues as follows:</t>

<t>Let B[f] be the maximum amount of data that the router would need to
buffer for ingress flow f at any point in time. This can be calculated
from the flows Traffic Specification. For example, when using the
parameters of <xref target="RFC9016"/>, section 5.5.</t>

<figure><artwork><![CDATA[
B[f] <= MaxPacketsPerInterval*MaxPayloadSize*8

maxcycles = max( ceil( B[f] / tcqf.iflow[f].csize) | f)
]]></artwork></figure>

<t>Maxcycles is the maximum number of cycles required so that packets
from all ingress flows can be directly enqueued into maxcycles queues.
The router would then not cycle across tcqf.cycles number of queues,
but across maxcycles number of queues, but still cycling across tcqf.cycles
number of cycle tags.</t>

<t>Calculation of B[f] and in result maxcycles may further be refined (lowered)
by additionally known constraints such as the bitrates of the ingress interface(s)
and TCQF output interface(s).</t>

</section>
<section anchor="calculation"><name>Controller plane computation of cycle mappings</name>

<t>The cycle mapping is computed by the controller plane by taking at minimum
the link, interface serialization and node internal forwarding latencies as well
as the cycle_clock_offsets into account.</t>

<figure title="Calculation reference" anchor="Calc1"><artwork><![CDATA[
Router  . O1
 R1     . | cycle 1 | cycle 2 | cycle 3 | cycle 1 |
        .    .
        .     ............... Delay D
        .                    .
        .                    O1'
        .                     | cycle 1 |
Router  .   | cycle 1 | cycle 2 | cycle 3 | cycle 1 |
  R2    .   O2

CT  = cycle_time
C   = cycles
CC  = CT * C
O1  = cycle_clock_offset router R1, interface towards R2
O2  = cycle_clock_offset router R2, output interface of interest
O1' = O1 + D
]]></artwork></figure>

<t>Consider in <xref target="Calc1"/> that Router R1 sends packets via C = 3 cycles with a
cycle_clock offset of O1 towards Router R2. These packets arrive
at R2 with a cycle_clock offset of O1' which includes through D all latencies
incurred between releasing a packet on R1 from the cycle buffer until
it can be put into a cycle buffer on R2: serialization delay on R1,
link delay, non_CQF delays in R1 and R2, especially forwarding in
R2, potentially across an internal fabric to the output interface
with the sending cycle buffers.</t>

<figure title="Calculating cycle mapping" anchor="Calc2"><artwork><![CDATA[
A = ( ceil( ( O1' - O2 ) / CT) + C + 1) mod CC
map(i) = (i - 1 + A) mod C + 1
]]></artwork></figure>

<t><xref target="Calc2"/> shows a formula to calculate the cycle mapping between
R1 and R2, using the first available cycle on R2. In the example
of <xref target="Calc1"/> with CT = 1, (O1' - O2) =~ 1.8, A will be 0, resulting
in map(1) to be 1, map(2) to be 2 and map(3) to be 3.</t>

<t>The offset "C" for the calculation of A is included so that
a negative (O1 - O2) will still lead to a positive A.</t>

<t>In general, D will be variable [Dmin...Dmax], for example because
of differences in serialization latency between min and max size
packets, variable link latency because of temperature based length
variations, link-layer variability (radio links) or in-router
processing variability. In addition, D also needs to account for the
drift between the synchronized clocks for R1 and R2. This
is called the Maximum Time Interval Error (MTIE).</t>

<t>Let A(d) be A where O1' is calculated with D = d. To account for
the variability of latency and clock synchronization, map(i) has to
be calculated with A(Dmax), and the controller plane needs to
ensure that that A(Dmin)...A(Dmax) does cover at most (C - 1) cycles.</t>

<t>If it does cover C cycles, then C and/or CT are chosen too small,
and the controller plane needs to use larger numbers for either.</t>

<t>This (C - 1) limitation is based on the understanding that there is only
one buffer for each cycle, so a cycle cannot receive packets
when it is sending packets. While this could be changed by
using double buffers, this would create additional implementation
complexity and not solve the limitation for all cases, because
the number of cycles to cover [Dmin...Dmax] could also be (C + 1)
or larger, in which case a tag of 1...C would not suffice.</t>

</section>
<section anchor="link-speed-and-bandwidth-sharing"><name>Link speed and bandwidth sharing</name>

<t>TCQF hops along a path do not need to have the same bitrate, they
just need to use the same cycle time. The controller plane has to then
be able to take the TCQF capacity of each hop into account when
admitting flows based on their Traffic Specification and TCQF csize.</t>

<t>TCQF does not require to be allocated 100% of the
link bitrate. When TCQF has to share a link with other traffic
classes, queuing just has to be set up to ensure that all
data of a TCQF cycle buffer can be sent within the TCQF
cycle time. For example by making the TCQF cycle queues the
highest priority queues and then limiting their capacity through
admission control to leave time for other queues to be served
as well.</t>

</section>
<section anchor="validation"><name>Validation</name>

<t><xref target="LDN"/> describes an experimental validation of TCQF with high-speed forwarding
hardware and provides further details on the mathematical models.</t>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>TBD.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document has no IANA considerations.</t>

</section>
<section anchor="changelog"><name>Changelog</name>

<t>[RFC-editor: please remove]</t>

<t>Initial draft name: draft-eckert-detnet-mpls-tc-tcqf</t>

<t>00</t>

<t>Initial version</t>

<t>01</t>

<t>Added new co-author.</t>

<t>Changed Data Model to "Configuration Data Model",</t>

<t>and changed syntax from YANG tree to a non-YANG tree, removed empty section
targeted for YANG model. Reason: the configuration parameters that we need
to specify the forwarding behavior is only a subset of what likely would
be a good YANG model, and any work to define such a YANG model not necessary
to specify the algorithm would be scope creep for this specification. Better
done in a separate YANG document. 
Example additional YANG aspects for such a document are
how to map parameters to configuration/operational space, what additional
operational/monitoring parameter to support and how to map the
YANG objects required into various pre-existing YANG trees.</t>

<t>Improved text in forwarding section, simplified sentences, used simplified
configuration data model.</t>

<t>02</t>

<t>Refresh</t>

<t>03</t>

<t>Added ingress processing, and further implementation considerations.</t>

<t>New draft name: draft-eckert-detnet-tcqf</t>

<t>00</t>

<t>Added text for DSCP based tagging of IP/IPv6 packets, therefore changing the
original, MPLS-only centric scope of the document, necessitating a change
in name and title.</t>

<t>This was triggered by the observation of David Black at the IETF114 DetNet
meeting that with DetNet domains being single administrative domains, it
is not necessary to have standardized (cross administrative domain) DSCP
for the tagging of IP/IP6 packets for TCQF. Instead it is sufficient
to use EXP/LU DSCP code space and assignment of these is a local matter
of a domain as is that of TC values when MPLS is used. Standardized DSCP
in the other hand would have required likely work/oversight by TSVWG.</t>

<t>In any case, the authors feel that with this insight, there is no need to
constrain single-domain definition of TCQF to only MPLS, but instead both
MPLS and IP/IPv6 tagging can be easily specified in this one draft.</t>

<t>01</t>

<t>Added new co-author.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2474' target='https://www.rfc-editor.org/info/rfc2474'>
<front>
<title>Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
<author fullname='K. Nichols' initials='K.' surname='Nichols'><organization/></author>
<author fullname='S. Blake' initials='S.' surname='Blake'><organization/></author>
<author fullname='F. Baker' initials='F.' surname='Baker'><organization/></author>
<author fullname='D. Black' initials='D.' surname='Black'><organization/></author>
<date month='December' year='1998'/>
<abstract><t>This document defines the IP header field, called the DS (for differentiated services) field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2474'/>
<seriesInfo name='DOI' value='10.17487/RFC2474'/>
</reference>



<reference anchor='RFC3270' target='https://www.rfc-editor.org/info/rfc3270'>
<front>
<title>Multi-Protocol Label Switching (MPLS) Support of Differentiated Services</title>
<author fullname='F. Le Faucheur' initials='F.' surname='Le Faucheur'><organization/></author>
<author fullname='L. Wu' initials='L.' surname='Wu'><organization/></author>
<author fullname='B. Davie' initials='B.' surname='Davie'><organization/></author>
<author fullname='S. Davari' initials='S.' surname='Davari'><organization/></author>
<author fullname='P. Vaananen' initials='P.' surname='Vaananen'><organization/></author>
<author fullname='R. Krishnan' initials='R.' surname='Krishnan'><organization/></author>
<author fullname='P. Cheval' initials='P.' surname='Cheval'><organization/></author>
<author fullname='J. Heinanen' initials='J.' surname='Heinanen'><organization/></author>
<date month='May' year='2002'/>
<abstract><t>This document defines a flexible solution for support of Differentiated Services (Diff-Serv) over Multi-Protocol Label Switching (MPLS) networks.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3270'/>
<seriesInfo name='DOI' value='10.17487/RFC3270'/>
</reference>



<reference anchor='RFC8655' target='https://www.rfc-editor.org/info/rfc8655'>
<front>
<title>Deterministic Networking Architecture</title>
<author fullname='N. Finn' initials='N.' surname='Finn'><organization/></author>
<author fullname='P. Thubert' initials='P.' surname='Thubert'><organization/></author>
<author fullname='B. Varga' initials='B.' surname='Varga'><organization/></author>
<author fullname='J. Farkas' initials='J.' surname='Farkas'><organization/></author>
<date month='October' year='2019'/>
<abstract><t>This document provides the overall architecture for Deterministic Networking (DetNet), which provides a capability to carry specified unicast or multicast data flows for real-time applications with extremely low data loss rates and bounded latency within a network domain.  Techniques used include 1) reserving data-plane resources for individual (or aggregated) DetNet flows in some or all of the intermediate nodes along the path of the flow, 2) providing explicit routes for DetNet flows that do not immediately change with the network topology, and 3) distributing data from DetNet flow packets over time and/or space to ensure delivery of each packet's data in spite of the loss of a path.  DetNet operates at the IP layer and delivers service over lower-layer technologies such as MPLS and Time- Sensitive Networking (TSN) as defined by IEEE 802.1.</t></abstract>
</front>
<seriesInfo name='RFC' value='8655'/>
<seriesInfo name='DOI' value='10.17487/RFC8655'/>
</reference>



<reference anchor='RFC8964' target='https://www.rfc-editor.org/info/rfc8964'>
<front>
<title>Deterministic Networking (DetNet) Data Plane: MPLS</title>
<author fullname='B. Varga' initials='B.' role='editor' surname='Varga'><organization/></author>
<author fullname='J. Farkas' initials='J.' surname='Farkas'><organization/></author>
<author fullname='L. Berger' initials='L.' surname='Berger'><organization/></author>
<author fullname='A. Malis' initials='A.' surname='Malis'><organization/></author>
<author fullname='S. Bryant' initials='S.' surname='Bryant'><organization/></author>
<author fullname='J. Korhonen' initials='J.' surname='Korhonen'><organization/></author>
<date month='January' year='2021'/>
<abstract><t>This document specifies the Deterministic Networking (DetNet) data plane when operating over an MPLS Packet Switched Network.  It leverages existing pseudowire (PW) encapsulations and MPLS Traffic Engineering (MPLS-TE) encapsulations and mechanisms.  This document builds on the DetNet architecture and data plane framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='8964'/>
<seriesInfo name='DOI' value='10.17487/RFC8964'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC3209' target='https://www.rfc-editor.org/info/rfc3209'>
<front>
<title>RSVP-TE: Extensions to RSVP for LSP Tunnels</title>
<author fullname='D. Awduche' initials='D.' surname='Awduche'><organization/></author>
<author fullname='L. Berger' initials='L.' surname='Berger'><organization/></author>
<author fullname='D. Gan' initials='D.' surname='Gan'><organization/></author>
<author fullname='T. Li' initials='T.' surname='Li'><organization/></author>
<author fullname='V. Srinivasan' initials='V.' surname='Srinivasan'><organization/></author>
<author fullname='G. Swallow' initials='G.' surname='Swallow'><organization/></author>
<date month='December' year='2001'/>
<abstract><t>This document describes the use of RSVP (Resource Reservation Protocol), including all the necessary extensions, to establish label-switched paths (LSPs) in MPLS (Multi-Protocol Label Switching).  Since the flow along an LSP is completely identified by the label applied at the ingress node of the path, these paths may be treated as tunnels.  A key application of LSP tunnels is traffic engineering with MPLS as specified in RFC 2702.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3209'/>
<seriesInfo name='DOI' value='10.17487/RFC3209'/>
</reference>



<reference anchor='RFC4875' target='https://www.rfc-editor.org/info/rfc4875'>
<front>
<title>Extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for Point-to-Multipoint TE Label Switched Paths (LSPs)</title>
<author fullname='R. Aggarwal' initials='R.' role='editor' surname='Aggarwal'><organization/></author>
<author fullname='D. Papadimitriou' initials='D.' role='editor' surname='Papadimitriou'><organization/></author>
<author fullname='S. Yasukawa' initials='S.' role='editor' surname='Yasukawa'><organization/></author>
<date month='May' year='2007'/>
<abstract><t>This document describes extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for the set up of Traffic Engineered (TE) point-to-multipoint (P2MP) Label Switched Paths (LSPs) in Multi- Protocol Label Switching (MPLS) and Generalized MPLS (GMPLS) networks.  The solution relies on RSVP-TE without requiring a multicast routing protocol in the Service Provider core.  Protocol elements and procedures for this solution are described.</t><t>There can be various applications for P2MP TE LSPs such as IP multicast.  Specification of how such applications will use a P2MP TE LSP is outside the scope of this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4875'/>
<seriesInfo name='DOI' value='10.17487/RFC4875'/>
</reference>



<reference anchor='RFC8296' target='https://www.rfc-editor.org/info/rfc8296'>
<front>
<title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='J. Tantsura' initials='J.' surname='Tantsura'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<author fullname='I. Meilik' initials='I.' surname='Meilik'><organization/></author>
<date month='January' year='2018'/>
<abstract><t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a &quot;multicast domain&quot;, without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol.  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The details of the encapsulation depend on the type of network used to realize the multicast domain.  This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t></abstract>
</front>
<seriesInfo name='RFC' value='8296'/>
<seriesInfo name='DOI' value='10.17487/RFC8296'/>
</reference>



<reference anchor='RFC8402' target='https://www.rfc-editor.org/info/rfc8402'>
<front>
<title>Segment Routing Architecture</title>
<author fullname='C. Filsfils' initials='C.' role='editor' surname='Filsfils'><organization/></author>
<author fullname='S. Previdi' initials='S.' role='editor' surname='Previdi'><organization/></author>
<author fullname='L. Ginsberg' initials='L.' surname='Ginsberg'><organization/></author>
<author fullname='B. Decraene' initials='B.' surname='Decraene'><organization/></author>
<author fullname='S. Litkowski' initials='S.' surname='Litkowski'><organization/></author>
<author fullname='R. Shakir' initials='R.' surname='Shakir'><organization/></author>
<date month='July' year='2018'/>
<abstract><t>Segment Routing (SR) leverages the source routing paradigm.  A node steers a packet through an ordered list of instructions, called &quot;segments&quot;.  A segment can represent any instruction, topological or service based.  A segment can have a semantic local to an SR node or global within an SR domain.  SR provides a mechanism that allows a flow to be restricted to a specific topological path, while maintaining per-flow state only at the ingress node(s) to the SR domain.</t><t>SR can be directly applied to the MPLS architecture with no change to the forwarding plane.  A segment is encoded as an MPLS label.  An ordered list of segments is encoded as a stack of labels.  The segment to process is on the top of the stack.  Upon completion of a segment, the related label is popped from the stack.</t><t>SR can be applied to the IPv6 architecture, with a new type of routing header.  A segment is encoded as an IPv6 address.  An ordered list of segments is encoded as an ordered list of IPv6 addresses in the routing header.  The active segment is indicated by the Destination Address (DA) of the packet.  The next active segment is indicated by a pointer in the new routing header.</t></abstract>
</front>
<seriesInfo name='RFC' value='8402'/>
<seriesInfo name='DOI' value='10.17487/RFC8402'/>
</reference>



<reference anchor='RFC8986' target='https://www.rfc-editor.org/info/rfc8986'>
<front>
<title>Segment Routing over IPv6 (SRv6) Network Programming</title>
<author fullname='C. Filsfils' initials='C.' role='editor' surname='Filsfils'><organization/></author>
<author fullname='P. Camarillo' initials='P.' role='editor' surname='Camarillo'><organization/></author>
<author fullname='J. Leddy' initials='J.' surname='Leddy'><organization/></author>
<author fullname='D. Voyer' initials='D.' surname='Voyer'><organization/></author>
<author fullname='S. Matsushima' initials='S.' surname='Matsushima'><organization/></author>
<author fullname='Z. Li' initials='Z.' surname='Li'><organization/></author>
<date month='February' year='2021'/>
<abstract><t>The Segment Routing over IPv6 (SRv6) Network Programming framework enables a network operator or an application to specify a packet processing program by encoding a sequence of instructions in the IPv6 packet header.</t><t>Each instruction is implemented on one or several nodes in the network and identified by an SRv6 Segment Identifier in the packet.</t><t>This document defines the SRv6 Network Programming concept and specifies the base set of SRv6 behaviors that enables the creation of interoperable overlays with underlay optimization.</t></abstract>
</front>
<seriesInfo name='RFC' value='8986'/>
<seriesInfo name='DOI' value='10.17487/RFC8986'/>
</reference>



<reference anchor='RFC9016' target='https://www.rfc-editor.org/info/rfc9016'>
<front>
<title>Flow and Service Information Model for Deterministic Networking (DetNet)</title>
<author fullname='B. Varga' initials='B.' surname='Varga'><organization/></author>
<author fullname='J. Farkas' initials='J.' surname='Farkas'><organization/></author>
<author fullname='R. Cummings' initials='R.' surname='Cummings'><organization/></author>
<author fullname='Y. Jiang' initials='Y.' surname='Jiang'><organization/></author>
<author fullname='D. Fedyk' initials='D.' surname='Fedyk'><organization/></author>
<date month='March' year='2021'/>
<abstract><t>This document describes the flow and service information model for Deterministic Networking (DetNet). These models are defined for IP and MPLS DetNet data planes.</t></abstract>
</front>
<seriesInfo name='RFC' value='9016'/>
<seriesInfo name='DOI' value='10.17487/RFC9016'/>
</reference>


<reference anchor='I-D.ietf-bier-te-arch'>
   <front>
      <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Michael Menth' initials='M.' surname='Menth'>
         <organization>University of Tuebingen</organization>
      </author>
      <author fullname='Gregory Cauchie' initials='G.' surname='Cauchie'>
         <organization>KOEVOO</organization>
      </author>
      <date day='25' month='April' year='2022'/>
      <abstract>
	 <t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for &quot;Bit Index Explicit Replication&quot; (BIER) packets (RFC 8279); it is called &quot;Tree Engineering for Bit Index Explicit Replication&quot; (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.

 BIER-TE introduces a new semantic for &quot;bit positions&quot; (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFERs). A BIER-TE &quot;packets BitString&quot; therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER &quot;subdomains&quot; (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the &quot;Interior Gateway Protocol&quot; (IGP).
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-bier-te-arch-13'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-bier-te-arch-13.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-detnet-bounded-latency'>
   <front>
      <title>DetNet Bounded Latency</title>
      <author fullname='Norman Finn' initials='N.' surname='Finn'>
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname='Jean-Yves Le Boudec' initials='J.' surname='Le Boudec'>
         <organization>EPFL</organization>
      </author>
      <author fullname='Ehsan Mohammadpour' initials='E.' surname='Mohammadpour'>
         <organization>EPFL</organization>
      </author>
      <author fullname='Jiayi Zhang' initials='J.' surname='Zhang'>
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname='Balazs Varga' initials='B.' surname='Varga'>
         <organization>Ericsson</organization>
      </author>
      <date day='8' month='April' year='2022'/>
      <abstract>
	 <t>   This document presents a timing model for sources, destinations, and
   DetNet transit nodes.  Using the model, it provides a methodology to
   compute end-to-end latency and backlog bounds for various queuing
   methods.  The methodology can be used by the management and control
   planes and by resource reservation algorithms to provide bounded
   latency and zero congestion loss for the DetNet service.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-detnet-bounded-latency-10'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-detnet-bounded-latency-10.txt' type='TXT'/>
</reference>


<reference anchor='I-D.eckert-detnet-bounded-latency-problems'>
   <front>
      <title>Problems with existing DetNet bounded latency queuing mechanisms</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname='Stewart Bryant' initials='S.' surname='Bryant'>
         <organization>Stewart Bryant Ltd</organization>
      </author>
      <date day='12' month='July' year='2021'/>
      <abstract>
	 <t>   The purpose of this memo is to explain the challenges and limitations
   of existing (standardized) bounded latency queuing mechanisms for
   desirable (large scale) MPLS and/or IP based networks to allow them
   to support DetNet services.  These challenges relate to low-cost,
   high-speed hardware implementations, desirable network design
   approaches, system complexity, reliability, scalability, cost of
   signaling, performance and jitter experience for the DetNet
   applications.  Many of these problems are rooted in the use of per-
   hop, per-flow (DetNet) forwarding and queuing state, but highly
   accurate network wide time synchronization can be another challenge
   for some networks.

   This memo does not intend to propose a specific queuing solution, but
   in the same way in which it describes the challenges of mechanisms,
   it reviews how those problem are addressed by currently proposed new
   queuing mechanisms.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-eckert-detnet-bounded-latency-problems-00'/>
   <format target='https://www.ietf.org/archive/id/draft-eckert-detnet-bounded-latency-problems-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.qiang-DetNet-large-scale-DetNet'>
   <front>
      <title>Large-Scale Deterministic IP Network</title>
      <author fullname='Li Qiang' initials='L.' surname='Qiang'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Xuesong Geng' initials='X.' surname='Geng'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Bingyang Liu' initials='B.' surname='Liu'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Liang Geng' initials='L.' surname='Geng'>
         <organization>China Mobile</organization>
      </author>
      <author fullname='Guangpeng Li' initials='G.' surname='Li'>
         </author>
      <date day='2' month='September' year='2019'/>
      <abstract>
	 <t>   This document presents the overall framework and key method for
   Large-scale Deterministic Network (LDN).  LDN can provide bounded
   latency and delay variation (jitter) without requiring precise time
   synchronization among nodes, or per-flow state in transit nodes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-qiang-detnet-large-scale-detnet-05'/>
   <format target='https://www.ietf.org/archive/id/draft-qiang-detnet-large-scale-detnet-05.txt' type='TXT'/>
</reference>


<reference anchor='I-D.dang-queuing-with-multiple-cyclic-buffers'>
   <front>
      <title>A Queuing Mechanism with Multiple Cyclic Buffers</title>
      <author fullname='Bingyang Liu' initials='B.' surname='Liu'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Joanna Dang' initials='J.' surname='Dang'>
         <organization>Huawei</organization>
      </author>
      <date day='22' month='February' year='2021'/>
      <abstract>
	 <t>   This document presents a queuing mechanism with multiple cyclic
   buffers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-dang-queuing-with-multiple-cyclic-buffers-00'/>
   <format target='https://www.ietf.org/archive/id/draft-dang-queuing-with-multiple-cyclic-buffers-00.txt' type='TXT'/>
</reference>


<reference anchor="IEEE802.1Qbv" >
  <front>
    <title>IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged Networks - Amendment 25: Enhancements for Scheduled Traffic</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2015"/>
  </front>
</reference>
<reference anchor="IEEE802.1Qch" >
  <front>
    <title>IEEE Std 802.1Qch-2017: IEEE Standard for Local and Metropolitan Area Networks - Bridges and Bridged Networks - Amendment 29: Cyclic Queuing and Forwarding</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="TSN-ATS" target="https://1.ieee802.org/tsn/802-1qcr/">
  <front>
    <title>P802.1Qcr - Bridges and Bridged Networks Amendment: Asynchronous Traffic Shaping</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <date year="2020" month="July" day="09"/>
  </front>
  <seriesInfo name="IEEE" value=""/>
</reference>
<reference anchor="LDN" >
  <front>
    <title>Towards Large-Scale Deterministic IP Networks</title>
    <author initials="B." surname="Liu" fullname="Binyang Liu">
      <organization></organization>
    </author>
    <author initials="S." surname="Ren" fullname="Shoushou Ren">
      <organization></organization>
    </author>
    <author initials="C." surname="Wang" fullname="Chuang Wang">
      <organization></organization>
    </author>
    <author initials="V." surname="Angilella" fullname="Vincent Angilella">
      <organization></organization>
    </author>
    <author initials="P." surname="Medagliani" fullname="Paolo Medagliani">
      <organization></organization>
    </author>
    <author initials="S." surname="Martin" fullname="Sebastien Martin">
      <organization></organization>
    </author>
    <author initials="J." surname="Leguay" fullname="Jeremie Leguay">
      <organization></organization>
    </author>
    <date year="2021"/>
  </front>
  <seriesInfo name="IEEE" value="2021 IFIP Networking Conference (IFIP Networking)"/>
  <seriesInfo name="doi" value="10.23919/IFIPNetworking52078.2021.9472798"/>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA7V9e3PbRrbn/6rSd+i1a2/ImKQkOn5px1OjSHKiW46tSMpk
t2yXFySaJMYkQAOgZMbxfvZ7fuecfgAk7cytWk2NQwL9PH3ej2a/39/fGxdp
lk+Pzaqe9J/u7+3v1Vk9t8fmzNa2XGR5VtXZ2Lyy9V1RfqCWpkNv6GvXnCV1
Yi7nSW5N39wk06lNzel6PKfmv67sCm2TPDUvivIuKVPuenP664uumRSlGRWr
PKUO86S2+Xht7rJ6ZubFnflXVtPEJsvpVTm1phonc2tkzmp/LxmNSnt7bFJb
57bu1+OPk/29tBjnyYIWnZbJpO7b8Qdb1v2oSf/waH/vjnZ5dn7z6vyGdk3T
TotyfWyqOt3fy5blsanLVVUPDw+fHQ7396q6tMni2Fyc37wAVKqa9vI+mRc5
TbO2tJJldry/Z4ypi7E+kS+pXdazY/OIv1dFSQNNqtCiWi+aD8bFYmHz2j3B
/5JVPStKHr7PbfAnO7wpbDm3VWXOeZP+bVHS7l6s6lVp72xmbux4lhfzYprZ
yvx2feLbYV+2PjbD4fDQnNK8ZTI355+WJY15l6x9u3FWE3Cuk5zO+JROIglv
ipTWcXpinj06fHQYPV7RYNQnns0ukmxOkK3tP8bVYJKsBqndtqvr2hKO1ObH
ck0zNjf1W57d2rKi9ZhiYq5XZWnX5uL0uj1JNRhx739U3GSQjAerD9smO8lT
ApL5aWB+SeZZ1ZyNH5nTIq9W85pwtj1LMl2gxT+m+Dqgs9s2w0+rJJ8uLWH8
y8w0x/95leB8lJ7COa3Ny2RUlElNSNmec55N3YD/mHF/mXh/Ly/KRVITfBhX
rl6cDn948oP7/HD45NB9fvr40SP/+dljtCGszyft/g+Hh8/c5x+ePgl9hs8e
+88/HA7DWE/982eHR495XGMu+meDzBJHGWW27Ne2n5Tj2XHjjVKn8oG+8gHf
pknDrVb9ZVmM5nZR+eYfMwJQX7hEnxlHnxmHPvLtUjT7KNypD57TX+Ccl9Ry
zKyrP1pNJoRux0KJ1Ov8/Pzp4XBw9OvoVgjeKIe8h1eEusQYiL8xV3tZ0KTM
9Ra2LotlMc/otUmIl5hcjrwy/T7heZZOiTLRUj6nDiXovTkhhpCCKZjho2Nz
ns+SfGyZSfAs1+OZTVdz6nND/G6Sje/JuiK24fGN13iTLWz/2uZERHTWDWZ+
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
SeD/ApUfqbw7fwAA

-->

</rfc>

