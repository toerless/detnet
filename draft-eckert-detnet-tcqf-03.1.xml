<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.1.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-detnet-tcqf-03" category="std" consensus="true" submissionType="IETF" tocDepth="5" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="detnet-tcqf">Deterministic Networking (DetNet) Data Plane - Tagged Cyclic Queuing and Forwarding (TCQF) for bounded latency with low jitter in large scale DetNets</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert" role="editor">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="Y." surname="Li" fullname="Yizhou Li" role="editor">
      <organization>Huawei Network Technology Laboratory</organization>
      <address>
        <postal>
          <city>Beijing</city>
          <country>China</country>
        </postal>
        <email>liyizhou@huawei.com</email>
      </address>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization>University of Surrey ICS</organization>
      <address>
        <postal>
          <country>United Kingdom</country>
        </postal>
        <email>s.bryant@surrey.ac.uk</email>
      </address>
    </author>
    <author initials="A. G." surname="Malis" fullname="Andrew G. Malis">
      <organization>Malis Consulting</organization>
      <address>
        <postal>
          <country>USA</country>
        </postal>
        <email>agmalis@gmail.com</email>
      </address>
    </author>
    <author initials="G." surname="Li" fullname="Guangpeng Li">
      <organization>Huawei Network Technology Laboratory</organization>
      <address>
        <postal>
          <city>Beijing</city>
          <country>China</country>
        </postal>
        <email>liguangpeng@huawei.com</email>
      </address>
    </author>
    <author initials="S." surname="Ren" fullname="Shoushou Ren">
      <organization>Huawei Network Technology Laboratory</organization>
      <address>
        <postal>
          <city>Beijing</city>
          <country>China</country>
        </postal>
        <email>renshoushou@huawei.com</email>
      </address>
    </author>
    <author initials="F." surname="Yang" fullname="Fan Yang">
      <organization>Huawei Network Technology Laboratory</organization>
      <address>
        <postal>
          <city>Beijing</city>
          <country>China</country>
        </postal>
        <email>shirley.yangfan@huawei.com</email>
      </address>
    </author>
    <author initials="J.-d." surname="Ryoo" fullname="Jeong-dong Ryoo">
      <organization>ETRI</organization>
      <address>
        <postal>
          <country>South Korea</country>
        </postal>
        <email>ryoo@etri.re.kr</email>
      </address>
    </author>
    <author initials="P." surname="Liu" fullname="Peng Liu">
      <organization>China Mobile</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>liupengyjy@chinamobile.com</email>
      </address>
    </author>

    <date year="2023" month="May" day="21"/>

    
    <workgroup>DETNET</workgroup>
    

    <abstract>


<t>This memo specifies a forwarding method for bounded latency for Deterministic Networks and is a variant of the IEEE TSN Cyclic Queuing and Forwarding (CQF) method. Tagged CQF (TCQF) supports more than 2 cycles and indicates the cycle number via an existing or new packet header field called the tag to replace the cycle mapping in CQF which is based purely on synchronized reception clock.</t>

<t>This memo standardizes TCQF as a mechanism independent of the tagging method used. It also specifies tagging via the (1) the existing MPLS packet Traffic Class (TC) field for MPLS packets, (2)  the IP/IPv6 DSCP field for IP/IPv6 packets, and (3) a new TCQF Option header for IPv6 packets.</t>

<t>Target benefits of TCQF include low end-to-end
jitter, ease of high-speed hardware implementation, optional ability to support large number
of flow in large networks via DiffServ style aggregation by applying TCQF to
the DetNet aggregate instead of each DetNet flow individually, and support of wide-area DetNet
networks with arbitrary link latencies and latency variations as well as low accuracy clock synchronization.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<section anchor="terminology"><name>Terminology</name>

<dl>
  <dt>CQF</dt>
  <dd>
    <t>Cyclic Queuing and Forwarding.  A queuing mechanism defined by annex T of <xref target="IEEE802.1Q"/>.</t>
  </dd>
  <dt>DT</dt>
  <dd>
    <t>Dead Time. A term from CQF indicating the time during each cycle in which no frames can be sent because the the receiving node could not receive it into the desired cycle buffer.</t>
  </dd>
  <dt>TCQF</dt>
  <dd>
    <t>Tagged Cyclic Queuing and Forwarding. The mechanism specified in this memo.</t>
  </dd>
</dl>

</section>
</section>
<section anchor="overview-informative"><name>Overview (informative)</name>

<section anchor="cyclic-queuing-and-forwarding-cqf"><name>Cyclic Queuing and Forwarding (CQF)</name>

<t>Cyclic Queuing and Forwarding (CQF) is a bounded (guaranteed) per-hop
latency forwarding mechanism standardized for use in ethernet switched
networks by the IEEE TSN working group originally via <xref target="IEEE802.1Qch"/>
(802.1 Qch), which later became annex T of <xref target="IEEE802.1Q"/>.  See also <xref target="RFC9320"/>, Section 6.6.</t>

<t>CQF is not a separate forwarding mechanism, but it is simple a profile
of the IEEE Time Aware Shaper (TAS) standard, <xref target="IEEE802.1Qbv"/>, which introduce
Time-Gated Queues.</t>

<t>CQF uses a two-queue based forwarding mechanism on every switch along a
path between a sender and receiver. One queue is used to receive and
store frames destined toward a particular outgoing interface on the switch,
the other queue is used simultaneously to send frames to the same outgoing
interface. At every cycle time T_c interval these two queues are swapped, or
in terms of Time-Gated Queus, one is closed for sending, the other is opened
for sending. This operation is synchronized across all switches in the 
network by network wide synchronized clocks, so that all queues
open and close at the same time.</t>

<t>For a path of h hops, the end-to-end latency bound is between (h-1) * T_c + DT
and (h+1) * T_c. DT is the so-called dead time at the end of a cycle
during which no frames can be transmitted from the sending queue to ensure
that the last byte of the last frame will be received earlier than
the end of the same cycle on the receiving switch.</t>

<t>A core contributor to DT is the (physical) link between the sending
and receiving switch. DT needs to be larger than the latency of
this link, including physical propagation latency (speed of light), possible
error correction latencies, and interface serialization latency.</t>

<t>T_c needs to be choosen carefully: The larger it is, the higher the
bounded latency. The smaller it is, the fewer bytes (and hence frames)
will fit into a cycle.</t>

<t>To admit flows into a CQF network, the ingress switch uses per-flow
Time-Gated Queues. In the most simple case, such a gate is configured
to admit a maximum amount of bytes from the flow into every cycle. More
advanced admission control can be performed for bursty flows. For example
N bursty flows f_i = 0...(N-1) could share admitted bandwidth by each having their
burst admitted in different cycles c_i = c % N + c_i, where c is a continuous
increasing cycle number.</t>

</section>
<section anchor="highspeed"><name>Benefits of CQF with higher speed links</name>

<t>The typical CQF deployments in manufacturing networks with 1Gbps links
uses no less than hundreds of microseconds as a cycle interval.  In a
network with a small diameter, say less than 8 hops, it is sufficiently good to provide an
end-to-end latency bound in the order of several milliseconds.</t>

<t>With the increasing of link speed from 100Mbps to 1Gbps, 10Gbps, 100Gbps
or even higher in larger networks, either more bytes can be transmitted
within the same cycle interval or the smaller cycle interval is
required to transmit the same amount of bytes in a cycle as that in
low speed networks. Likewise, the serialization latency reduces with
higher speed links and DT reduces. This overall makes CQF for higher speed
networks more attractive than for lower speed networks.</t>

<t><xref target="Fig1"/> shows a simple calculation on the number of bytes that can
be transmitted in a cycle with different cycle intervals and link
speeds. A minimum of 1500 bytes is labeled with * as a baseline because
a typical maximum Ethernet frame is 1500 bytes and a selected cycle interval
should at least allow one such frame size to be transmitted unless
otherwise specified.</t>

<t>TBD: These numbers probbly need to be adjusted to reflect reducing DT based on
serialization latency.</t>

<figure title="Bytes transmitted within one cycle interval" anchor="Fig1"><artwork><![CDATA[
+----------+------------------------------------------------+
|          |           Bytes Transmitted in a Cycle         |
|Cycle Time+------------------------------------------------+
|          |             Link Speed                         |
|  (us)    |   100Mbps  |   1Gbps     |   10Gbps  | 100Gbps |
+----------+------------+-------------+-----------+---------+
|    1     |    12.5    |    125      |    1250   |   12500*|
+----------+------------+-------------+-----------+---------+
|   1.2    |     15     |    150      |    1500*  |   15000 |
+----------+------------+-------------+-----------+---------+
|    2     |     25     |    250      |    2500   |   25000 |
+----------+------------+-------------+-----------+---------+
|    4     |     50     |    500      |    5000   |   50000 |
+----------+------------+-------------+-----------+---------+
|    10    |    125     |   1250      |   12500   |  125000 |
+----------+------------+-------------+-----------+---------+
|    12    |    150     |   1500*     |   15000   |  150000 |
+----------+------------+-------------+-----------+---------+
|   120    |    1500*   |   15000     |   150000  | 1500000 |
+----------+------------+-------------+-----------+---------+
]]></artwork></figure>

<t>When the link speed is at 10Gbps, the cycle interval could be as
small as 1.2 us if a 1500 byte frame needs to be transmitted in one
cycle interval, and with 100Gbps links even 1 usec cycle time
allows for 8 frames of 1500 byte each.  These are not accurate calculations because there are
certainly other factors to determine the cycle interval.  However, it
shows that as the link speed increases, cycle interval can be greatly
reduced in practice while satisfying the minimum amount of data
transmitted in a single cycle.  The end-to-end latency bound when
applying CQF is determined by cycle interval and number of hops.
That is to say, CQFs with a smaller cycle interval have the potential
to meet more strict end-to-end latency requirements in higher link
speed networks or meet the same end-to-end latency requirement in
networks with much larger network diameter (number of hops).</t>

<t>Industry automation has some typical application period requirement,
e.g.  100 us to 2 ms for isochronous traffic, 500 us to 1 ms for
cyclic-synchronous and 2 to 20 ms for cyclic-asynchronous traffic.
The network cycle interval is usually a fraction of the application
period.  When the cycle interval is in the order of tens of
microseconds, CQF can be used to meet the most strict end-to-end
latency requirements.  For instance, if we assume the number of hops
is 24, when cycle interval is set to 10us, the end-to-end latency
bound can be around (24+1)*10 = 250 us which has the potential to
meet the latency bound requirement for isochronous traffic.</t>

<t>In summary a higher speed network makes the shorter cycle interval
feasible because sufficiently large traffic volume can be transmitted
within one cycle interval.  A shorter cycle interval further offers
shorter end-to-end latency and jitter bounds which provide CQF with
the potentials to meet more strict latency requirements in wider
deployments while preserving its simplicity of latency calculation
and provisioning.  Therefore there is a strong motivation to leverage
CQF and at the same time to make cycle interval as short as possible.</t>

</section>
<section anchor="cqfdt"><name>Challenges of CQF with higher latency links</name>

<t>Unlike the original targets for IEEE TSN work, DetNet not only targets
to support IETF forwarding planes (IP, MPLS,...), but also wide-area
networks with therefore longer physcial propagation latencies.</t>

<t>As shown in <xref target="Fig2"/> for fundamental (two buffer) CQF, the last byte
sent by node A in cycle (i-1) has to be ready for sending at node B
before the start of cycle i.  To realize it, DT or dead time is
imposed.  It is a time interval usually at the end of a cycle so that
a node should not send the scheduled CQF packets.</t>

<t>Dead time is at least the sum of the maximum propagation delay to the
next node, the maximum processing delay at the next node and the
maximum other time variations.  Therefore either the longer
propagation or longer processing delay makes dead time larger.
Packets from DetNet service is likely to be propagated over long
links in the wider area.  It takes around 5us per kilometer to
propagate, i.e. 0.5ms every hundred kilometers.  Hence the dead time
can be as large as milliseconds or tens of milliseconds in case of
hundred kilometers of longer links and larger processing delays.
That would make the dead time eat up most of the cycle interval when
cycle interval is short (e.g., at the same order or one order higher
of magnitude in time as dead time).  Then the useful time in a cycle
will be much reduced.  In some extreme cases, when the link is long
and the cycle interval is set to extremely short, the first packet
sent in a cycle by a node will not be possibly received in the same
cycle interval at the next node.  That makes the useful time in a
cycle reaches zero in two buffer CQF.  Then two buffer CQF will be no
longer suitable.</t>

<t>In result of these considerations, reasonable limits for the size
of TSN CQF networks are in the order of at most few Km per hop,
beyond which DT exceeds common cycle times and possible through
of CQF traffic is hence 0.</t>

<figure title="Fundamental Two Buffer CQF" anchor="Fig2"><artwork><![CDATA[
--------------------------------------------------------> Time

          |             |             |             |
Node A    |  cycle i-1  |   cycle i   |  cycle i+1  |
          |             |             |             |
Sending  ---------------+----------------------------------
          |+------+     |+------+     |+------+     |
          ||//////|     ||//////|     ||//////|     |
          |+------+     |+------+     |+------+     |
          |  buf_1      |  buf_2      |  buf_1      |
          |       |     |       |     |       |     |
          |       | DT  |       | DT  |       | DT  |
Node B    |       |<--->|       |<--->|       |<--->|
          |             |             |             |
Receiving--------------------------------------------------
          |     +------+|     +------+|     +------+|
          |     |//////||     |//////||     |//////||
          |     +------+|     +------+|     +------+|
          |       buf_1 |       buf_2 |       buf_1 |
          |             |             |             |
          |             |             |             |
Node B    |             |             |             |
          |             |             |             |
Sending  --------------------------------------------------
          |             |+------+     |+------+     |
          |             ||//////|     ||//////|     |
          |             |+------+     |+------+     |
          |             |  buf_1      |  buf_2

DT=Dead Time
]]></artwork></figure>

</section>
<section anchor="cqf-review"><name>Review of CQF benefits and challenges for DetNet</name>

<t>In review, CQF has a range of benefits for DetNet.</t>

<t><list style="numbers">
  <t>It provides bounded latency.</t>
  <t>It provided tightly bounded jitter.</t>
  <t>It has a very simple and easily standardized calculus for its bounded latency and jitter.</t>
  <t>It has very simple per-hop forwarding machinery (cyclic queues) easily supportable in high-speed network equipment.</t>
  <t>Like Diffserv forwarding, it does not use per-hop,per-flow state in the forwarding plane and therefore does not require per-hop,per-flow signaling with the DetNet controller-plane, allowing it to scale to large number of flows.</t>
  <t>The faster the links are, the lower the per-hop latency impact of the cyclic queuing mechanism.</t>
</list></t>

<t>The core limitation of CQF, which TCQF intends to solve, lies in its use of arrival time clock to determine the cycle into which the packet is to be placed, see <xref target="I-D.eckert-detnet-bounded-latency-problems"/> for more details.</t>

<t><list style="numbers">
  <t>Cycles times should be as short as feasible to support lower end to end latency (<xref target="highspeed"/>).</t>
  <t>When networks have longer links, or links with higher propagation jitter as in Metro and WAN, this increases the dead time, and hence reduces the possible utilization or need to increase cycle times.</t>
  <t>When shorter cycle times are feasible because of higher speed links, this would require an increase in clock-synchronization accuracy.</t>
</list></t>

</section>
<section anchor="tagged-cqf"><name>Tagged CQF</name>

<t>Tagging of CQF packets with cycle identifiers can be used to solve
the dilemma aforementioned with minor changes to the fundamental two buffer CQF.
This section introduces this mechanism with multipl buffers and
CQF cycle identification in the packet header. Note that we are also now
using the term packet (as used for IP, MPLS and other IETF forwarding planes) and
buffers for packets, as opposed to frames as used by IEEE.</t>

<section anchor="cqf-with-more-than-two-buffers"><name>CQF with more than two buffers</name>

<t>CQF can use more than two buffers to minimize the dead time and
increase the useful time in a cycle so as to support long link delay.
<xref target="Fig3"/> shows how a three buffer CQF works in a rotating manner in
general.  Node A sends packets in cycle (i-1).  The time interval
over which node B receives these packet spans two cycles, cycle (i-1)
and cycle i.  Hence a method is needed to make node B send them all
at once in cycle (i+1) in order to ensure packets in a single cycle
from the previous node always being sent out in one cycle at the
current node.</t>

<figure title="Three Buffer CQF" anchor="Fig3"><artwork><![CDATA[
--------------------------------------------------------> Time

          |             |             |             |
Node A    |  cycle i-1  |   cycle i   |  cycle i+1  |
          |             |             |             |
Sending  ---------------+----------------------------------
          |+----------+ |+----------+ |+----------+ |
          ||//////////| ||//////////| ||//////////| |
          |+----------+ |+----------+ |+----------+ |
          |  buf_1      |  buf_2         buf_3      |
          |           | |           | |           | |
          |         ->| |<-       ->| |<-       ->| |<-
          |            DT            DT            DT
          |
          -------------------------------------------------
Node B    |     +-----------+ +-----------+ +-----------+
          |     |///////////| |///////////| |///////////|
Receiving |     +-----------+ +-----------+ +-----------+
          |       buf_1 |       buf_2 |       buf_3 |
          |             |             |             |
          |             |             |             |
          |             |             |             |
          |             |             |             |
         ---------------|----------------------------------
Node B    |             |             |+----------+ |+----------+
          |             |             ||//////////| ||//////////|
Sending   |             |             |+----------+ |+----------+
          |             |                buf_1         buf_2

DT=Dead Time
]]></artwork></figure>

<t>More than three buffers will be required when the receiving interval
at node B for packets sent in a single cycle interval from node A
spans over more than two cycle interval boundaries.  This can happen
when the time variance (jitter) including propagation, processing, regulation,
clock synchronization variance (so called Maximum Time Interval Error - MTIE)
and other factors between two neighbouring DetNet nodes can become larger
than a single cycle tim.</t>

</section>
<section anchor="from-cqf-with-multiple-buffers-to-tcqf"><name>From CQF with multiple buffers to TCQF</name>

<t>Note that due to the variance in time, the receiving interval at the
downstream node can be much larger than one cycle interval in which
the upstream node transmits.  When time variance is large and cycle
interval and dead time are set small, the possible receiving time of
the last few packets from node A’s cycle (i-1) at node B can overlap
with the possible receiving time of the first few packets from node
A’s cycle i in different rounds of buffer rotations.  Hence, when the
buffer number is larger than two, if the receiving side still uses
the traditional CQF implicit time borderline to demarcate the
receiving packets from the consecutive cycles of the upstream node,
it may cause the ambiguity in identifying the right sending cycle at
the upstream node and further affect the correctness of the decision
of which output buffer to put the received packets at the current
node.</t>

<t><xref target="Fig4"/> shows such an ambiguity when time based cycle demarcation is
used.  The packet sent by node A in its cycle (i-1) can be received
at any time in the receiving interval indicated as “receiving window
for A’s buf_1” in Figure 4.  The receiving window refers to the time
interval between the earliest time that the first packet sent in a
given cycle from an upstream node is processed and enqueued in an
output buffer and the latest time that the last packet of the cycle
is processed and enqueued in an output buffer.  Network operators may
configure the size of the receiving window, taking the time variance
of their networks into account.  It can be seen that the spanning
time period of receiving window is longer than the cycle interval.
This is because there is a large time variance experienced between A
and B, e.g. varying processing time for different packets in
different cycles.  It does not mean the receiving interval for every
cycle always constantly span over such a large receiving window.  The
receiving window time interval indeed is determined by the worst case
time variance value and that should be used for regular time cycle
demarcation.</t>

<figure title="Three Buffer ambiguity" anchor="Fig4"><artwork><![CDATA[
--------------------------------------------------------> Time

           |        |        |        |        |
Node A     | cycle  | cycle  | cycle  | cycle  |
           |  i-1   |   i    |  i+1   |  i+2   |
Sending   ----------+--------+--------+--------+
           |+-----+ |+-----+ |+-----+ |+-----+ |
           ||/////| ||/////| ||/////| ||/////| |
           |+-----+ |+-----+ |+-----+ |+-----+ |
           | buf_1  | buf_2  | buf_3  | buf_4  |
           |      | |      | |      | |      | |
           |    ->| |<-  ->| |    ->| |    ->| |
           |      DT       DT       DT       DT
           |
          --------------------------------------
           |      +-----------+receiving window
Node B     |      |///////////|for A's buf_1
           |      +-----------+
Receiving  |    put to B's buf_1
           |
           |             ->|  |<- ambiguity window 1
           |
           |               +-----------+receiving window
           |               |///////////|for A's buf_2
           |        |      +-----------+
           |        |     put to B's buf_2
           |        |
           |        |             ->|  |<- ambiguity window 2
           |        |        |
           |        |        |      +-----------+receiving window
           |        |        |      |///////////|for A's buf_3
           |        |        |      +-----------+
           |        |        |     put to B's buf_3
           |        |        |
           |        |        |             ..........
           |        |        |
          -|--------|--------|--------|---------------
Node B     |        |        |        |        |        |
           |        |        | +-----+|+-----+ |+-----+ |+-----+
Sending    |        |        | |/////|||/////| ||/////| ||/////|
           |        |        | +-----+|+-----+ |+-----+ |+-----+
           |        |        |  buf_4 | buf_1  | buf_2  | buf_3

DT=Dead Time
]]></artwork></figure>

<t>When a packet is received in ambiguity window 1 in <xref target="Fig4"/>, node B
is not able to use the receiving time to determine which buffer is
the correct one to put the packet in because it cannot tell if the
packet is sent from cycle (i-1) or cycle i on node A.  If node B puts
the packet to the wrong output buffer, the packet may experience the
unexpected delay.  At the same time, the packet occupying the non-
designated buffer may break the contracts between the end hosts and
DetNet networks and then cause the unpredictable consequences.</t>

<t>It has been noted that the DT can be greatly increased to beat the
time variance in order to make the receiving windows do not overlap
so as to remove such ambiguity.  However, it is not always practical
and usually not desired because large DT will eat useful cycle time
and bring the low utilization issue as illustrated in <xref target="cqfdt"/>.
Therefore, it would be desired to keep DT as small as possible and at
the same time identify the cycle interval correctly.</t>

<t>With tagged CQF, the sending router A encodes the sending cycle identification in some
existing or new packet header field as specified later in this document.
This allows the receiving router B to determine the correct output port cycle buffer to
place the data packet into. Except for the need for the operator to
pre-configure this mapping on router B, based on the above described latency and jitter
of the link (and processing between the sending and receiving router,
tagging does not change the fundamental mechanism and benefits of CQF.
makes no change from the fundamental CQF.</t>

<t>Compared to CQF with multiple buffers, Tagged CQF allows to
operate with clock synchronization at significantly reduced accuracy
requirements than CQF. In CQF, the MTIE is an addend determing DT 
and should hence typically be less than 1% of the cycle time. In TCQF it
is an addent in the permitted receive window and can hence be for  example
as large as the cycle time, and such 100 times larger. A network using
TCQF with 100Gbps interfaces can hence can hence use the same or less
expensive clock synchronization setup than a CQF network with 1Gbps interfaces.
In addition, when conditions of the network connections change, the mappings
can dynamically changed from network operations.</t>

<t>CQF with multiple buffers but without tagging has been proposed to IEEE TSN
in <xref target="multipleCQF"/>, but has not been adopted. Instead of relying on a cycle
tag in a packet header, it still relies solely on the arrival time of packet,
and can hence not equally resolve arrival time ambiguities as TCQF can,
because it does not know the cycle from which the packet was sent.</t>

</section>
</section>
<section anchor="summary-of-tcqf-benefits-and-goals-for-detnet"><name>Summary of TCQF benefits and goals for DetNet</name>

<t>TCQF inherits the benefits of CQF for DetNet as outlined in <xref target="cqf-review"/>, and byusing a configurable number of three or more cycles, and signaling the cycle as part of a packet header, it resolves these problems as follows.</t>

<t><list style="numbers">
  <t>With three cycles, TCQF can support arbitrary latency links at arbitrary speeds without reduction of utilization because of longer links or higher link speeds (same cycle time, same clock accuracy, only change in lengths and speeds).</t>
  <t>With four or more cycles, TCQF can also eliminate Dead Time caused by variation of clock synchronization inaccuracies (MTIE) as well as jitter caused by link propagation and processing variation. The sum of cycles times needs to be larger than the total jitter to achieve this.</t>
</list></t>

<t>Prior documents describing the concept of TCQF (without using that name) include <xref target="I-D.qiang-detnet-large-scale-detnet"/> and <xref target="I-D.dang-queuing-with-multiple-cyclic-buffers"/>. TCQF does not depend on other elements of <xref target="RFC8655"/>, so it can also be used stand alone in otherwise non-deterministic IP/IPv6 or MPLS networks to achieve bounded latency and low jitter.</t>

<t>TCQF is likely especially beneficial when networks are architected to avoid per-hop, per-flow state even for traffic steering, which is the case for networks using SR-MPLS <xref target="RFC8402"/> for traffic steering of MPLS unicast traffic, SRv6 <xref target="RFC8986"/> for traffic steeering of IPv6 unicast traffic and/or BIER-TE <xref target="I-D.ietf-bier-te-arch"/> for tree engineering of MPLS multicast traffic by using the TC and/or DSCP header fields of BIER packets according to <xref target="RFC8296"/>.</t>

<t>In these networks, it is specifically undesirable to require per-flow signaling to non-edge forwarders (such as P-LSR in MPLS networks) solely for DetNet QoS because such per-flow state is unnecessary for traffic steering and would only be required for the bounded latency QoS mechanism and require likely even more complex hardware and manageability support than what was previously required for per-hop steering state (such as in RSVP-TE, <xref target="RFC4875"/>). Note that the DetNet architecture <xref target="RFC8655"/> does not include full support for this DiffServ model, which is why this memo describes how to use TCQF with the DetNet architecture per-hop, per-flow processing as well as without it.</t>

</section>
</section>
<section anchor="using-tcqf-in-the-detnet-architecture-and-mpls-forwarding-plane-informative"><name>Using TCQF in the DetNet Architecture and MPLS forwarding plane (informative)</name>

<t>This section gives an overview of how the operations of TCQF relates
to the DetNet architecture. We first revisit QoS with DetNet in the absence of TCQF
using an MPLS network as an example.</t>

<figure title="A DetNet MPLS Network" anchor="FIG-DetNet-MPLS"><artwork><![CDATA[
 DetNet MPLS       Relay       Transit         Relay       DetNet MPLS
 End System        Node         Node           Node        End System
    T-PE1          S-PE1        LSR-P          S-PE2       T-PE2
 +----------+                                             +----------+
 |   Appl.  |<------------ End-to-End Service ----------->|   Appl.  |
 +----------+   +---------+                 +---------+   +----------+
 | Service  |<--| Service |-- DetNet flow --| Service |-->| Service  |
 +----------+   +---------+  +----------+   +---------+   +----------+
 |Forwarding|   |Fwd| |Fwd|  |Forwarding|   |Fwd| |Fwd|   |Forwarding|
 +-------.--+   +-.-+ +-.-+  +----.---.-+   +-.-+ +-.-+   +---.------+
         :  Link  :    /  ,-----.  \   : Link :    /  ,-----.  \
         +........+    +-[ Sub-  ]-+   +......+    +-[ Sub-  ]-+
                         [Network]                   [Network]
                          `-----'                     `-----'
         |<- LSP -->| |<-------- LSP -----------| |<--- LSP -->|
  
         |<----------------- DetNet MPLS --------------------->|
]]></artwork></figure>

<t>The above <xref target="FIG-DetNet-MPLS"/>, is copied from <xref target="RFC8964"/>, Figure 2, 
and only enhanced by numbering the nodes to be able to better refer
to them in the following text.</t>

<t>Assume a DetNet flow is sent from T-PE1 to T-PE2 across S-PE1, LSR, S-PE2. 
In general, bounded latency QoS processing is then required on the
outgoing interface of T-PE1 towards S-PE1, and any further outgoing
interface along the path. When T-PE1 and S-PE2 know that their next-hop
is a service LSR, their DetNet flow label stack may simply have the
DetNet flows Service Label (S-Label) as its Top of Stack (ToS) LSE,
explicitly indicating one DetNet flow.</t>

<t>On S-PE1, the next-hop LSR is
not DetNet aware, which is why S-PE1 would need to send a label stack
where the S-Label is followed by a Forwarding Label (F-Label), and
LSR-P would need to perform bounded latency based QoS on that F-Label.</t>

<t>For bounded latency QoS mechanisms relying on per-flow regulator state (aka:
per-flow packet scheduling), such as in <xref target="TSN-ATS"/>, this requires the use of a
per-detnet flow F-Labels across the network from S-PE1 to S-PE2. These could
for for example be assigned/managed through RSVP-TE <xref target="RFC3209"/>
enhanced as necessary with QoS parameters matching the underlying bounded
latency mechanism (such as <xref target="TSN-ATS"/>).</t>

<t>With TCQF, a sequence of LSR and DetNet service node implements
TCQF with MPLS TC, ideally from T-PE1 (ingress) to T-PE2 (egress).  The ingress
node needs to perform per-DetNet-flow per-packet "shaping"/"regulating" to  assign
each packet of a flow to a particular TCQF cycle. This is specified in <xref target="ingress"/>.</t>

<t>All LSR/Service nodes after the ingress node only have to map a
received TCQF tagged DetNet packet to the configured cycle
on the output interface, not requiring any per-DetNet-flow QoS state.
These LSR/Service nodes do therefore also not require per-flow
interactions with the controller plane for the purpose of bounded latency.</t>

<t>Per-flow state therefore is only required on nodes that are 
DetNet service nodes, or when explicit, per-DetNet flow steering
state is desired, instead of ingress steering through e.g.: SR-MPLS.</t>

<t>Operating TCQF per-flow stateless across a service node, such as S-PE1, S-PE2
in the picture is only one option. It is of course equally feasible to
Have one TCQF domain from T-PE1 to S-PE2, start a new TCQF domain there,
running for example up to S-PE2 and start another one to T-PE2.</t>

<t>A service node must act as an egress/ingress edge of a TCQF domain if it needs
to perform operations that do change the timing of packets other than
the type of latency that can be considered in configuration of TCQF (see <xref target="calculation"></xref>).</t>

<t>For example, if T-PE1 is ingress for a TCQF domain, and T-PE2 is the egress,
S-PE1 could perform the DetNet Packet Replication Function (PRF)  without having to be a TQCF 
edge node as long as it does not introduce latencies not included in the TCQF
setup and the controller plane reserves resources for the multitude of flows
created by the replication taking the allocation of resources in the TCQF cycles into account.</t>

<t>Likewise, S-PE2 could perform the Packet Elimination Function without being
a TCQF edge node as this most likely does not introduce any non-TCQF acceptable
latency - and the controller plane accordingly reserves only for one flow
the resources on the S-PE2-&gt;T-PE2 leg.</t>

<t>If on the other hand, S-PE2 was to perform the Packet Reordering Function (PRF), this could
create large peaks of packets when out-of-order packets are released together.
A PRF would either have to take care of shaping out those bursts for the traffic
of a flow to again conform to the admitted CIR/PIR, or else the service node
would have to be a TCQF egress/ingress, performing that shaping itself as an
ingress function.</t>

</section>
<section anchor="forwarding"><name>TCQF per-flow stateless forwarding (normative)</name>

<section anchor="model"><name>Configuration Data model and tag processing for MPLS TC tags</name>

<t>The following data model summarizes the configuration parameters
as required for TCQF and discussed in further sections. 'tcqf' 
includes the parameters independent of the tagging on an interface.
'tcqf_*' describes the parameters for interfaces using MPLS TC and
IP DSCP tagging.</t>

<figure title="Encapsulation independent TCQF Configuration Data Model" anchor="FIG-Data-Model"><artwork><![CDATA[
# Encapsulation agnostic data
tcqf 
+-- uint16 cycles
+-- uint16 cycle_time
+-- uint32 cycle_clock_offset
+-- if_config[oif] # Outgoing InterFace
    +-- uint32 cycle_clock_offset
    +-- cycle_map[iif] # Incoming InterFace
        +--uint8 oif_cycle[iif_cycle]
 
# IP/IPv6 DSCP tagging specific data
tcqf_dscp[oif]
+--uint8 dscp[oif_cycle]
]]></artwork></figure>

</section>
<section anchor="processing"><name>Packet processing</name>

<t>This section explains the TCQF packet processing and through
it, introduces the semantic of the objects in <xref target="FIG-Data-Model"/></t>

<t>tcqf contains the router wide configuration of TCQF parameters,
independent of the specific tagging mechanism on any interface. Any
interface can have a different tagging method. This document uses the term
router when it is irrelevant whether forwarding is for IP or MPLS packet,
and the term Label Switched Router (LSR) to indicate MPLS is used, or IP
router to indicate IP or IPv6 are used - independent of the specific encapsulation
used for IP or MPLS to carry the cycle identification.</t>

<t>The model represents a single TQCF domain, which is a set of
interfaces acting both as ingress (iif) and egress (oif)
interfaces, capable to forward TCQF packets amongst each other. A router
may have multiple TCQF domains each with a set of interfaces disjoint
from those of any other TCQF domain.</t>

<t>tcqf.cycles is the number of cycles used across all interfaces in the TCQF domain.
routers MUST support 3 and 4 cycles. The maximum number of supportable cycles
depends on the encapsulation. For example, to support interfaces with MPLS TC tagging,
7 or fewer cycles MUST be used across all interfaces in the CQF domain. See <xref target="mpls"/>.</t>

<t>The unit of tcqf.cycle_time is micro-seconds.
routers MUST support configuration of cycle-times of 20,50,100,200,500,1000,2000 usec.</t>

<t>Cycles start at an offset of tcqf.cycle_clock_offset in units of nsec as follows. 
Let clock1 be a timestamp of the local reference clock for TCQF, at which
cycle 1 starts, then:</t>

<t>tcqf.cycle_clock_offset = (clock1 mod (tcqf.cycle_time * tcqf.cycles) )</t>

<t>The local reference clock of the router is expected to be synchronized with
the neighboring LSR/router in TCQF domain.  tcqf.cycle_clock_offset can be configurable
by the operator, or it can be read-only. In either case will the operator be
able to configure working TCQF forwarding through appropriately calculated
cycle mapping.</t>

<t>tcqf.if_config[oif] is optional per-interface configuration of TCQF parameters.
tcqf.if_config[oif].cycle_clock_offset may be different from tcqf.cycle_clock_offset,
for example, when interfaces are on line cards with independently synchronized clocks,
or when non-uniform ingress-to-egress propagation latency over a complex router/LSR
fabric makes it beneficial to allow per-egress interface or line card configuration
of cycle_clock_offset. It may be configurable or read-only.</t>

<t>The value of -1 for tcqf.if_config[oif].cycle_clock_offset is used to indicate
that the domain wide tcqf.cycle_clock_offset is to be used for oif.
This is the only permitted negative number for this parameter.</t>

<t>When a packet is received from iif with a cycle value of iif_cycle and the
packet is routed towards oif, then the cycle value (and buffer) to use on
oif is tcqf.if_config[oif].cycle_map[iif].oif_cycle[iif_cycle]. This is
called the cycle mapping and is must be configurable. This cycle mapping
always happens when the packet is received with a cycle tag on an interface
in a TCQF domain and forwarded to another interface in the same TCQF domain.</t>

<t>This encapsulation in dependent data model only defines how to map from
a received packets cycle to a sending interface cycle buffer and hence sent
packet cycle. It does not specify how the cycle identifier is encoded in
the received or sent packet. This is amended by the specification in the following
sections.</t>

<t>This data model does therefore also not determine whether interfaces use IP/IPv6, MPLS
or any other encapsulation. This is determined by the configuration of the DetNet domain. A mixed
use of MPLS and IP/IPv6 interfaces is possible with this data model, but
at the time of writing this document not supported by DetNet.</t>

</section>
<section anchor="mpls"><name>TCQF for MPLS with TC tagging</name>

<t>This section describes operation of TCQF for MPLS packets using the
Traffic Class (TC) field of MPLS label to carry the cycle-id. To support
this encapsulation, the TCQF Data Model as defined in <xref target="FIG-Data-Model"/>
is expanded as follows.</t>

<figure title="TCQF Configuration Data for MPLS TC" anchor="FIG-Data-Model-TC"><artwork><![CDATA[
# MPLS TC tagging specific data
tcqf_tc[oif]
+--uint8 tc[oif_cycle]
]]></artwork></figure>

<t>tcqf_tc[oif].tc[oif_cycle] defines how to map from the internal cycle number
oif_cycle to an MPLS TC value on interface oif. tcqf_tc[oif] MUST be
configured, when oif uses MPLS. This oif_cycle &lt;=&gt; tc mapping is not only
 used to map from internal cycle number to MPLS TC tag when sending
packets, but also to map from MPLS TC tag to the internal cycle number when
receiving packets.</t>

<t>In the terminology of <xref target="RFC3270"/>, TCQF QoS as defined here, is 
TC-Inferred-PSC LSP (E-LSP) behavior: Packets are determined to
belong to the TCQF PSC solely based on the TC of the received
packet.</t>

<t>The internal cycle number SHOULD be assigned from the Top of Stack (ToS)
MPLS label TC bits before any other label stack operations
happens. On the egress side, the TC value of the ToS MPLS label
SHOULD be assigned from the internal cycle number after any label
stack processing.</t>

<t>With this order of processing, TCQF can support forwarding of
packets with any label stack operations such as label swap in the
case of LDP or RSVP-TE created LSP, Penultimate Hop Popping (PHP),
or no label changes from SID hop-by-hop forwarding and/or SID/label
pop as in the case of SR-MPLS traffic steering.</t>

</section>
<section anchor="dscp"><name>TCQF for IP/IPv6 with DSCP tagging</name>

<t>This section describes operation of TCQF for IP/IPv6 packets using the
Differentiated Services Code Point (DSCP) field of IP/IPv6 packets to carry the cycle-id.
To support this encapsulation, the TCQF Data Model as defined in <xref target="FIG-Data-Model"/>
is expanded as follows.</t>

<figure title="TCQF Configuration Data for IP/IPv6 DSCP" anchor="FIG-Data-Model-DSCP"><artwork><![CDATA[
# IP/IPv6 DSCP tagging specific data
tcqf_dscp[oif]
+--uint8 dscp[oif_cycle]
]]></artwork></figure>

<t>tcqf_dscp[oif].dscp[oif_cycle] defines how to map from the internal cycle number
oif_cycle to an IP/IPv6 DSCP value on interface oif. tcqf_dscp[oif] MUST be
configured, when oif uses DSCP tagging of IP/IPv6 packets for TCQF. This
oif_cycle &lt;=&gt; idscp mapping is not only used to map from internal cycle number to the
DSCP tag when sending packets, but also to map from IP/IPv6 DSCP to the internal cycle number when
receiving packets.</t>

<t>As how DetNet domains are currently assumed to be single administrative network
operator domains, this document does not ask for standardization
of the DSCP to use with TCQF. Instead, deployments wanting to use TCQF with
IP/IPv6 encapsulation and DSCP tagging need to assign within their domain DSCP from the
xxxx11 "EXP/LU" Codepoint space according to <xref target="RFC2474"/>, Section 6. This
allows up to 16 DSCP for intradomain use and hence up to 16 cycle identifiers.</t>

</section>
<section anchor="option"><name>TCQF for IPv6 with IPv6 Option tagging</name>

<t>This section describes operation of TCQF for IPv6 packets without having
to rely on DSCP by defining a new IPv6 option for DetNet.  This option is to be placed in the
IPv6 HbH (Hop-by-Hop) Options or DOH (Destination Option Header) header.
To support this encapsulation, the TCQF Data Model as defined in <xref target="FIG-Data-Model"/>
is expanded as follows.</t>

<figure title="TCQF Configuration Data for IPv6 TCQF Option Header" anchor="FIG-Data-Model-IPV6OH"><artwork><![CDATA[
# IPv6 TCQF Option tagging specific data
tcqf_ipv6oh[oif]
+--uint8 ipv6oh[oif_cycle]
]]></artwork></figure>

<section anchor="tcqf-option-format"><name>TCQF Option Format</name>

<t>The TCQF Option helps the receiving port to identify in which
time cycle interval the packet is sent from the upstream router.  It
can be used to determine the output port cycle buffer to enqueue the
packet.</t>

<figure title="TCQF Option Format" anchor="Fig5"><artwork><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Option Type  |  Opt Data Len |E|    Flags    |   Cycle Id    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
.                                                               .
~         (64-bit extension if flag E-bit is 1)                 ~
.                                                               .
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>TCQF-Option fields:</t>

<t><list style="symbols">
  <t>Option Type: 8-bit identifier of the type of option.  Value TBD by
IANA.  If the processing IPv6 node does not recognize the Option
Type it must discard the packet and return an ICMPv6 message (the
highest-order 2 bits = 10).  The Option Data of this option may
change en route to the packet's final destination (the third-
highest-order bit=1).</t>
  <t>Opt Data Len: 8-bit length of the option data.</t>
  <t>Flags: 8-bit field to indicate what TCQF Option information
follows.  The leftmost bit is called E-bit.  When E-bit set to 1,
there is a 64-bit extension in length after Cycle Id.</t>
  <t>Cycle Id: 8-bit field to indicate the time cycle ID at output port
of the upstream node when the packet is sent out. This is the
packet header field name for the data model ipv6oh[oif_cycle]
element.</t>
  <t>64-bit extension: This field contains values required for a
possible additional options, such as timestamp.  This field exists only
when E-bit in Flags field is set to one.  [Editor's Note: Text
will be modified or added as specific uses for this field are
identified]</t>
</list></t>

</section>
<section anchor="tcqf-option-processing"><name>TCQF Option Processing</name>

<t>A packet carrying the TCQF Option with Cycle Id does not change
the fundamental cyclic queuing and forwarding behaviors of TCQF over
the encapsulation independent forwarding behavior described above (<xref target="processing"/>).</t>

<t>Compared to DSCP it does not introduce a limited number of cycle-ids, and
eliminates the possible operation consideration to use multiple DSCP for
effectively a single per-hop forwarding behavior, which otherwise would
be a novel aspect that could cause issues for example with diagnostics or
other operational standards. It also allows easier extensions with other
potentially beneficial DetNet features in the same Option header.</t>

<t>As part of the packet processing of <xref target="processing"/>, the Cycle ID field
of the option heade is rewritting from tcqf.ipv6oh[oif_cycle], in the
same way as DSCP wold be rewritten from tcqf.dscp[oif_cycle].</t>

</section>
<section anchor="encapsulation-of-tcqf-option"><name>Encapsulation of TCQF Option</name>

<t>When used in IPv6 (<xref target="RFC8200"/>) networks, the TCQF Option can be placed in
an HbH extension header or Destination Option Header (DOH).</t>

<figure title="TCQF Option Encapsulated in HbH" anchor="Fig6"><artwork><![CDATA[
+-----------------------------------+
|         DetNet IP Packet          |
+-----------------------------------+
|            other EHs              |
+-----------------------------------+
|        IPv6 Hop-by-Hop Ex Hdr     |
|         (TCQF Option)             |
+-----------------------------------+
|            IPv6 Header            |
+-----------------------------------+
|             Data-Link             |
+-----------------------------------+
|             Physical              |
+-----------------------------------+
]]></artwork></figure>

<t><xref target="Fig6"/> shows the encapsulation of TCQF option in HbH
extension header.  When every DetNet forwarding node along the path
is provisioned to use TCQF as the queuing mechanism, this
option should be placed here.  If a router does not support this
option, it discards the packet and returns an ICMP message.</t>

<t>In some deployments the path selection is indicated using IPv6
routing header (RH) by specifying a set of nodes that must be
traversed by the packet along its path to the destination.  When such
a source routing mechanism is used, TCQF Option is placed in
DOH (Destination Option Header) as shown in <xref target="Fig7"/>.  Then the TCQF
Option will be processed by the specified in-path routers.</t>

<figure title="TCQF Option Encapsulated in DOH" anchor="Fig7"><artwork><![CDATA[
+-----------------------------------+
|         DetNet IP Packet          |
+-----------------------------------+
|         other EHs including RH    |
+-----------------------------------+
|       IPv6 Destination Ex Hdr     |
|         (TCQF Option)             |
+-----------------------------------+
|            IPv6 Header            |
+-----------------------------------+
|             Data-Link             |
+-----------------------------------+
|             Physical              |
+-----------------------------------+
]]></artwork></figure>

<t>(TBD: Should and how TCQF Option be used in SRv6 ?)</t>

</section>
</section>
<section anchor="tcqf-pseudocode-normative"><name>TCQF Pseudocode (normative)</name>

<t>The following pseudocode restates the forwarding behavior of <xref target="forwarding"/>
in an algorithmic fashion as pseudocode. It uses the objects of the TCQF configuration
data model defined in <xref target="model"></xref>.</t>

<figure title="TCQF Pseudocode" anchor="FIG-Pseudocode"><artwork><![CDATA[
void receive(pak) {
  // Receive side TCQF - retrieve cycle of received packet
  // from packet internal header
  iif = pak.context.iif
  if (tcqf.if_config[iif]) { // TCQF enabled on iif
    if (tcqf_tc[iif]) {      // MPLS TCQF enabled on iif
      tc = pak.mpls_header.lse[tos].tc
      pak.context.tcqf_cycle = map_tc2cycle( tc, tcqf_tc[iif])
    } else
    if (tcqf_ipv6oh[iif]) {    // IPv6 Option Header used on iif
      cycle_id = pak.ipv6_header.tcqf_oh[cycle_id]
      pak.context.tcqf_cycle = 
        map_ipv6oh2cycle( cycle_id, tcqf_ipv6oh[iif])
    } else
    if (tcqf_dscp[iif]) {      // IP DSCP TCQF used on iif
      dscp = pak.ip_header.dscp
      pak.context.tcqf_cycle = map_dscp2cycle( dscp, tcqf_dscp[iif])
    } else // ... other encaps
  }
  forward(pak);
}

// ... Forwarding including any label stack operations

void forward(pak) {
  oif = pak.context.oif = forward_process(pak)

  if(ingres_flow_enqueue(pak))
    return // ingress packets are only enqueued here.

  if(pak.context.tcqf_cycle) // non TCQF packets cycle is 0
    if(tcqf.if_config[oif]) {    // TCQF enabled on OIF
      // Map tcqf_cycle iif to oif - encap agnostic
      cycle = pak.context.tcqf_cycle
            = map_cycle(cycle,
              tcqf.if_config[oif].cycle_map[[iif])
  
      // MPLS TC-TCQF
      if(tcqf.tc[oif]) {
        pak.mpls_header.lse[tos].tc = map_cycle2tc(cycle, tcqf_tc[oif])
      } else
      if (tcqf_ipv6oh[oif]) { // IPv6 Option Header used on iif
        pak.ipv6_header.tcqf_oh[cycle_id] =
          map_cycle2ipv6oh(cycle, tcqf_ipv6oh[oif])
      } else
      // IP DSCP TCQF enabled on iif
      if (tcqf_dscp[oif]) {
        pak.ip_header.dscp = map_cycle2dscp(cycle, tcqf_dscp[oif])
      } // else...  other future encap/tagging options for TCQF
  
      tcqf_enqueue(pak, oif.cycleq[cycle,iif])  // [3]
      return
    } else {
      // Forwarding of egress TCQF packets [1]
    }
  }
  // ... non TCQF OIF forwarding [2]
}

// Started when TCQF is enabled on an interface
// dequeues packets from oif.cycleq
// independent of encapsulation
void send_tcqf(oif) {
  cycle = 1
  cc =  tcqf.cycle_time *
        tcqf.cycle_time
  o =   tcqf.cycle_clock_offset
  nextcyclestart = floor(tnow / cc) * cc + cc + o

  while(1) {
    ingress_flow_2_tcqf(oif,cycle) // [5]
    wait_until(tnow >= nextcyclestart); // wait until next cycle
    nextcyclestart += tcqf.cycle_time
    forall(iif) {
      forall(pak = tcqf_dequeue(oif.cycleq[cycle,iif]) {
        schedule to send pak on oif before nextcyclestart; // [4]
      }
    }
    cycle = (cycle + 1) mod tcqf.cycles + 1
  }
}
]]></artwork></figure>

<t>Processing of ingress TCQF packets is performed
via ingres_flow_enqueue(pak) and
ingress_flow_2_tcqf(oif,cycle) as explained in <xref target="ingres_pseudocode"/>.</t>

<t>Packets in a cycle buffer can be sent almost arbitrarily within the time
period of the cycle. They also do not need to be sent as soon as possible,
as long as all will be sent within that period. There is no need to send them
in the order of their arrival except that packets from the same ingres
flow that end up in the same cycle must not be reordered across any number of
tcqf hops. The pseudocode describes this by using a queue oif.cycleq[cycle,iif] ([3]) for
all packets from the same iif. The pseudocode describes the oterwise
arbitrary scheduling of all packets within the cycle time via the
statement shown in [4].</t>

<t>Ingress packets are passed from their ingress queues to the next cycle queue via [5].</t>

<t>Processing of egres TCQF packets is out-of-scope. 
It can performed by any non-TCQF packet forwarding mechanism such as
some strict priority queuing in step [2], and packets could accordingly be
marked with an according packet header traffic class indicator for
such a traffic class in step [1].</t>

</section>
</section>
<section anchor="ingress"><name>TCQF Per-flow Ingress forwarding (normative)</name>

<t>Ingress flows in the context of this text
are packets of flows that enter the router from a non-TCQF interface
and need to be forwarded to an interface with TCQF.</t>

<t>In the most simple case, these packets are sent by the
source and the router is the first-hop router.
In another case, the routers ingress interface
connects to a hop where the previous router(s) did
perform a different bounded latency forwarding mechanism
than TCQF.</t>

<section anchor="ingress-flows-configuration-data-model"><name>Ingress Flows Configuration Data Model</name>

<figure title="TCQF Ingress Configuration Data Model" anchor="FIG-IData-Model"><artwork><![CDATA[
# Extends above defined tcqf
tcqf
...
| Ingress Flows, see below (TBD:
+-- iflow[flowid]
    +-- uint32 csize # in bits
]]></artwork></figure>

<t>The data model shown in <xref target="FIG-IData-Model"/> expands the tcqf data
model  from <xref target="FIG-Data-Model"/>. For every DetNet flow for which
this router is the TCQF ingress, the controller plane has to specify a maximum 
number of bits called csize (cycle size) that are permitted to 
go into each individual cycle.</t>

<t>Note, that iflow[flowid].csize is not specific to the sending
interface because it is a property of the DetNet flow.</t>

</section>
<section anchor="ingres_pseudocode"><name>Ingress Flows Pseudocode</name>

<t>When a TCQF ingress is received, it first has to be enqueued into a
per-flow queue. This is necessary because the permitted
burst size for the flow may be larger than what can fit
into a single cycle, or even into the number of cycles
used in the network.</t>

<figure title="TCQF Ingress Enqueue Pseudocode" anchor="FIG-Ingress-enqueue"><artwork><![CDATA[
bool ingres_flow_enqueue(pak) {
  if(!pak.context.tcqf_cycle &&
      flowid = match_detnetflow(pak)) {
    police(pak) // according to RFC9016 5.5
    enqueue(pak, flowq[oif][flowid])
    return true
  }
  return false
}
]]></artwork></figure>

<t>ingres_flow_enqueue(pak) as shown in <xref target="FIG-Ingress-enqueue"/>
performs this enqueuing of the packet. Its position
in the DetNet/TCQF forwarding code is shown in 
<xref target="FIG-Pseudocode"/>.</t>

<t>police(pak): If the router is not only the TCQF ingress router, but also
the first-hop router from the source, ingres_flow_enqueue(pak)
will also be the place where policing of the flows packet
according to the Traffic Specification of the flow would happen -
to ensure that packets violating the Traffic Specification
will not be forwarded, or be forwarded with lower priority
(e.g.: as best effort). This policing and resulting forwarding
action is not specific to TCQF and therefore out of scope for
this text. See <xref target="RFC9016"/>, section 5.5.</t>

<figure title="TCQF Ingress Pseudocode" anchor="FIG-Ingress-2-TCQF"><artwork><![CDATA[
void ingress_flow_2_tcqf(oif, cycle) {
  foreach flowid in flowq[oif][*] {
    free = tcqf.iflow[flowid].csize
    q = flowq[oif][flowid]
    while(notempty(q) &&
          (l = head(q).size) <= free) {
      pak = dequeue(q)
      free -= l
      tcqf_enqueue(pak, oif.cycleq[cycle,internal])
    }
  }
}
]]></artwork></figure>

<t>ingress_flow_2_tcqf(oif, cycle) as shown in
<xref target="FIG-Ingress-2-TCQF"/> transfers ingress DetNet flow
packets from their per-flow queue into the queue of the cycle
that will be sent next. The position of ingress_flow_2_tcqf() 
in the DetNet/TCQF forwarding code is shown in <xref target="FIG-Pseudocode"/>.</t>

</section>
</section>
<section anchor="implementation-deployment-operations-and-validation-considerations-informative"><name>Implementation, Deployment, Operations and Validation considerations (informative)</name>

<section anchor="high-speed-implementation"><name>High-Speed Implementation</name>

<t>High-speed implementations with programmable forwarding planes of TCQF
packet forwarding require Time-Gated Queues for the cycle queues,
such as introduced by <xref target="IEEE802.1Qbv"/> and also employed in CQF <xref target="IEEE802.1Qch"/>.</t>

<t>Compared to CQF, the accuracy of clock synchronization across the nodes
is reduced as explained in <xref target="calculation"/> below.</t>

<t>High-speed forwarding for ingress packets as specified in <xref target="ingress"/>
above would require to pass packets first into a per-flow queue and
then re-queue them into a cycle queue. This is not ideal for
high speed implementations.  The pseudocode for ingres_flow_enqueue()
and ingress_flow_2_tcqf(), like the rest of the pseudocode in this
document is only meant to serve as the most compact and hopefully
most easy to read specification of the desired externally observable
behavior of TCQF - but not as a guidance for implementation, especially not
for high-speed forwarding planes.</t>

<t>High-speed forward could be implemented with single-enqueueing into
cycle queues as follows:</t>

<t>Let B[f] be the maximum amount of data that the router would need to
buffer for ingress flow f at any point in time. This can be calculated
from the flows Traffic Specification. For example, when using the
parameters of <xref target="RFC9016"/>, section 5.5.</t>

<figure><artwork><![CDATA[
B[f] <= MaxPacketsPerInterval*MaxPayloadSize*8

maxcycles = max( ceil( B[f] / tcqf.iflow[f].csize) | f)
]]></artwork></figure>

<t>Maxcycles is the maximum number of cycles required so that packets
from all ingress flows can be directly enqueued into maxcycles queues.
The router would then not cycle across tcqf.cycles number of queues,
but across maxcycles number of queues, but still cycling across tcqf.cycles
number of cycle tags.</t>

<t>Calculation of B[f] and in result maxcycles may further be refined (lowered)
by additionally known constraints such as the bitrates of the ingress interface(s)
and TCQF output interface(s).</t>

</section>
<section anchor="calculation"><name>Controller plane computation of cycle mappings</name>

<t>The cycle mapping is computed by the controller plane by taking at minimum
the link, interface serialization and node internal forwarding latencies as well
as the cycle_clock_offsets into account.</t>

<figure title="Calculation reference" anchor="Calc1"><artwork><![CDATA[
Router  . O1
 R1     . | cycle 1 | cycle 2 | cycle 3 | cycle 1 |
        .    .
        .     ............... Delay D
        .                    .
        .                    O1'
        .                     | cycle 1 |
Router  .   | cycle 1 | cycle 2 | cycle 3 | cycle 1 |
  R2    .   O2

CT  = cycle_time
C   = cycles
CC  = CT * C
O1  = cycle_clock_offset router R1, interface towards R2
O2  = cycle_clock_offset router R2, output interface of interest
O1' = O1 + D
]]></artwork></figure>

<t>Consider in <xref target="Calc1"/> that Router R1 sends packets via C = 3 cycles with a
cycle_clock offset of O1 towards Router R2. These packets arrive
at R2 with a cycle_clock offset of O1' which includes through D all latencies
incurred between releasing a packet on R1 from the cycle buffer until
it can be put into a cycle buffer on R2: serialization delay on R1,
link delay, non_CQF delays in R1 and R2, especially forwarding in
R2, potentially across an internal fabric to the output interface
with the sending cycle buffers.</t>

<figure title="Calculating cycle mapping" anchor="Calc2"><artwork><![CDATA[
A = ( ceil( ( O1' - O2 ) / CT) + C + 1) mod CC
map(i) = (i - 1 + A) mod C + 1
]]></artwork></figure>

<t><xref target="Calc2"/> shows a formula to calculate the cycle mapping between
R1 and R2, using the first available cycle on R2. In the example
of <xref target="Calc1"/> with CT = 1, (O1' - O2) =~ 1.8, A will be 0, resulting
in map(1) to be 1, map(2) to be 2 and map(3) to be 3.</t>

<t>The offset "C" for the calculation of A is included so that
a negative (O1 - O2) will still lead to a positive A.</t>

<t>In general, D will be variable [Dmin...Dmax], for example because
of differences in serialization latency between min and max size
packets, variable link latency because of temperature based length
variations, link-layer variability (radio links) or in-router
processing variability. In addition, D also needs to account for the
drift between the synchronized clocks for R1 and R2. This
is called the Maximum Time Interval Error (MTIE).</t>

<t>Let A(d) be A where O1' is calculated with D = d. To account for
the variability of latency and clock synchronization, map(i) has to
be calculated with A(Dmax), and the controller plane needs to
ensure that that A(Dmin)...A(Dmax) does cover at most (C - 1) cycles.</t>

<t>If it does cover C cycles, then C and/or CT are chosen too small,
and the controller plane needs to use larger numbers for either.</t>

<t>This (C - 1) limitation is based on the understanding that there is only
one buffer for each cycle, so a cycle cannot receive packets
when it is sending packets. While this could be changed by
using double buffers, this would create additional implementation
complexity and not solve the limitation for all cases, because
the number of cycles to cover [Dmin...Dmax] could also be (C + 1)
or larger, in which case a tag of 1...C would not suffice.</t>

</section>
<section anchor="link-speed-and-bandwidth-sharing"><name>Link speed and bandwidth sharing</name>

<t>TCQF hops along a path do not need to have the same bitrate, they
just need to use the same cycle time. The controller plane has to then
be able to take the TCQF capacity of each hop into account when
admitting flows based on their Traffic Specification and TCQF csize.</t>

<t>TCQF does not require to be allocated 100% of the
link bitrate. When TCQF has to share a link with other traffic
classes, queuing just has to be set up to ensure that all
data of a TCQF cycle buffer can be sent within the TCQF
cycle time. For example by making the TCQF cycle queues the
highest priority queues and then limiting their capacity through
admission control to leave time for other queues to be served
as well.</t>

</section>
<section anchor="controller-plane-considerations"><name>Controller-plane considerations</name>

<t>TCQF is applicable to both centralized as well as decentralized/distributed
controller-plane models. From the perspective of the controller plane. If
the controller-plane is centralized, then it is logically very simple to
perform admission control for any additional flow by checking that there
is sufficient bandwidth for the amount of bits required for the flow on
every cycle along the intended path. Likewise, path computation can be
done to determine on which non-shortest path those resources are available.</t>

<t>More efficient use of resources can be achieved by considering that flows
with low bit rates would not need bits reserved in every cycle, but only in
every N'th cyce. This requires different gates on ingres to admit packets
from such flows than shown in this document and more complex admission control
that attempts for example to interleave multiple flows across different
set of cycles to as best as possible utilize all cycles. This is the same
complexity as possible in TSN technologies. Beside the admission control
and different ingres policing, such enhancements have no impact on the
per-hop TCQF forwarding and can thus potentially be added incrementally.</t>

<t>Decentralized or distributed controller planes including on-path, per-flow
signaling, such as one using the mechanisms of RSVP-TE, <xref target="RFC3209"/> is
equally feasible with TCQF. In this case one of the potential benefits of TCQ is not
leveraged, which is the complete removal of per-hop,per-flow awarenes on
each router. Nevertheless, the controller-plane only introduces the need
for this state maintenance into the control-plane of each router, but
does not change the TCQF forwarding plane, but maintains its per-hop, per-flow
non-stateful nature and resulting performance/cost benefits.</t>

</section>
<section anchor="validation"><name>Validation</name>

<t><xref target="LDN"/> describes an accurate simualtion based validation of TCQF 
and provides further details on the mathematical models.</t>

<t><eref target="https://ceni.org.cn/406.html">https://ceni.org.cn/406.html</eref> is a report summary of a
100Gbps link speed commercial router validation implementation of TCQF deployed and measured in a research
testbed with a range of up to 2000km across China, operated by the China Environment for Network Innovations (CENI).
The report also provides a reference to a more deteilled version of the report. Note that both reports are in chinese. 
TCQF is called DIP in these reports.</t>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>TBD.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document defines a new TCQF-Variant Option for the “Destination
Options and Hop-by-Hop Options” under the “Internet Protocol Version
6 (IPv6) Parameters” registry <xref target="IPV6-PARMS"/> with the suggested values
in <xref target="Fig9"/>.</t>

<figure title="TCQF Option Code in Destination Options and Hop-by-Hop Options" anchor="Fig9"><artwork><![CDATA[
+------+-----+-----+-------+--------------------+-------------+
| Hexa | act | chg | rest  | Description        | Reference   |
+------+-----+-----+-------+--------------------+-------------+
| 0xB1 | 10  | 1   | 10001 | TCQF Option        |this document|
+------+-----+-----+-------+--------------------+-------------+
]]></artwork></figure>

</section>
<section anchor="acknowledgement"><name>Acknowledgement</name>

<t>Many thanks for review by David Black (DetNet techadvisor).</t>

</section>
<section anchor="contributors"><name>Contributors</name>

<t>The following co-authors have contributed to this document.</t>

<t>Xiaoliang Zheng Huawei Email: zhengxiaoliang@huawei.com</t>

</section>
<section anchor="changelog"><name>Changelog</name>

<t>[RFC-editor: please remove]</t>

<t>Initial draft name: draft-eckert-detnet-mpls-tc-tcqf</t>

<t>00</t>

<t>Initial version</t>

<t>01</t>

<t>Added new co-author.</t>

<t>Changed Data Model to "Configuration Data Model",</t>

<t>and changed syntax from YANG tree to a non-YANG tree, removed empty section
targeted for YANG model. Reason: the configuration parameters that we need
to specify the forwarding behavior is only a subset of what likely would
be a good YANG model, and any work to define such a YANG model not necessary
to specify the algorithm would be scope creep for this specification. Better
done in a separate YANG document. 
Example additional YANG aspects for such a document are
how to map parameters to configuration/operational space, what additional
operational/monitoring parameter to support and how to map the
YANG objects required into various pre-existing YANG trees.</t>

<t>Improved text in forwarding section, simplified sentences, used simplified
configuration data model.</t>

<t>02</t>

<t>Refresh</t>

<t>03</t>

<t>Added ingress processing, and further implementation considerations.</t>

<t>New draft name: draft-eckert-detnet-tcqf</t>

<t>00</t>

<t>Added text for DSCP based tagging of IP/IPv6 packets, therefore changing the
original, MPLS-only centric scope of the document, necessitating a change
in name and title.</t>

<t>This was triggered by the observation of David Black at the IETF114 DetNet
meeting that with DetNet domains being single administrative domains, it
is not necessary to have standardized (cross administrative domain) DSCP
for the tagging of IP/IP6 packets for TCQF. Instead it is sufficient
to use EXP/LU DSCP code space and assignment of these is a local matter
of a domain as is that of TC values when MPLS is used. Standardized DSCP
in the other hand would have required likely work/oversight by TSVWG.</t>

<t>In any case, the authors feel that with this insight, there is no need to
constrain single-domain definition of TCQF to only MPLS, but instead both
MPLS and IP/IPv6 tagging can be easily specified in this one draft.</t>

<t>01</t>

<t>Added new co-author.</t>

<t>02</t>

<t>Attempt to resolve issues from https://github.com/toerless/detnet/issues/1.</t>

<t><list style="symbols">
  <t>Review from David Black, refine queueing/scheduling of pseudocode/explanation to highlight the non-sequential requirements.</t>
  <t>Comment from Lou Berger re. applicability of controller-plane resulting in new section about controller-plane.</t>
  <t>Reference to CENI chinese validation deployment.</t>
</list></t>

<t>03</t>

<t>Merged draft with draft-yizhou-detnet-ipv6-options-for-cqf-variant-02.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2474' target='https://www.rfc-editor.org/info/rfc2474'>
<front>
<title>Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
<author fullname='K. Nichols' initials='K.' surname='Nichols'><organization/></author>
<author fullname='S. Blake' initials='S.' surname='Blake'><organization/></author>
<author fullname='F. Baker' initials='F.' surname='Baker'><organization/></author>
<author fullname='D. Black' initials='D.' surname='Black'><organization/></author>
<date month='December' year='1998'/>
<abstract><t>This document defines the IP header field, called the DS (for differentiated services) field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2474'/>
<seriesInfo name='DOI' value='10.17487/RFC2474'/>
</reference>



<reference anchor='RFC3270' target='https://www.rfc-editor.org/info/rfc3270'>
<front>
<title>Multi-Protocol Label Switching (MPLS) Support of Differentiated Services</title>
<author fullname='F. Le Faucheur' initials='F.' surname='Le Faucheur'><organization/></author>
<author fullname='L. Wu' initials='L.' surname='Wu'><organization/></author>
<author fullname='B. Davie' initials='B.' surname='Davie'><organization/></author>
<author fullname='S. Davari' initials='S.' surname='Davari'><organization/></author>
<author fullname='P. Vaananen' initials='P.' surname='Vaananen'><organization/></author>
<author fullname='R. Krishnan' initials='R.' surname='Krishnan'><organization/></author>
<author fullname='P. Cheval' initials='P.' surname='Cheval'><organization/></author>
<author fullname='J. Heinanen' initials='J.' surname='Heinanen'><organization/></author>
<date month='May' year='2002'/>
<abstract><t>This document defines a flexible solution for support of Differentiated Services (Diff-Serv) over Multi-Protocol Label Switching (MPLS) networks.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3270'/>
<seriesInfo name='DOI' value='10.17487/RFC3270'/>
</reference>



<reference anchor='RFC8655' target='https://www.rfc-editor.org/info/rfc8655'>
<front>
<title>Deterministic Networking Architecture</title>
<author fullname='N. Finn' initials='N.' surname='Finn'><organization/></author>
<author fullname='P. Thubert' initials='P.' surname='Thubert'><organization/></author>
<author fullname='B. Varga' initials='B.' surname='Varga'><organization/></author>
<author fullname='J. Farkas' initials='J.' surname='Farkas'><organization/></author>
<date month='October' year='2019'/>
<abstract><t>This document provides the overall architecture for Deterministic Networking (DetNet), which provides a capability to carry specified unicast or multicast data flows for real-time applications with extremely low data loss rates and bounded latency within a network domain.  Techniques used include 1) reserving data-plane resources for individual (or aggregated) DetNet flows in some or all of the intermediate nodes along the path of the flow, 2) providing explicit routes for DetNet flows that do not immediately change with the network topology, and 3) distributing data from DetNet flow packets over time and/or space to ensure delivery of each packet's data in spite of the loss of a path.  DetNet operates at the IP layer and delivers service over lower-layer technologies such as MPLS and Time- Sensitive Networking (TSN) as defined by IEEE 802.1.</t></abstract>
</front>
<seriesInfo name='RFC' value='8655'/>
<seriesInfo name='DOI' value='10.17487/RFC8655'/>
</reference>



<reference anchor='RFC8200' target='https://www.rfc-editor.org/info/rfc8200'>
<front>
<title>Internet Protocol, Version 6 (IPv6) Specification</title>
<author fullname='S. Deering' initials='S.' surname='Deering'><organization/></author>
<author fullname='R. Hinden' initials='R.' surname='Hinden'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>This document specifies version 6 of the Internet Protocol (IPv6). It obsoletes RFC 2460.</t></abstract>
</front>
<seriesInfo name='STD' value='86'/>
<seriesInfo name='RFC' value='8200'/>
<seriesInfo name='DOI' value='10.17487/RFC8200'/>
</reference>



<reference anchor='RFC8964' target='https://www.rfc-editor.org/info/rfc8964'>
<front>
<title>Deterministic Networking (DetNet) Data Plane: MPLS</title>
<author fullname='B. Varga' initials='B.' role='editor' surname='Varga'><organization/></author>
<author fullname='J. Farkas' initials='J.' surname='Farkas'><organization/></author>
<author fullname='L. Berger' initials='L.' surname='Berger'><organization/></author>
<author fullname='A. Malis' initials='A.' surname='Malis'><organization/></author>
<author fullname='S. Bryant' initials='S.' surname='Bryant'><organization/></author>
<author fullname='J. Korhonen' initials='J.' surname='Korhonen'><organization/></author>
<date month='January' year='2021'/>
<abstract><t>This document specifies the Deterministic Networking (DetNet) data plane when operating over an MPLS Packet Switched Network.  It leverages existing pseudowire (PW) encapsulations and MPLS Traffic Engineering (MPLS-TE) encapsulations and mechanisms.  This document builds on the DetNet architecture and data plane framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='8964'/>
<seriesInfo name='DOI' value='10.17487/RFC8964'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC3209' target='https://www.rfc-editor.org/info/rfc3209'>
<front>
<title>RSVP-TE: Extensions to RSVP for LSP Tunnels</title>
<author fullname='D. Awduche' initials='D.' surname='Awduche'><organization/></author>
<author fullname='L. Berger' initials='L.' surname='Berger'><organization/></author>
<author fullname='D. Gan' initials='D.' surname='Gan'><organization/></author>
<author fullname='T. Li' initials='T.' surname='Li'><organization/></author>
<author fullname='V. Srinivasan' initials='V.' surname='Srinivasan'><organization/></author>
<author fullname='G. Swallow' initials='G.' surname='Swallow'><organization/></author>
<date month='December' year='2001'/>
<abstract><t>This document describes the use of RSVP (Resource Reservation Protocol), including all the necessary extensions, to establish label-switched paths (LSPs) in MPLS (Multi-Protocol Label Switching).  Since the flow along an LSP is completely identified by the label applied at the ingress node of the path, these paths may be treated as tunnels.  A key application of LSP tunnels is traffic engineering with MPLS as specified in RFC 2702.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3209'/>
<seriesInfo name='DOI' value='10.17487/RFC3209'/>
</reference>



<reference anchor='RFC4875' target='https://www.rfc-editor.org/info/rfc4875'>
<front>
<title>Extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for Point-to-Multipoint TE Label Switched Paths (LSPs)</title>
<author fullname='R. Aggarwal' initials='R.' role='editor' surname='Aggarwal'><organization/></author>
<author fullname='D. Papadimitriou' initials='D.' role='editor' surname='Papadimitriou'><organization/></author>
<author fullname='S. Yasukawa' initials='S.' role='editor' surname='Yasukawa'><organization/></author>
<date month='May' year='2007'/>
<abstract><t>This document describes extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for the set up of Traffic Engineered (TE) point-to-multipoint (P2MP) Label Switched Paths (LSPs) in Multi- Protocol Label Switching (MPLS) and Generalized MPLS (GMPLS) networks.  The solution relies on RSVP-TE without requiring a multicast routing protocol in the Service Provider core.  Protocol elements and procedures for this solution are described.</t><t>There can be various applications for P2MP TE LSPs such as IP multicast.  Specification of how such applications will use a P2MP TE LSP is outside the scope of this document.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4875'/>
<seriesInfo name='DOI' value='10.17487/RFC4875'/>
</reference>



<reference anchor='RFC8296' target='https://www.rfc-editor.org/info/rfc8296'>
<front>
<title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='J. Tantsura' initials='J.' surname='Tantsura'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<author fullname='I. Meilik' initials='I.' surname='Meilik'><organization/></author>
<date month='January' year='2018'/>
<abstract><t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a &quot;multicast domain&quot;, without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol.  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The details of the encapsulation depend on the type of network used to realize the multicast domain.  This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t></abstract>
</front>
<seriesInfo name='RFC' value='8296'/>
<seriesInfo name='DOI' value='10.17487/RFC8296'/>
</reference>



<reference anchor='RFC8402' target='https://www.rfc-editor.org/info/rfc8402'>
<front>
<title>Segment Routing Architecture</title>
<author fullname='C. Filsfils' initials='C.' role='editor' surname='Filsfils'><organization/></author>
<author fullname='S. Previdi' initials='S.' role='editor' surname='Previdi'><organization/></author>
<author fullname='L. Ginsberg' initials='L.' surname='Ginsberg'><organization/></author>
<author fullname='B. Decraene' initials='B.' surname='Decraene'><organization/></author>
<author fullname='S. Litkowski' initials='S.' surname='Litkowski'><organization/></author>
<author fullname='R. Shakir' initials='R.' surname='Shakir'><organization/></author>
<date month='July' year='2018'/>
<abstract><t>Segment Routing (SR) leverages the source routing paradigm.  A node steers a packet through an ordered list of instructions, called &quot;segments&quot;.  A segment can represent any instruction, topological or service based.  A segment can have a semantic local to an SR node or global within an SR domain.  SR provides a mechanism that allows a flow to be restricted to a specific topological path, while maintaining per-flow state only at the ingress node(s) to the SR domain.</t><t>SR can be directly applied to the MPLS architecture with no change to the forwarding plane.  A segment is encoded as an MPLS label.  An ordered list of segments is encoded as a stack of labels.  The segment to process is on the top of the stack.  Upon completion of a segment, the related label is popped from the stack.</t><t>SR can be applied to the IPv6 architecture, with a new type of routing header.  A segment is encoded as an IPv6 address.  An ordered list of segments is encoded as an ordered list of IPv6 addresses in the routing header.  The active segment is indicated by the Destination Address (DA) of the packet.  The next active segment is indicated by a pointer in the new routing header.</t></abstract>
</front>
<seriesInfo name='RFC' value='8402'/>
<seriesInfo name='DOI' value='10.17487/RFC8402'/>
</reference>



<reference anchor='RFC8938' target='https://www.rfc-editor.org/info/rfc8938'>
<front>
<title>Deterministic Networking (DetNet) Data Plane Framework</title>
<author fullname='B. Varga' initials='B.' role='editor' surname='Varga'><organization/></author>
<author fullname='J. Farkas' initials='J.' surname='Farkas'><organization/></author>
<author fullname='L. Berger' initials='L.' surname='Berger'><organization/></author>
<author fullname='A. Malis' initials='A.' surname='Malis'><organization/></author>
<author fullname='S. Bryant' initials='S.' surname='Bryant'><organization/></author>
<date month='November' year='2020'/>
<abstract><t>This document provides an overall framework for the Deterministic Networking (DetNet) data plane.  It covers concepts and considerations that are generally common to any DetNet data plane specification. It describes related Controller Plane considerations as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8938'/>
<seriesInfo name='DOI' value='10.17487/RFC8938'/>
</reference>



<reference anchor='RFC8986' target='https://www.rfc-editor.org/info/rfc8986'>
<front>
<title>Segment Routing over IPv6 (SRv6) Network Programming</title>
<author fullname='C. Filsfils' initials='C.' role='editor' surname='Filsfils'><organization/></author>
<author fullname='P. Camarillo' initials='P.' role='editor' surname='Camarillo'><organization/></author>
<author fullname='J. Leddy' initials='J.' surname='Leddy'><organization/></author>
<author fullname='D. Voyer' initials='D.' surname='Voyer'><organization/></author>
<author fullname='S. Matsushima' initials='S.' surname='Matsushima'><organization/></author>
<author fullname='Z. Li' initials='Z.' surname='Li'><organization/></author>
<date month='February' year='2021'/>
<abstract><t>The Segment Routing over IPv6 (SRv6) Network Programming framework enables a network operator or an application to specify a packet processing program by encoding a sequence of instructions in the IPv6 packet header.</t><t>Each instruction is implemented on one or several nodes in the network and identified by an SRv6 Segment Identifier in the packet.</t><t>This document defines the SRv6 Network Programming concept and specifies the base set of SRv6 behaviors that enables the creation of interoperable overlays with underlay optimization.</t></abstract>
</front>
<seriesInfo name='RFC' value='8986'/>
<seriesInfo name='DOI' value='10.17487/RFC8986'/>
</reference>



<reference anchor='RFC9016' target='https://www.rfc-editor.org/info/rfc9016'>
<front>
<title>Flow and Service Information Model for Deterministic Networking (DetNet)</title>
<author fullname='B. Varga' initials='B.' surname='Varga'><organization/></author>
<author fullname='J. Farkas' initials='J.' surname='Farkas'><organization/></author>
<author fullname='R. Cummings' initials='R.' surname='Cummings'><organization/></author>
<author fullname='Y. Jiang' initials='Y.' surname='Jiang'><organization/></author>
<author fullname='D. Fedyk' initials='D.' surname='Fedyk'><organization/></author>
<date month='March' year='2021'/>
<abstract><t>This document describes the flow and service information model for Deterministic Networking (DetNet). These models are defined for IP and MPLS DetNet data planes.</t></abstract>
</front>
<seriesInfo name='RFC' value='9016'/>
<seriesInfo name='DOI' value='10.17487/RFC9016'/>
</reference>



<reference anchor='RFC9320' target='https://www.rfc-editor.org/info/rfc9320'>
<front>
<title>Deterministic Networking (DetNet) Bounded Latency</title>
<author fullname='N. Finn' initials='N.' surname='Finn'><organization/></author>
<author fullname='J.-Y. Le Boudec' initials='J.-Y.' surname='Le Boudec'><organization/></author>
<author fullname='E. Mohammadpour' initials='E.' surname='Mohammadpour'><organization/></author>
<author fullname='J. Zhang' initials='J.' surname='Zhang'><organization/></author>
<author fullname='B. Varga' initials='B.' surname='Varga'><organization/></author>
<date month='November' year='2022'/>
<abstract><t>This document presents a timing model for sources, destinations, and Deterministic Networking (DetNet) transit nodes. Using the model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing methods. The methodology can be used by the management and control planes and by resource reservation algorithms to provide bounded latency and zero congestion loss for the DetNet service.</t></abstract>
</front>
<seriesInfo name='RFC' value='9320'/>
<seriesInfo name='DOI' value='10.17487/RFC9320'/>
</reference>


<reference anchor='I-D.ietf-bier-te-arch' target='https://datatracker.ietf.org/doc/html/draft-ietf-bier-te-arch-13'>
   <front>
      <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Michael Menth' initials='M.' surname='Menth'>
         <organization>University of Tuebingen</organization>
      </author>
      <author fullname='Gregory Cauchie' initials='G.' surname='Cauchie'>
         <organization>KOEVOO</organization>
      </author>
      <date day='25' month='April' year='2022'/>
      <abstract>
	 <t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for &quot;Bit Index Explicit Replication&quot; (BIER) packets (RFC 8279); it is called &quot;Tree Engineering for Bit Index Explicit Replication&quot; (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.

 BIER-TE introduces a new semantic for &quot;bit positions&quot; (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFERs). A BIER-TE &quot;packets BitString&quot; therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER &quot;subdomains&quot; (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the &quot;Interior Gateway Protocol&quot; (IGP).
	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-bier-te-arch-13'/>
   
</reference>


<reference anchor='I-D.eckert-detnet-bounded-latency-problems' target='https://datatracker.ietf.org/doc/html/draft-eckert-detnet-bounded-latency-problems-00'>
   <front>
      <title>Problems with existing DetNet bounded latency queuing mechanisms</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname='Stewart Bryant' initials='S.' surname='Bryant'>
         <organization>Stewart Bryant Ltd</organization>
      </author>
      <date day='12' month='July' year='2021'/>
      <abstract>
	 <t>   The purpose of this memo is to explain the challenges and limitations
   of existing (standardized) bounded latency queuing mechanisms for
   desirable (large scale) MPLS and/or IP based networks to allow them
   to support DetNet services.  These challenges relate to low-cost,
   high-speed hardware implementations, desirable network design
   approaches, system complexity, reliability, scalability, cost of
   signaling, performance and jitter experience for the DetNet
   applications.  Many of these problems are rooted in the use of per-
   hop, per-flow (DetNet) forwarding and queuing state, but highly
   accurate network wide time synchronization can be another challenge
   for some networks.

   This memo does not intend to propose a specific queuing solution, but
   in the same way in which it describes the challenges of mechanisms,
   it reviews how those problem are addressed by currently proposed new
   queuing mechanisms.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-eckert-detnet-bounded-latency-problems-00'/>
   
</reference>


<reference anchor='I-D.qiang-detnet-large-scale-detnet' target='https://datatracker.ietf.org/doc/html/draft-qiang-detnet-large-scale-detnet-05'>
   <front>
      <title>Large-Scale Deterministic IP Network</title>
      <author fullname='Li Qiang' initials='L.' surname='Qiang'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Xuesong Geng' initials='X.' surname='Geng'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Bingyang Liu' initials='B.' surname='Liu'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Liang Geng' initials='L.' surname='Geng'>
         <organization>China Mobile</organization>
      </author>
      <author fullname='Guangpeng Li' initials='G.' surname='Li'>
         </author>
      <date day='2' month='September' year='2019'/>
      <abstract>
	 <t>   This document presents the overall framework and key method for
   Large-scale Deterministic Network (LDN).  LDN can provide bounded
   latency and delay variation (jitter) without requiring precise time
   synchronization among nodes, or per-flow state in transit nodes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-qiang-detnet-large-scale-detnet-05'/>
   
</reference>


<reference anchor='I-D.dang-queuing-with-multiple-cyclic-buffers' target='https://datatracker.ietf.org/doc/html/draft-dang-queuing-with-multiple-cyclic-buffers-00'>
   <front>
      <title>A Queuing Mechanism with Multiple Cyclic Buffers</title>
      <author fullname='Bingyang Liu' initials='B.' surname='Liu'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Joanna Dang' initials='J.' surname='Dang'>
         <organization>Huawei</organization>
      </author>
      <date day='22' month='February' year='2021'/>
      <abstract>
	 <t>   This document presents a queuing mechanism with multiple cyclic
   buffers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-dang-queuing-with-multiple-cyclic-buffers-00'/>
   
</reference>


<reference anchor="IEEE802.1Q" target="https://doi.org/10.1109/ieeestd.2018.8403927">
  <front>
    <title>IEEE Standard for Local and Metropolitan Area Network — Bridges and Bridged Networks (IEEE Std 802.1Q)</title>
    <author >
      <organization>IEEE 802.1 Working Group</organization>
    </author>
    <date year="2018"/>
  </front>
  <seriesInfo name="doi" value="10.1109/ieeestd.2018.8403927"/>
</reference>
<reference anchor="IEEE802.1Qbv" >
  <front>
    <title>IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged Networks - Amendment 25: Enhancements for Scheduled Traffic</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2015"/>
  </front>
</reference>
<reference anchor="IEEE802.1Qch" >
  <front>
    <title>IEEE Std 802.1Qch-2017: IEEE Standard for Local and Metropolitan Area Networks - Bridges and Bridged Networks - Amendment 29: Cyclic Queuing and Forwarding</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="TSN-ATS" target="https://1.ieee802.org/tsn/802-1qcr/">
  <front>
    <title>P802.1Qcr - Bridges and Bridged Networks Amendment: Asynchronous Traffic Shaping</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <date year="2020" month="July" day="09"/>
  </front>
  <seriesInfo name="IEEE" value=""/>
</reference>
<reference anchor="IPV6-PARMS" target="https://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xhtml">
  <front>
    <title>Internet Protocol Version 6 (IPv6) Parameters</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="IANA" value=""/>
</reference>
<reference anchor="LDN" target="https://dl.ifip.org/db/conf/networking/networking2021/1570696888.pdf">
  <front>
    <title>Towards Large-Scale Deterministic IP Networks</title>
    <author initials="B." surname="Liu" fullname="Binyang Liu">
      <organization></organization>
    </author>
    <author initials="S." surname="Ren" fullname="Shoushou Ren">
      <organization></organization>
    </author>
    <author initials="C." surname="Wang" fullname="Chuang Wang">
      <organization></organization>
    </author>
    <author initials="V." surname="Angilella" fullname="Vincent Angilella">
      <organization></organization>
    </author>
    <author initials="P." surname="Medagliani" fullname="Paolo Medagliani">
      <organization></organization>
    </author>
    <author initials="S." surname="Martin" fullname="Sebastien Martin">
      <organization></organization>
    </author>
    <author initials="J." surname="Leguay" fullname="Jeremie Leguay">
      <organization></organization>
    </author>
    <date year="2021"/>
  </front>
  <seriesInfo name="IEEE" value="2021 IFIP Networking Conference (IFIP Networking)"/>
  <seriesInfo name="doi" value="10.23919/IFIPNetworking52078.2021.9472798"/>
</reference>
<reference anchor="multipleCQF" target="https://www.ieee802.org/1/files/public/docs2021/new-finn-multiple-CQF-0921-v02.pdf">
  <front>
    <title>Multiple Cyclic Queuing and Forwarding</title>
    <author initials="N." surname="Finn" fullname="Norm Finn">
      <organization></organization>
    </author>
    <date year="2021" month="October"/>
  </front>
</reference>


    </references>


<section anchor="multiple-buffer-cqf"><name>Multiple Buffer CQF</name>

<t>CQF with multiple buffers but without tagging has been proposed to IEEE TSN
in <xref target="multipleCQF"/>, but has not been adopted. Instead of relying on a cycle
tag in a packet header as proposed in this memo, it still relies solely on
the arrival time of packet, and can hence not equally resolve arrival time
ambiguities as TCQF can, because it does not know the cycle from which the packet was sent.</t>

<t>Consider that multiple buffer CQF is like TCQF, except the cycle id is
missing from the packet that is sent. Upon arrival at the receiving router,
the sending cycle ID has to be determined solely by the time the packet
is received (reception timestamp) because this time is an indicator of the
sending timestamp and hence the sending cycle. The sum of MTIE, processing
variation link propagation latency and other variations from layer 1 and layer
2 processing (forward error correction, retransmissions) is the erorr of
the sending time that the receiving router can determine. As soon as this
error is so large, that the receiving router can not unambiguously determine
a sending cycle, the mechanism does not work anymore. The receiving router can
also not simply assume for a packet to be sent by one of the possible cycles,
because when this is not the actul sending cycle, then such an assumption will
cause possible overruns of cycle buffers and hence failure of admission control
and pckets drop or congestiono
simply</t>

<t>for the 
The total</t>

<t>https://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xhtml</t>

</section>


  </back>

<!-- ##markdown-source:
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
m5Mn6LY1uFi1G2do1gI9sKvwWdADqbMv2LIsjaMd0b/Gb4ztSTB1aEh+/zVM
w7+e6diIHXznielfOQNJYzBqorUky5/CAJX0sIaAHbVH6+ZJtMQyyBX4D+NJ
/1EW+IFM8Gn2FC4o4FGYwriU+/tL8qkIEDcyq2Apn8OuIsh24IPZh4SlhQsD
T8sxWxdb+xVMTTBXlxGxteRmrhYjx29la4dyLpEYK8xHa1ii+ynH0DoDlBit
4ZpF/lqlaq1E91lKPCf+8Vj9lqTqtI20FvObbwjkbQMsWeu+lnVmEqtkxXMM
UT+J2gzDByOsMcpugWNQoBSrYRyMFx69RWcKH0m0HbPEwqoyyM8b4m5vvaN/
+/vJV8f/43T3hz9/xURmwTSmXnBg7lpa18Gd7zgK+kwp3T1DKi0oICE/+3qi
6vOsUp0e+/KqnHt2rftIBwk2+st/vVxoUIeRYbGP/RZCHNyTOPKF44cqzerm
3VyodivpygiEkoxHWUzQjkpLP+sPrf48jj3yy88uniW9Z8LH6H92dGuc9vvk
Jf32JENZD1m5bvsZp+LtWEuT/zzCTuvncVvHsYm454ure+W0i7z7X24i8Cen
P94jkHwWiW8tTUBmXtavo9+ecqiDSZThL9NstmjXQBEol77iS1Af2hWk9MVf
YjuOD9jnUF0r7CqWSq7l6ZrwGvGN66zcUF/FSrSGdjOft7XXkdWx3/HdQcd3
t90Y+/T77eROcje5l3yX3E8e/Jrv7Mx/5//JMB8SO6RzhObpZ8GAH4j9fDjm
ml5PZwg4keelmVVyMubPX3Q1ww6o/Zp/Wgvu390XvXt3BqSHoKcvin2UHNk4
oc0kx/w94dL+ztow//5FV/MFYKMl0e5Gdza6dnIl8f1Av5cMY/ZVfRsd8sPk
vuzd2/IsLEejMy30NfmRpavzx6RWrXgzJ4cvtOQYX0gfGsGUgoPvgrZ1o/Ky
sF5JsgAehDENtb1h2UV0EXwCwQWXRN5mWbFN9uToOcaeI3D/Mkt6fC1pFC7m
UDcasHYg6uajZH/PAt91y4zKvEHPSrioMo2hsauZFjwyyUnW8Q0R6xzy0zhg
HT2G0zSvxoOOVdAaHu1LOOq38UUyoEvlCBcgIssBfbeX+KbZ06KahHELnJcc
Hr9LkFXgOjcow2CWTRqOglRkV2M7I7/V2peboM2v9/s8SuNrMq/fIKt/oQq0
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
vctswmtO7c/DdzC3bm/9f4rckDwxFgEA

-->

</rfc>

