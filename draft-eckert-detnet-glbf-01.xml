<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.36 (Ruby 3.1.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-detnet-glbf-01" category="std" consensus="true" submissionType="IETF" tocDepth="5" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="detnet-glbf">Deterministic Networking (DetNet) Data Plane - guaranteed Latency Based Forwarding (gLBF) for bounded latency with low jitter and asynchronous forwarding in Deterministic Networks</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert" role="editor">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>alex@futurewei.com</email>
      </address>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization>Independent</organization>
      <address>
        <postal>
          <country>UK</country>
        </postal>
        <email>sb@stewartbryant.com</email>
      </address>
    </author>
    <author initials="S." surname="Hommes" fullname="Stefan Hommes">
      <organization>ZF Friedrichshafen AG</organization>
      <address>
        <postal>
          <country>DE</country>
        </postal>
        <email>stefan.hommes@zf.de</email>
      </address>
    </author>

    <date year="2023" month="July" day="07"/>

    
    <workgroup>DETNET</workgroup>
    

    <abstract>


<?line 212?>

<t>This memo proposes a mechanism called "guaranteed Latency Based Forwarding" (gLBF) as part of DetNet for hop-by-hop packet forwarding with per-hop deterministically bounded latency and minimal jitter.</t>

<t>gLBF is intended to be useful across a wide range of networks and applications with need for high-precision deterministic networking services, including in-car networks or networks used for industrial automation across on factory floors, all the way to ++100Gbps country-wide networks.</t>

<t>Contrary to other mechanisms, gLBF does not require network wide clock synchronization, nor does it need to maintain per-flow state at network nodes, avoiding drawbacks of other known methods while leveraging their advantages.</t>

<t>Specifically, gLBF uses the queuing model and calculus of Urgency Based Scheduling (UBS, <xref target="UBS"/>),
which is used by TSN Asynchronous Traffic Shaping <xref target="TSN-ATS"/>. gLBF is intended to be a plug-in replacement for
TSN-ATN or as a parallel mechanism beside TSN-ATS because it allows to keeping the same controller-plane
design which is selecting paths for TSN-ATS, sizing TSN-ATS queues, calculating latencies and admitting
flows to calculated paths for calculated latencies.</t>

<t>In addition to reducing the jitter compared to TSN-ATS by additional buffering (dampening) in the network,
gLBF also eliminates the need for per-flow, per-hop state maintenance required by TSN-ATS.  This avoids the need to signal per-flow state to every hop from the controller-plane and associated scaling problems.  It also reduces implementation cost for high-speed networking hardware due to the avoidance of additional high-speed speed read/write memory access to retrieve,
process and update per-flow state variables for a large number of flows.</t>



    </abstract>



  </front>

  <middle>


<?line 230?>

<section anchor="overview-informative"><name>Overview (informative)</name>

<section anchor="terminology"><name>Terminology</name>

<dl>
  <dt>CaaS</dt>
  <dd>
    <t>Control as a Service. Cloud (compute) and network services to enable control (loops) with network connected devices, for example cars.</t>
  </dd>
  <dt>CQF</dt>
  <dd>
    <t>Cyclic Queuing and Forwarding.  A queuing mechanism defined by annex T of IEEE802.1Q.</t>
  </dd>
  <dt>DT</dt>
  <dd>
    <t>Dead Time. A term from CQF indicating the time during each cycle in which no frames can be sent because the the receiving node could not receive it into the desired cycle buffer.</t>
  </dd>
  <dt>node</dt>
  <dd>
    <t>Term used to indicate a system that with respect to gLBF does not act as a host, aka: sender/receiver. This memo avoids the term router to avoid implying that this is an IP/IPv6 router, as opposed to an LSR (label switch router). Likewise, a node can also be an 802.1 bridge implementing gLBF.</t>
  </dd>
  <dt>TCQF</dt>
  <dd>
    <t>Tagged Cyclic Queuing and Forwarding. The mechanism specified in this memo.</t>
  </dd>
</dl>

</section>
<section anchor="summary"><name>Summary</name>

<t>This memo proposes a mechanism called "guaranteed Latency Based Forwarding" (gLBF) for
hop-by-hop packet forwarding with per-hop deterministically bounded latency and minimal jitter.</t>

<t>gLBF is intended to be useful across a wide range of networks and applications with need for high-precision deterministic networking services, including in-car networks or networks used for industrial automation across on factory floors, all the way to ++100Gbps country-wide networks.</t>

<t>At its foundation, gLBF addresses the problems of burst accumulation and jitter accumulation across multiple hops.</t>

<t>Burst accumulation is  the phenomenon in which bursts of packets from senders in admission-controlled network will increase across intermediate nodes. This can only be managed with exponential complexity in admission control processing and significantly worst-case increase in end-to-end latency and/or lowered maximum utilization. What is needed for dynamic, large-scale or easy to manage admission control solutions are forwarding mechanisms without this problem, so that admission control for bandwidth and jitter/buffer-requirements can be linear: decomposed into solely per-hop calculations independent of changes in prior-hop traffic characteristics. Without forwarding plane solutions to overcome burst accumulation, this is not possible</t>

<t>Existing solutions addressing burst-accumulation do this by maintaining inter-packet gaps on a per-flow basis, such as in TSN Asynchronous Traffic Shaping (TSN-ATS). gLBF instead ensures inter-packet gaps are always maintained without the need for per-flow state. The basic idea involves assigning a specific queuing delay budget for any given node and class of traffic. This budget is pre-known from admission control calculus.  As the packet is transmitted, the actual queuing delay that was experienced by the packet at the node is subtracted from that budget and carried in a new header field of the packet.  Upon receiving the packet, the subsequent node subjects the packet to a delay stage.  Here the packet needs to wait for the time specified by that parameter before the node proceeds with regular processing of the packet.  This way, any queuing delay variations are absorbed and deterministic delay without the possibility of burst accumulation can be achieved.</t>

<t>By addressing burst-accumulation, gLBF also overcomes the problem of jitter-accumulation. This is the second core problem of mechanisms such as TSN-ATS: Depending on the amount of competing admitted traffic on a hop at any point in time packets of a flow may experience zero to maximum delay across the hop. This is the per-hop jitter. This jitter is additive across multiple hope, resulting in the inability for applications requiring (near) synchronous packet delivery to solely rely on such mechanisms. It likewise limits the ability of high utilization of networks with large number of bounded latency flows.</t>

<t>The basic principle on which gLBF operates was already proposed by researchers in the early 1990th
and called "Dampers". These dampers where not pursued or adopted due to the lack of network equipment capabilities
back then.  Only with recent and upcoming improvements in advanced forwarding planes will it be possible to
build these technologies at scale and cost.</t>

<t>Contrary to other proposals, gLBF does not require network wide clock synchronization.  Likewise, it does not need to maintain per-flow state at network nodes, as delay budget and the queuing delay variations that are to be absorbed are carried as part of the packets themselves, making them "self-contained".  This eliminate the for the per-flow, per-hop state maintenance required by TSN-ATS, which involves
scaling problems of signaling this per-flow state to every hop from the controller-plane as well as the
high-speed networking hardware implementation cost of high-speed speed read/write memory access to retrieve,
process and update these per-flow state variables for large number of flows.</t>

<t>Opposed to other damper proposals, gLBF also supports the queuing model and calculus of Urgency Based Scheduling (UBS, <xref target="UBS"/>),
which is used by TSN-ATS. gLBF is intended to be a plug-in replacement for
TSN-ATN or as a parallel mechanism beside TSN-ATS because it allows to keeping the same controller-plane
design which is selecting paths for TSN-ATS, sizing TSN-ATS queues, calculating latencies and admitting
flows to calculated paths for calculated latencies.</t>

<t>While gLBF as presented here is intended for use with IETF forwarding protocols and to provide
DetNet QoS for bounded latency and lower bounded jitter, it would equally applicable to other forwarding
planes, such as IEEE 802.1 Ethernet switching - assuming appropriate packet headers are defined
to carry the hop-by-hop and end-to-end metadata required by the mechanism.</t>

</section>
<section anchor="application-scenarios-and-use-cases"><name>Application scenarios and use cases</name>

<t>gLBF addresses the same use cases that are targeted by deterministic networking and high-precision networking services in general.  Common requirements of those services involve the need to provide service levels within very tightly defined service level bounds, in particular very specific latencies without the possibility of congestion-induced loss.  The ability to provide services with corresponding service level guarantees enables many applications that would simply not be feasible without such guarantees.  The following describes some use cases and application scenarios.</t>

<t>The development towards autonomous driving vehicles leads to new requirements and a high demand of computational resources that are often not available within a car. A solution is to reduce the in-car processing to a minimum, and to offload more computational expensive tasks to the cloud environment. Due to the safety implications and use cases, a delay in the transport of message from the cloud to the car and vice versa is often not acceptable. This includes application scenarios such as trajectory planning for driverless vehicles, but also emergency notifications to surrounding cars that require a fast delivery of messages to prevent a delayed action in case of an accident. While the usage of TSN for in-vehicle networks is already investigated and more mature, the usage of a real-time communication with guaranteed latencies for vehicles with to the cloud is still an open challenge.</t>

<t>Another use case that is important for the automotive industry is to further optimise the manufacturing process by taking into account more data sources. Since most of the SCADA systems and PLCs cannot connect to large data lakes and perform more advanced computational jobs, a real-time communication to the shop floor from a cloud instance does have several benefits. First of all does it integrate more data into the decision making process, since the control algorithms to automate manufacturing sites located in a cloud environment can take into account more variables than single plant control systems. Another aspect is also to reduce the resources on a particular factory floor or plant by transferring complex, recurring and more resource computational jobs to a cloud provider where a lack of computational power is not the limiting factor. However, in such cases it is important that associated control can still occur in real-time and according to very precise timing constraints.  Such a development is already foreseen by trends such as Industry 4.0 and Control-as-a-Service (CaaS).</t>

</section>
<section anchor="background"><name>Background</name>

<t>The following background introduces and explains gLBF step by step.
It uses IEEE 802.1 "Time Sensitive Networking" (TSN) mechanisms for reference, because
at the time of this memo, TSN bounded latency mechanisms are the most commonly understood and
deployed mechanisms to provide bounded latency and jitter services.</t>

<t>All mechanisms compared here are as well as those used by TSN based on the overall service design
that traffic flows have a well-defined rate and burstyness, which are tracked by the controller-plane and
called here the "envelope" of the flow.</t>

<t>The traffic model used for gLBF is taken from UBS gives the flow a rate r [bps/sec] and
a burst size b [bits] and the traffic envelope condition is that the total number of
bits w(t) over a period t [sec] of for the flow must be equal to or smaller than (r * t + b).
In one typical case, a flow wants to send a packet of size b one every interval of p [sec].
This translates into a rate r = b / p for the flow because after the flow has sent the first packet
of b bits, it will take p seconds until (r * t) has a size of b again: (r * t) = ((b / p) * p).</t>

<t>The controller-plane uses this per-flow information to calculate for each flow a path with sufficient free bandwidth
and per-hop buffers so that the bounded end-to-end latency of packets can be guaranteed. It then
allocates bandwidth and buffer resources to the flow so that further flows will not impact it.</t>

<t>Within this framework, bounded latency mechanisms can in general be divided into "on-time" and "in-time"
mechanisms.</t>

<section anchor="in-time-mechanisms"><name>In-time mechanisms</name>

<t>"In-time" bounded latency mechanisms forward packets in an (almost) work conserving manner.</t>

<t>When there is no competing traffic in the network, packets of traffic flows that comply
to their admitted envelope are forwarded without any mechanism introduced queuing latency.
When the maximum amount of admitted traffic is present, then packets of admitted flows
will experience the maximum guaranteed, so-called bounded latency. In result, in-time mechanism
introduce the maximum amount of jitter because the amount of competing traffic can
quickly change and then the latency of packets will change greatly.</t>

<t>IEEE TSN Asynchronous Traffic Shaping is the prime example of
an in-time mechanism. IETF <xref target="RFC2212"/>, "Integrated Services" is an older mechanism
based on the same principles.  In-time mechanisms have the benefit of not requiring
clock-synchronization between nodes to support their queuing.</t>

</section>
<section anchor="on-time-mechanisms"><name>On-time mechanisms</name>

<t>On-time bounded latency mechanisms do deliver packets (near) synchronously with zero or a small
maximum jitter - significantly smaller than that of in-time mechanisms.</t>

<t>EEE TSN Cyclic Queuing and Forwarding (CQF) is an example of an on-time
mechanism as is the Tagged Cyclic Queuing and Forwarding (TCQF) mechanism proposed to DetNet.<br />
Unlike the before mentioned in-time mechanisms, these mechanisms require clock synchronization
between router.</t>

</section>
<section anchor="control-loops-vs-in-time-and-on-time"><name>Control loops vs. in-time and on-time</name>

<t>One set of applications that require or prefer on-time (low jitter) delivery of packets are
control loops in vehicles or industrial environments and hence low-speed and short-range networks.</t>

<t>Emerging or future use-cases such as remote PLC or remote driving extend these requirements also
into metropolitan scale networks. In these environments, on-time forwarding is also called
synchronous forwarding for synchronous control loops.</t>

<t>Typically, in synchronous control loops, central units such as Programmable Logic Controllers
(PLC) do control a set of sensors and actors, polling or periodically receiving status information
from sensors and sending action instructions to actors. When packet forwarding is
on-time (synchronous), this central unit does exactly know the time at which sensors
sent a packet and the time at which packets are received by actors and they can react on it.</t>

<t>These solutions do not require sensors and actors to have accurate, synchronised clocks. Instead,
the central unit can control the time at which sensor and actors perform their operations
within the accuracy of the (zero/low) jitter of the network packet transmission.</t>

<t>When bounded latency forwarding is (only) in-time, edge nodes in the network and/or sensors
and actors need to convert the packets arriving with high jitter into an on-time arrival model
to continue supporting this application required model.</t>

<t>This conversion is typically called a playout-buffer mechanism and involves the need to synchronizing time
between senders and receivers, and hence most commonly the need for the network to support clock
synchronization to support these edge devices and/or sender receivers.</t>

<t>In result, existing bounded latency mechanisms to support synchronous, on-time delivery of packets
do require clock synchronization across the network. In the existing mechanisms like CQF for
the forwarding mechanism itself, in the on-time mechanisms to synchronize edge-devices and hosts.</t>

</section>
<section anchor="challenges-with-network-wide-clock-synchronization"><name>Challenges with network wide clock synchronization</name>

<t>While clock synchronization is a well understood technology, it is also a significant operational
if not device equipment cost factor [TBD: Add details if desired].</t>

<t>Therefore, clock synchronization with e.g.: IEEE 1588 PTP is
only deployed where no simpler solutions exist that provide the same benefits but without
clock synchronization. Today this for example means that in mobile networks, only the so-called
fronthaul deploys clock synchronization, but not the backhaul.</t>

<t>In result, it could be a challenge
to introduce new applications such as the above mentioned remote PLC, driving applications if
they wanted to rely on a bounded latency network service. But even for existing markets such
as in-car or industrial networks, removal or reduction of the need for clock synchronization could
be a significant evolution to reduce cost and increase simplicity of solutions.</t>

</section>
</section>
</section>
<section anchor="glbf-introduction-informative"><name>gLBF introduction (informative)</name>

<section anchor="dampers"><name>Dampers</name>

<t>The principle of the mechanism presented here is the so-called "Damper" mechanism, first mentioned
in the early 1990th, but never standardized back then, primarily because the required forwarding
was considered to be too advanced to be supportable in equipment at the time. These limitations
are not starting to be resolved, and hence it seems like a good time to re-introduce this mechanism.</t>

<t>The principle of damper based forwarding is easily explained: When a packet is sent by a node A,
this node will have measured the latency L, how long the packet was processed by the node. The main factor
of L is  the queuing latency of the packet in A because of competing traffic sent to the
same outgoing interface. Based on the admission control and queuing algorithms used in the node, there
can be a known upper bound M(ax) for this processing latency though, and when the packet then arrives at the
next-hop receiving node B, this node will simply further delay the packet by (B-L), and in result
the packet will have synchronously been forwarded from A to B with a constant latency of M(ax).</t>

<figure title="Forwarding without Damper" anchor="FIG1"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+         +-+      |      |   +-+         +-+      |
|-x-|F|---------|Q|------|------|-x-|F|---------|Q|------|
|   +-+         +-+      | Link |   +-+         +-+      |
+------------------- ----+      +------------------------+
  |<--------- Hop A/B latency --->|
]]></artwork></figure>

<t><xref target="FIG1"/> shows a single hop from node A to node B without Dampers.</t>

<t>A receives a packet. The F)orwarding module determines some outgoing
interface towards node B where it is enqueued into Q because
competing packets may already be in line to be sent from Q to B.
This is because packets may be arriving simultaneously from multiple
different input interfaces on A (not shown in picture), and/or the
speed of the receiving interface on A is higher than the speed of the
link to B.</t>

<t>Forwarding F can be L2 switching and/or L3 routing, the choice does not
impact the considerations described here.</t>

<t>When the packet is finally sent from Q over link to B, B repeats the same steps
towards the next (not shown) node.</t>

<t>(x) is the reception time of
the packet in A and B, and the per-hop latency of the packet
is xB - xA, predominantly determined by the time the packet has
to wait in Q plus any other relevant processing latency, fixed or
variable from F plus the propagation latency of the packet across
link, which is predominantly determined by the serialization latency
of the packet plus the propagation latency of the link, which is
the speed of light in the material used, for example fiber, where
the speed of light is 31 percent slower than across vacuum.</t>

<t>All the factors impacting the hop A/B latency other than Q in A are
naturally bounded: A well defined maximum can be calculated or
overestimated. The transmission of the packet from A to B is composed
from the serialization latency of the packet which can be calculated
from the packet length of the packet and per-packet-bit speed of the
packet. The propagation latency through the link can be calculated from
speed of light and material (speed of light is 31% slower through fiber than
vacuum for example). And so on.</t>

<t>To have a guaranteed bounded latency through Q, an admission control
system is required that tracks, accounts and limits the total amount
of traffic through Q. Admission control mechanisms rely on knowing the
maximum amount of bursts that each traffic flow can cause and adding
up those bursts to determine the maximum amount of simultaneous packet data
in Q that therefore impacts the maximum latency of each individual packet
through Q.</t>

<t>With such an admission control system, one can therefore calculate
a maximum hop A/B propagation latency MAX for a packet, but 
packets will naturally have variable hop A/B latency lower than MAX,
based on differences in packet size and differences in competing
traffic. In result, their relative arrival times xB in B will be different
from their relative arrival times xA in A. This leads to so-called
"burst-aggregation" and hence the problem that the admission control
system can not easily calculate the maximum burst and latency
through Q in B as it can do for Q in A.</t>

<t>If however packets could be made to be forwarded such that
their Hop A/B latency would all be the same (synchronous, on-time), then the
admission control system could apply the same calculus to
B as it was able to apply to A. This is what damper mechanisms attempt to achieve.</t>

<figure title="Forwarding with Damper" anchor="FIG2"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+   +-+   +-+      |      |   +-+   +-+   +-+      |
|-x-|D|-y-|F|---|Q|------|------|-x-|D|-y-|F|---|Q|------|
|   +-+   +-+   +-+      | Link |   +-+   +-+   +-+      |
+------------------------+      +------------------------+
        |<- A/B in-time latency ->|
        |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG2"/> shows the most simple to explain, but not implement, Damper
mechanism to achieve exactly this. Node A measures the time at
xA, sends this value in a packet header to B. B measures the
time directly at reception of the packet in xB. It then delays
the packet for a time (MAX-(xB-yA)). In result, the latency
(yB-yA) will exactly be MAX, up to the accuracy of the damper.</t>

<t>The first challenge with simple approach is the need to synchronize
the clocks between A and B, so that (xB-yA) can correctly be calculated.</t>

<figure title="Forwarding with Damper and measuring" anchor="FIG3"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+   +-+   +-+      |      |   +-+   +-+   +-+      |
|-x-|D|-y-|F|---|Q|----z-|------|-x-|D|-y-|F|---|Q|----z-|
|   +-+   +-+   +-+      | Link |   +-+   +-+   +-+      |
+------------------------+      +------------------------+
        |<- A/B in-time latency ->|
        |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG3"/> shows how this can be resolved by also measuring the time
at z. A calculates d = (MAX1-(zA-yA)) and sends d in a header of the
packet to B. B then delays the packet in D by d relative to the also
locally measured time xB. Because the calculation of d in A and the
delay by d in D does not depend on clock synchronization between A
and B anymore, this approach eliminate the need for clock synchronization.</t>

<t>But in result of this change, the measurement of latency incurred by
transmitting the packet over link is also not included in this
approach.</t>

<t>MAX1 in this approach is the bounded latency for all processing of
a packet except for this link propagation latency P, equivalent to
the speed of light across the transmission medium times the length of the medium,
and MAX = MAX1 + P.</t>

<t>The serialization latencies latency across the sending interface
on A and the receiving interface on B can be included in MAX1 though.
It is only necessary for the measured timestamps zA and xB to
be the logically for the same point in time assuming the link had a minimum
length, e.g.: for a  back to back connection. For example, the reference
time is the time when the first bit of the packet can be observed
on the shortest wire between A an B. A can most likely measure zA only
some fixed offset o of time before r, hence needs to correct zA += o
before calculating d. Likewise, B could for example only measure xB
exactly after the whole packet arrived. this would be l * r later than
the reference time, where r is the serialization rate of the receiving
interface on B and l is the length of the packet. B would hence need
to adjust d -= l * r to subtract this time from the time the packet
needs to be delayed in D.</t>

<figure title="gLBF refined model" anchor="FIG4"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
| +-+    +-+   +-+   +-+ |      | +-+    +-+   +-+   +-+ |
|-|F|--x-|D|-y-|Q|-z-|M|-|------|-|F|--x-|D|-y-|Q|-z-|M|-|
| +-+    +-+   +-+   +-+ |      | +-+    +-+   +-+   +-+ |
+------------------------+      +------------------------+
       |<- Dampened Q ->|              |<- Dampened Q ->|
             |<- A/B in-time latency ->|
             |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG4"/> shows a further refined model for simpler implementation.
Larger routers/switches are typically modular, and forwarding
happens on a different modular component (such as a linecard)
than the queuing for the outgoing interface. Expecting clock
synchronization even within such a large device is undesirable.</t>

<t>In result, <xref target="FIG4"/> shows damper operation as occurring solely before
enqueuing packets into Q and after dequeuing them. The Damper
module measures the x timestamp, extracts d from the packet header,
adjusts it according to the above described considerations and then
delays the packet by that value and enqueues the packet afterwards. 
After the packet is dequeued, the Marking module measures the time
z, adjusts it according to the previously described considerations
calculates the value of d and overwrites the packet header before
sending the packet.</t>

</section>
<section anchor="dampers-and-controller-plane"><name>Dampers and controller-plane</name>

<figure title="Path selection and gLBF example" anchor="FIG5"><artwork><![CDATA[
         Controller-plane:
        Path Control  and
         Admission Control
      ..     .      .      ..
     .       .       .       . 
   +---+   +---+   +---+   +---+  Src---| A |---| B |---| C |---| D |
   +---+   +---+   +---+   +---+
     |       |       |       |
   +---+   +---+   +---+   +---+
   | E |---| F |---| G |---| H |--- Dst
   +---+   +---+   +---+   +---+
]]></artwork></figure>

<t>While the damper mechanism described so far can be realized with different
queuing mechanisms and hence different calculus for every interface
for which bounded latency can be supported, the role of the controller
plane involves other components beside admission control, and those
need to be possible to tightly be coupled with admission control for
efficient use of resources.</t>

<t><xref target="FIG5"/> shows the most common problem. The controller-plane needs to
provide for a new traffic flow from Src to Dst a path through the
network and reserve the resources. The most simple form for just bandwidth
reservation is called Constrained Shortest Path First (CSPF). With the
need to also provide end-to-end latency guarantees in support of bounded
latency, not only does the path calculation becomes more complex, but
many per-hop bounded latency queuing mechanisms support also to select
more than one per-hop latency on the hop, and the controller-plane
needs to determine for each hop of a possible hop, which one is best.</t>

<t>In result, the controller-plane needs to know exactly what parameters
the bounded latency queuing mechanism on each hop/interface can have
to perform these operations, and standardization of these parameters
ultimately results in standardizing the bounded latency queuing mechanism -
and not only the damper part.</t>

</section>
</section>
<section anchor="glbf-spec"><name>gLBF specification (normative)</name>

<section anchor="damper-with-ubs-queuingcalculus"><name>Damper with UBS queuing/calculus</name>

<t>guaranteed Latency Based Forwarding (gLBF) is using the queuing model
of Urgency Based Scheduling (UBS), which is also used in TSN
Asynchronus Traffic Shaping (TSN-ATS).  This allows gLBF to
re-use or co-develop one and the same controller-plane and its
optimization algorithms for bandwidth and latency control for
TSN-ATS or a DetNet L3 equivalent thereof and gLBF. Hence, gLBF
should provide the most easily operationalised on-time solution
for networks that want to evolve from an in-time model via TSN-ATS,
or that even would want to operate both options in parallel.</t>

<t>Effectively, gLBF replaces the per-flow interleaves regulators of UBS
with per-flow stateless damper operations. Where UBS only provides
for in-time latency guarantees, gLBF provides in result in-time
latency service, but with fundamentally the same calculus as UBS.</t>

<figure title="Path selection and gLBF example" anchor="FIG6"><artwork><![CDATA[
   +-----------------------------------------------+
   | UBS strict priority Queuing block             |
   |                                               |
   |               +--------------+   +----------+ |
   | +-------+   /-| Prio 1 queue |---|          | |
   | | Packet|  /  +--------------+   | Strict   | |
-->| | Prio  |->         ...         -| Priority | |--->
   | | enque |  \  +--------------+   | Schedule | |
   | +-------+   \-| Prio 8 queue |---|          | |
   |               +--------------+   +----------+ |
   +-----------------------------------------------+
]]></artwork></figure>

<t>Strict Priority Scheduling removes packets always from the
highest priority queue (1 is highest) that has a pending packet
and forward it. UBS defines two options for the traffic model
traffic flows. The more flexible one defines that each flow
specifies a rate r and a maximum burst size b (in bits).</t>

<t>In result, the bounded latency of a packet in priority 1 is (roughly)
the latency required to serialize the sum of the bursts 
of all the flows admitted into priority 1. The bounded latency of a packet
in priority 2 is that priority latency plus the latency required
to serialize the sum of the bursts of all the flows admitted into
priority 2. And so on.</t>

</section>
<section anchor="glbf-processing"><name>gLBF processing</name>

<t>The following text extends/refines the damper processing as necessary
for gLBF.</t>

<figure title="refined gLBF processing diagram" anchor="FIG7"><artwork><![CDATA[
   +------------------------+       +------------------------+ 
   | Node A                 |       | Node B                 |
   | +-+    +-+   +-+   +-+ |       | +-+    +-+   +-+   +-+ |
 --|-|F|--x-|D|-y-|Q|-z-|M|-|-------|-|F|--x-|D|-y-|Q|-z-|M|-|--->
IIF| +-+    +-+   +-+   +-+ |OIF IIF| +-+    +-+   +-+   +-+ |OIF
   +------------------------+       +------------------------+
          |<- Dampened Q ->|               |<- Dampened Q ->|
                |<- A/B in-time latency -->|
                |<--A/B on-time latency -------->|
]]></artwork></figure>

<t>The Delay module retrieves the delay from a packet header fields,
requirements for that packet header field are defined in <xref target="DM"/>.</t>

<t>Because serialization speeds on the Incoming InterFace (IIF) will be different
for different IIF, and because D will likely need to compensate the measured
time x based on the packet length and serialization speed, an internal
packet header should maintain this information. Note that this is solely
an implementation consideration and should not impact the configuration model
of gLBF.</t>

<t>The Queuing module is logically as described in UBS, except that
the priority of a packet in gLBF is not selected based on per-flow state,
but instead an appropriate packet header field of the packet is looked
up in the Packet Prio Enque stage of Q and the packet accordingly
enqueued based on that fields value. Possible options for indicating
such a priority in a packet header field are defined below in <xref target="DM"/>.</t>

<t>Like Q, M also needs to look up the packet priority to know MAX1 for
the packet and hence calculate d that it rewrites in the packet header.</t>

<t>The overall configuration data model to be defined for gLBF is hence
the configuration data model for UBS, which is a set of priority queues
and their maximum size, and in addition for gLBF for each of these
queues a controller-plane calculated MAX maximum latency value to be used
by M.</t>

<t>Given how the node knows the serialization speed of OIF, MAX1 for each of
the queues could automatically be derived from the maximum length in bytes
for each of the UBS priority queues, but this may not provide enough
flexibility for fine-tuning (TBD), especially when packet downgrade as
describe below is used.</t>

<t>TBD: paint a small yang-like data model, even though its trivial, like in the TCQF draft.
This should primarily include additional diagnostic data model elements,
such as maximum occupancy of any of the priority queus and number of overruns.</t>

</section>
<section anchor="error-handling"><name>Error handling</name>

<t>A well specified standard for a damper mechanism such as described in
this document needs to take care of error cases as well. The prime error
condition is, when the sending node A of a gLBF packet recognizes that
the packet was enqueued for longer than MAX1 and hence the to-be-calculated
delay to be put into the packet would have to be &lt; 0.</t>

<t>In this case, error signaling, such as ICMPv6/ICMP needs to be triggered
(throttled !), and the packet be discarded - to avoid failure of admission
control / congestion further down the path for other packets as well.</t>

<t>The data model (below) describes an optional data model that allows
instead of discarding of the packet to signal an ECN like mechanism together
with lower-priority forwarding of such packet to inform the receiver directly
about the problem and allow the application to deal with such conditions
better than through other error signaling.</t>

</section>
<section anchor="DM"><name>Data Model for gLBF packet metadata</name>

<t>gLBF is specifically designated to support per-hop, per-flow stateless
operations because it does not require any per-flow, but only per-packet
metadata for its processing. While it is possible to</t>

<section anchor="damper-24-bit-value-unit-1-usec"><name>damper:  24 bit value, unit 1 usec.</name>

<t>This is a value potentially different for every packet in a flow
and it is rewritten by every gLBF forwarder along the path.</t>

<t>gLBF requires a packet header indicating the delay that the damper
on the next hop needs to apply to the packet. Dampening only needs
to be accurate to the extent that synchronous delivery needs to be
accurate. A unit of 1 usec is considered today to be sufficient for
all purposes. The maximum size of delay is the maximum per-hop
queuing latency. 65 msec is considered to be much more than ever
desirable. Therefore, a 16 bit header field is sufficient.</t>

<t>Note that link propagation latency does not impact delay. Hence
the size of delay does not create any constraint on the length of links.</t>

</section>
<section anchor="end-to-end-priority-3-bits"><name>end-to-end-priority: 3 bits</name>

<t>This is a field that needs to be the same for all packets of
a flow so that they will be forwarded with the same latency
processing and hence do not incur different latencies and therefore
possible reordering. This field is written when the packet
enters the gLBF path and only read.</t>

<t>8 Priorities and hence 8 different latencies per hop are considered
sufficient on a per-hop basis. If prio is an end-to-end packet header 
field such as by using 8 different DSCP in IPv6/IP, this results in
8 different latency traffic classes.</t>

</section>
<section anchor="hop-by-hop-priority-3-bits-per-hop"><name>hop-by-hop-priority: 3 bits (per hop)</name>

<t>This is a better, more advanced alternative to the end-to-end-priority.
This data is optional. If it is present for a particular hop, then
it supersedes the end-to-end-priority.</t>

<t>Because this data is per-hop, it should not be encoded in an
end-to-end part of the packet header, but into a hop-by-hop part of the
header:</t>

<t>Because DetNet traffic needs the resources of each flow to be controlled,
re-routing of DetNet flows without the controller-plane is highly
undesirable and could easily result in congestion. A per-hop,
per-flow stateless forwarding mechanism such as SR-MPLS or SRv6 is
therefore highly desirable to provide a per-hop steering field. The priority
could easily be part of such a per-hop steering field by allocating
dynamically, or on-demand up to 8 different SID (Segment IDentifiers),
such as up to 8 MPLS labels, or using 3 bits of the parameter field
of IPv6 SIDs.</t>

<t>When such per-hop priority is indicated, the controller-plane can
support much more than 8 end-to-end latencies, simply by using different
per-hop latencies. For example one flow may use priority 1-1-1-1-1
across four hops, the new slower flow may use 1-2-1-2 across 4 hops,
the next one may use 2-2-2-2, and so on.</t>

</section>
<section anchor="phop-prio-3-bits"><name>phop-prio: 3 bits</name>

<t>This field is re-written on every hop when hop-by-hop-priorities are used.</t>

<t>This is an optional field which may be beneficial in and end-to-end
header if hop-by-hop priorities are used for forwarding in gLBF
and the hop-by-hop-priority of the packet on the prior hop is not
available from the hop-by-hop packet header anymore. This is typically
the case in MPLS based forwarding, such as SR-MPLS because this information
would have been removed. Note that this header field is only required
in support of optional simplified high-speed forwarding implementation
options.</t>

</section>
<section anchor="error-handling-data-items"><name>Error handling data items</name>

<t>Di: one bit</t>

<t>Downgrade intent. This bit is set when the packet enters the gLBF
domain and never changed.</t>

<t>Ds: one bit</t>

<t>Downgrade status. This bit is set to 0 when the packet enters the
gLBF domain and potentially changed to 1 by one gLBF forwarder
as described in the following.</t>

<t>When the Di bit is not set, and a gLBF forwarder recognizes that the
packet can not be forwarded within its guaranteed latency, the packet
is discarded and forwarding plane specific error signaling is triggered
(such as IGMP/ICMPv6). Discarding is done to avoid causing latency
errors further down the path because of this packet.</t>

<t>When this bit is set, the packet will not be discarded, but instead
the Ds bit is set to indicate that the packet must not be forwarded
with gLBF guaranteed latency anymore, but only with best or even
lower-than-best effort.</t>

<t>Di and DS may be encoded into the two ECN bits for IP/IPv6 dataplanes.
The required behavior should be backward compatible with existing
ECN implementations should the packet unexpected pass a router that
processes the packet not as gLBF.</t>

</section>
<section anchor="accuracy-and-sizing-of-the-damper-field-considerations"><name>Accuracy and sizing of the damper field considerations</name>

<t>This memo recommends that the damper field in packet headers has
a size of 24 bits or larger and represents the dampening time with
a resolution of 1 nsec. The following text explains the reasoning
for this recommendation.</t>

<t>The accuracy needed for the damper value in the packet header as well
as the internal calculations performed for gLBF depends on a variety of
factors. The most important factor is the accuracy of the provided
bounded latency as desired/required by the applications.</t>

<t>Even though Ethernet is defined as an asynchronous medium, the
clock accuracy is required to be +- 100 ppm (part per million). For a
1500 byte packet across a 100 Mbps Ethernet the propagation
latency difference between fastest and slowest clock is 24 nsec.
If gLBF is to be supported also on such slower speed networks with
multiple hops, then these errors may add up (?), and it is likely
not possible to provide end-to-end propagation latency accuracy
much better than 1 usec without requiring more transmission
accuracy through mechanisms such as PTP - which gLBF attempts
to avoid/minimize. For higher speed links, errors in short term
propagation latency variation becomes irrelevant though.</t>

<t>In WAN network deployments, propagation latency is in the order of
msec such as ca. 1 msec for 250 Km of fiber. Serialization latency
on a 1gbps Ethernet is ca. 1 usec for a 128 byte packet. It is
likely that an accuracy of propagation latency in the order of
1 usec is sufficient when the round-trip-time is potentially
1000 times faster.</t>

<t>In result of these two simple data points, we consider that the
accuracy of end-to-end propagation latency of interest is 1 usec.
To avoid introducing additive errors, the resolution
of the damper value needs to be higher. This memo therefore
considers to use 1 nsec resolution to represent damper values.
This too is the value used in PTP.</t>

<t>The maximum value and hence the size of the damper field in
packets depends on the maximum latency introduced in
buffering on the sending node plus smaller factors such
as serialization latency. This maximum is primarily depending
on the slowest links to be supported. A 128 byte packet
on a 100 Mbps link has ca. 10 usec propagation latency.
With just 16 bit damper value with nsec accuracy this would
allow only 6 packet buffers. This may be too low. Hence
the damper field should at minimum be at least 24 bits.</t>

</section>
</section>
<section anchor="ingress-and-egress-processing"><name>Ingress and Egress processing</name>

<section anchor="network-ingress-edge-policing"><name>Network ingress edge policing</name>

<t>When packets enter a gLBF domain from a prior hop,
such as a node from a different domain or a sending host, and that
prior hop is sending gLBF packet markings, then the timing
of the packet arrival as well as the markings in packet header(s) for
gLBF MUST only be observed when that prior hop is trusted by the gLBF domain</t>

<t>If the prior hop can not be trusted for correct marking and/or timing of
the packets, the first-hop gLBF node in the gLBF domain MUST implement
a per-flow policer for the flow to avoid that packets from such a prior hop will cause
problems with gLBF guarantees in the gLBF domain.</t>

<t>A policer is to be placed logically after the damper module of gLBF and 
before the queuing module.</t>

<t>Instead of a policer, the ingress edge node of the gLBF domain MAY instead
use a per-flow shaper or interleaved regulator. When a prior hop sends
for example packets of a flow with too high a rate, a shaper would
attempt to avoid discard packets from such a flow until also the burst size
of the flow is exceeded, by further delaying them. A policer would immediately
discard any packets that does not meet their flows envelope.</t>

</section>
<section anchor="glbf-sender-types"><name>gLBF sender types</name>

<section anchor="simple-glbf-senders"><name>Simple gLBF senders</name>

<t>Senders are expected to send their traffic flows such that their
relative timing complies to the admitted traffic envelope. Senders
that for example only send one flow, such as simple sensors or
actors, typically will be able to do this.</t>

<t>When senders can actually do this (send packets for gLBF with the
right timing), then these packets do not need to have gLBF packet header elements.
Instead, this ingress network node can calculate the damper time locally from
the following consideration to avoid any need for gLBF processing
in the sender.</t>

<t>The maximum gLBF damper time in this case is the serialization time of the largest packet
for gLBF received from the sender. Thus, when the sender sends smaller
packets than the maximum admitted packet size, then the first hop network
node needs to dampen packets based on that difference in serialization time.</t>

</section>
<section anchor="normal-glbf-senders"><name>Normal gLBF senders</name>

<t>When senders can not fully comply to send packets with their
admitted envelope, then they need to implement gLBF and indicate in the packet header the
gLBF damper value. For example, when the sender can not ensure that
at the target sending time of a gLBF packet the outgoing interface is
free, then that other still serializing packet will impact the timing
of the following packet(s) for gLBF. Another reason is when the sender has to send
packets from multiple flows and those can not or are are not generated in a coordinated
fashion to avoid delay, then they could compete on the outgoing interface
of the sender, introducing delay.</t>

<t>Normal gLBF senders simply need to implement the queue and marking stage
of gLBF, but not the dampening stage, because that only applies to receivers/forwarders.</t>

</section>
<section anchor="non-glbf-senders"><name>Non gLBF senders</name>

<t>When senders can not be simple gLBF senders but can also not
implement the gLBF queuing and marking stage, then the following
first hop node of the gLBF domain needs to treat them like untrusted
prior hop but always use a shaper or interleaved regulator so as not
to discard their packets.</t>

</section>
</section>
<section anchor="receivers-and-glbf"><name>receivers and gLBF</name>

<section anchor="normal-glbf-receivers"><name>Normal gLBF receivers</name>

<t>Normal gLBF receivers can process packet gLBF markings and need to 
therefore implement the gLBF dampening block.</t>

</section>
<section anchor="glbf-incapable-receivers"><name>gLBF incapable receivers</name>

<t>When receivers can not implement the gLBF dampening stage, then
the worst-case burst that may arrive at the receiver is to be
counted as added jitter to the end-to-end service.</t>

<t>It is impossible to let the network eliminate such bursts without
additional coordination and gating of packets across all senders
and their network ingress nodes by gating of those packets. This is
not a gLBF specific issue, but simply a limitation of the (near)
synchronous service model offered by gLBF and equally exists
in any delay and latency model with this type of service:</t>

<t>Consider a set of N senders conspire to generate a burst at the
same receiver. They do know from the admission control model the
latency each of them has to that receiver and can thus time the generation
of packets such that the last-hop router would have to send all those
N packets (one from each sender) in parallel on the interface. Which
is obviously not possible.</t>

<t>With gLBF capable receivers, this possible burst is taken into account
by including the latency introduced by such a worst-case burst into the
end-to-end latency through the controller-plane, and indicating the actual
latency that the packet needs to be dampened in the gLBF header field to the receiver.
But when the receiver does not support such dampening, then that
maximum last-hop burst-size simply turns into possible jitter.</t>

</section>
</section>
<section anchor="further-considerations"><name>Further considerations</name>

<t>A host may be a different type of gLBF sender than it is gLBF receiver.
In a common case in cloud applications, a container or VM in a data center
may the a sender/receiver, and such an application may be considered
to be trusted by the gLBF domain if it is an application of the network
operator itself (such as part of a higher level service of the network operator),
but not when it is a customer application.</t>

<t>gLBF marking needs to happen after contention of packets from all applications,
so it is something that can considered to happen inside the operating system.
This operating system of such a host may not (yet) implement gLBF, so
it may not be possible to correctly generate the gLBF marking as a sender.
Instead, the application may generate the appropriate packet markings for
steering and gLBF, but may need to leave the damper marking incorrect.</t>

<t>On the other hand, dampening received gLBF packets on a receiver can happen at the
application level, so that the operating system does not need to do it. Such
dampening is exactly the same functionality that in applications is normally
called "playout buffering", except that it will be a much smaller amount of
delay time because playout buffering needs to take the whole path delay into
account, whereas gLBF dampening is only for the prior hop.</t>

</section>
<section anchor="summary-1"><name>Summary</name>

<t>There is a non-trivial set of options for ingress/egress processing
that could be beneficial to simplify and secure dealing with different
type of sender and receivers.</t>

<t>Later versions of this memo can attempt
to define specific profiles of edge behavior to limit the recommended
set of implememtation options for sender/receivers and gLBF edge nodes.</t>

</section>
</section>
</section>
<section anchor="controller-plane-considerations-informative"><name>Controller-plane considerations (informative)</name>

<section anchor="glbf-versus-ubs-tsn-ats"><name>gLBF versus UBS / TSN-ATS</name>

<t>By relying on <xref target="UBS"/> for both the traffic model as well as the
bounded latency calculus, gLBF should be easy to operationalize
by relying on controller-plane implementations for TSN-ATS: UBS/TSN-ATS
and gLBF provide the same bounded latency and use the same model
to manage bandwidth for different flows: By calculating which
flow needs to go on which hop into which priority queues.</t>

<t>The main change to a UBS/TSN-ATS controller-plane when using gLBF
is that when a flow is to be admitted into the network, removed,
or rerouted. In UBS, each of these operations imply that the
controller-plane needs to signal to each node along the path
the traffic flow parameters so the forwarding plane can establish
the per-hop,per-flow state for the flow. Depending on network
configuration this will also imply configuration of the next-hop
for the flow for the routing.</t>

<t>For gLBF hop-by-hop operations, the first hop needs to receive
the per-path or per-hop priority information that is then imposed
into an appropriate packet header for the flows packets.</t>

</section>
<section anchor="first-hop-policing"><name>first-hop policing</name>

<t>In gLBF, the controller-plane has to perform this action only against
the ingress node to the gLBF domain. The traffic parameters such as
rate and burst size are only relevant to establish a policer so
that the flow can not violate the admitted traffic parameters for
the flow. This "policing" on the first hop is actually a function
independent of gLBF, UBS or any other method used across the path.</t>

</section>
<section anchor="path-steering"><name>path steering</name>

<t>gLBF operated independently of the path steering mechanism, but
the controller-plane will very likely want to ensure that gLBF
(or for that matter any DetNet) traffic does not unexpectedly gets
rerouted by in-networking routing mechanisms because normally
it will or can not reserve resources for such re-routed flows
on such arbitrary failure paths without significant additional
effort and/or waste of resources.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA considerations</name>

<t>None yet.</t>

</section>
<section anchor="changelog"><name>Changelog</name>

<t>[RFC-editor: please remove]</t>

<t>00 Initial version.</t>

<t>01 Added use cases from  Stefan</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor="RFC2210">
  <front>
    <title>The Use of RSVP with IETF Integrated Services</title>
    <author fullname="J. Wroclawski" initials="J." surname="Wroclawski"/>
    <date month="September" year="1997"/>
    <abstract>
      <t>This note describes the use of the RSVP resource reservation protocol with the Controlled-Load and Guaranteed QoS control services. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2210"/>
  <seriesInfo name="DOI" value="10.17487/RFC2210"/>
</reference>

<reference anchor="RFC2212">
  <front>
    <title>Specification of Guaranteed Quality of Service</title>
    <author fullname="S. Shenker" initials="S." surname="Shenker"/>
    <author fullname="C. Partridge" initials="C." surname="Partridge"/>
    <author fullname="R. Guerin" initials="R." surname="Guerin"/>
    <date month="September" year="1997"/>
    <abstract>
      <t>This memo describes the network element behavior required to deliver a guaranteed service (guaranteed delay and bandwidth) in the Internet. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2212"/>
  <seriesInfo name="DOI" value="10.17487/RFC2212"/>
</reference>

<reference anchor="RFC2474">
  <front>
    <title>Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
    <author fullname="K. Nichols" initials="K." surname="Nichols"/>
    <author fullname="S. Blake" initials="S." surname="Blake"/>
    <author fullname="F. Baker" initials="F." surname="Baker"/>
    <author fullname="D. Black" initials="D." surname="Black"/>
    <date month="December" year="1998"/>
    <abstract>
      <t>This document defines the IP header field, called the DS (for differentiated services) field. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2474"/>
  <seriesInfo name="DOI" value="10.17487/RFC2474"/>
</reference>

<reference anchor="RFC3270">
  <front>
    <title>Multi-Protocol Label Switching (MPLS) Support of Differentiated Services</title>
    <author fullname="F. Le Faucheur" initials="F." role="editor" surname="Le Faucheur"/>
    <author fullname="L. Wu" initials="L." surname="Wu"/>
    <author fullname="B. Davie" initials="B." surname="Davie"/>
    <author fullname="S. Davari" initials="S." surname="Davari"/>
    <author fullname="P. Vaananen" initials="P." surname="Vaananen"/>
    <author fullname="R. Krishnan" initials="R." surname="Krishnan"/>
    <author fullname="P. Cheval" initials="P." surname="Cheval"/>
    <author fullname="J. Heinanen" initials="J." surname="Heinanen"/>
    <date month="May" year="2002"/>
    <abstract>
      <t>This document defines a flexible solution for support of Differentiated Services (Diff-Serv) over Multi-Protocol Label Switching (MPLS) networks. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="3270"/>
  <seriesInfo name="DOI" value="10.17487/RFC3270"/>
</reference>

<reference anchor="RFC8655">
  <front>
    <title>Deterministic Networking Architecture</title>
    <author fullname="N. Finn" initials="N." surname="Finn"/>
    <author fullname="P. Thubert" initials="P." surname="Thubert"/>
    <author fullname="B. Varga" initials="B." surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <date month="October" year="2019"/>
    <abstract>
      <t>This document provides the overall architecture for Deterministic Networking (DetNet), which provides a capability to carry specified unicast or multicast data flows for real-time applications with extremely low data loss rates and bounded latency within a network domain. Techniques used include 1) reserving data-plane resources for individual (or aggregated) DetNet flows in some or all of the intermediate nodes along the path of the flow, 2) providing explicit routes for DetNet flows that do not immediately change with the network topology, and 3) distributing data from DetNet flow packets over time and/or space to ensure delivery of each packet's data in spite of the loss of a path. DetNet operates at the IP layer and delivers service over lower-layer technologies such as MPLS and Time- Sensitive Networking (TSN) as defined by IEEE 802.1.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8655"/>
  <seriesInfo name="DOI" value="10.17487/RFC8655"/>
</reference>

<reference anchor="RFC8200">
  <front>
    <title>Internet Protocol, Version 6 (IPv6) Specification</title>
    <author fullname="S. Deering" initials="S." surname="Deering"/>
    <author fullname="R. Hinden" initials="R." surname="Hinden"/>
    <date month="July" year="2017"/>
    <abstract>
      <t>This document specifies version 6 of the Internet Protocol (IPv6). It obsoletes RFC 2460.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="86"/>
  <seriesInfo name="RFC" value="8200"/>
  <seriesInfo name="DOI" value="10.17487/RFC8200"/>
</reference>

<reference anchor="RFC8964">
  <front>
    <title>Deterministic Networking (DetNet) Data Plane: MPLS</title>
    <author fullname="B. Varga" initials="B." role="editor" surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <author fullname="L. Berger" initials="L." surname="Berger"/>
    <author fullname="A. Malis" initials="A." surname="Malis"/>
    <author fullname="S. Bryant" initials="S." surname="Bryant"/>
    <author fullname="J. Korhonen" initials="J." surname="Korhonen"/>
    <date month="January" year="2021"/>
    <abstract>
      <t>This document specifies the Deterministic Networking (DetNet) data plane when operating over an MPLS Packet Switched Network. It leverages existing pseudowire (PW) encapsulations and MPLS Traffic Engineering (MPLS-TE) encapsulations and mechanisms. This document builds on the DetNet architecture and data plane framework.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8964"/>
  <seriesInfo name="DOI" value="10.17487/RFC8964"/>
</reference>




    </references>

    <references title='Informative References'>



<reference anchor="RFC3209">
  <front>
    <title>RSVP-TE: Extensions to RSVP for LSP Tunnels</title>
    <author fullname="D. Awduche" initials="D." surname="Awduche"/>
    <author fullname="L. Berger" initials="L." surname="Berger"/>
    <author fullname="D. Gan" initials="D." surname="Gan"/>
    <author fullname="T. Li" initials="T." surname="Li"/>
    <author fullname="V. Srinivasan" initials="V." surname="Srinivasan"/>
    <author fullname="G. Swallow" initials="G." surname="Swallow"/>
    <date month="December" year="2001"/>
    <abstract>
      <t>This document describes the use of RSVP (Resource Reservation Protocol), including all the necessary extensions, to establish label-switched paths (LSPs) in MPLS (Multi-Protocol Label Switching). Since the flow along an LSP is completely identified by the label applied at the ingress node of the path, these paths may be treated as tunnels. A key application of LSP tunnels is traffic engineering with MPLS as specified in RFC 2702. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="3209"/>
  <seriesInfo name="DOI" value="10.17487/RFC3209"/>
</reference>

<reference anchor="RFC4875">
  <front>
    <title>Extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for Point-to-Multipoint TE Label Switched Paths (LSPs)</title>
    <author fullname="R. Aggarwal" initials="R." role="editor" surname="Aggarwal"/>
    <author fullname="D. Papadimitriou" initials="D." role="editor" surname="Papadimitriou"/>
    <author fullname="S. Yasukawa" initials="S." role="editor" surname="Yasukawa"/>
    <date month="May" year="2007"/>
    <abstract>
      <t>This document describes extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for the set up of Traffic Engineered (TE) point-to-multipoint (P2MP) Label Switched Paths (LSPs) in Multi- Protocol Label Switching (MPLS) and Generalized MPLS (GMPLS) networks. The solution relies on RSVP-TE without requiring a multicast routing protocol in the Service Provider core. Protocol elements and procedures for this solution are described.</t>
      <t>There can be various applications for P2MP TE LSPs such as IP multicast. Specification of how such applications will use a P2MP TE LSP is outside the scope of this document. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="4875"/>
  <seriesInfo name="DOI" value="10.17487/RFC4875"/>
</reference>

<reference anchor="RFC8296">
  <front>
    <title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
    <author fullname="IJ. Wijnands" initials="IJ." role="editor" surname="Wijnands"/>
    <author fullname="E. Rosen" initials="E." role="editor" surname="Rosen"/>
    <author fullname="A. Dolganow" initials="A." surname="Dolganow"/>
    <author fullname="J. Tantsura" initials="J." surname="Tantsura"/>
    <author fullname="S. Aldrin" initials="S." surname="Aldrin"/>
    <author fullname="I. Meilik" initials="I." surname="Meilik"/>
    <date month="January" year="2018"/>
    <abstract>
      <t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a "multicast domain", without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol. When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent. The ingress router then encapsulates the packet in a BIER header. The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header. The details of the encapsulation depend on the type of network used to realize the multicast domain. This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8296"/>
  <seriesInfo name="DOI" value="10.17487/RFC8296"/>
</reference>

<reference anchor="RFC8402">
  <front>
    <title>Segment Routing Architecture</title>
    <author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"/>
    <author fullname="S. Previdi" initials="S." role="editor" surname="Previdi"/>
    <author fullname="L. Ginsberg" initials="L." surname="Ginsberg"/>
    <author fullname="B. Decraene" initials="B." surname="Decraene"/>
    <author fullname="S. Litkowski" initials="S." surname="Litkowski"/>
    <author fullname="R. Shakir" initials="R." surname="Shakir"/>
    <date month="July" year="2018"/>
    <abstract>
      <t>Segment Routing (SR) leverages the source routing paradigm. A node steers a packet through an ordered list of instructions, called "segments". A segment can represent any instruction, topological or service based. A segment can have a semantic local to an SR node or global within an SR domain. SR provides a mechanism that allows a flow to be restricted to a specific topological path, while maintaining per-flow state only at the ingress node(s) to the SR domain.</t>
      <t>SR can be directly applied to the MPLS architecture with no change to the forwarding plane. A segment is encoded as an MPLS label. An ordered list of segments is encoded as a stack of labels. The segment to process is on the top of the stack. Upon completion of a segment, the related label is popped from the stack.</t>
      <t>SR can be applied to the IPv6 architecture, with a new type of routing header. A segment is encoded as an IPv6 address. An ordered list of segments is encoded as an ordered list of IPv6 addresses in the routing header. The active segment is indicated by the Destination Address (DA) of the packet. The next active segment is indicated by a pointer in the new routing header.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8402"/>
  <seriesInfo name="DOI" value="10.17487/RFC8402"/>
</reference>

<reference anchor="RFC8754">
  <front>
    <title>IPv6 Segment Routing Header (SRH)</title>
    <author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"/>
    <author fullname="D. Dukes" initials="D." role="editor" surname="Dukes"/>
    <author fullname="S. Previdi" initials="S." surname="Previdi"/>
    <author fullname="J. Leddy" initials="J." surname="Leddy"/>
    <author fullname="S. Matsushima" initials="S." surname="Matsushima"/>
    <author fullname="D. Voyer" initials="D." surname="Voyer"/>
    <date month="March" year="2020"/>
    <abstract>
      <t>Segment Routing can be applied to the IPv6 data plane using a new type of Routing Extension Header called the Segment Routing Header (SRH). This document describes the SRH and how it is used by nodes that are Segment Routing (SR) capable.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8754"/>
  <seriesInfo name="DOI" value="10.17487/RFC8754"/>
</reference>

<reference anchor="RFC8938">
  <front>
    <title>Deterministic Networking (DetNet) Data Plane Framework</title>
    <author fullname="B. Varga" initials="B." role="editor" surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <author fullname="L. Berger" initials="L." surname="Berger"/>
    <author fullname="A. Malis" initials="A." surname="Malis"/>
    <author fullname="S. Bryant" initials="S." surname="Bryant"/>
    <date month="November" year="2020"/>
    <abstract>
      <t>This document provides an overall framework for the Deterministic Networking (DetNet) data plane. It covers concepts and considerations that are generally common to any DetNet data plane specification. It describes related Controller Plane considerations as well.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8938"/>
  <seriesInfo name="DOI" value="10.17487/RFC8938"/>
</reference>

<reference anchor="RFC8986">
  <front>
    <title>Segment Routing over IPv6 (SRv6) Network Programming</title>
    <author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"/>
    <author fullname="P. Camarillo" initials="P." role="editor" surname="Camarillo"/>
    <author fullname="J. Leddy" initials="J." surname="Leddy"/>
    <author fullname="D. Voyer" initials="D." surname="Voyer"/>
    <author fullname="S. Matsushima" initials="S." surname="Matsushima"/>
    <author fullname="Z. Li" initials="Z." surname="Li"/>
    <date month="February" year="2021"/>
    <abstract>
      <t>The Segment Routing over IPv6 (SRv6) Network Programming framework enables a network operator or an application to specify a packet processing program by encoding a sequence of instructions in the IPv6 packet header.</t>
      <t>Each instruction is implemented on one or several nodes in the network and identified by an SRv6 Segment Identifier in the packet.</t>
      <t>This document defines the SRv6 Network Programming concept and specifies the base set of SRv6 behaviors that enables the creation of interoperable overlays with underlay optimization.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8986"/>
  <seriesInfo name="DOI" value="10.17487/RFC8986"/>
</reference>

<reference anchor="RFC9016">
  <front>
    <title>Flow and Service Information Model for Deterministic Networking (DetNet)</title>
    <author fullname="B. Varga" initials="B." surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <author fullname="R. Cummings" initials="R." surname="Cummings"/>
    <author fullname="Y. Jiang" initials="Y." surname="Jiang"/>
    <author fullname="D. Fedyk" initials="D." surname="Fedyk"/>
    <date month="March" year="2021"/>
    <abstract>
      <t>This document describes the flow and service information model for Deterministic Networking (DetNet). These models are defined for IP and MPLS DetNet data planes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9016"/>
  <seriesInfo name="DOI" value="10.17487/RFC9016"/>
</reference>

<reference anchor="RFC9262">
  <front>
    <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
    <author fullname="T. Eckert" initials="T." role="editor" surname="Eckert"/>
    <author fullname="M. Menth" initials="M." surname="Menth"/>
    <author fullname="G. Cauchie" initials="G." surname="Cauchie"/>
    <date month="October" year="2022"/>
    <abstract>
      <t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for "Bit Index Explicit Replication" (BIER) packets (RFC 8279); it is called "Tree Engineering for Bit Index Explicit Replication" (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.</t>
      <t>BIER-TE introduces a new semantic for "bit positions" (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate "Bit-Forwarding Egress Routers" (BFERs). A BIER-TE "packets BitString" therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER "subdomains" (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the "Interior Gateway Protocol" (IGP).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9262"/>
  <seriesInfo name="DOI" value="10.17487/RFC9262"/>
</reference>

<reference anchor="RFC9320">
  <front>
    <title>Deterministic Networking (DetNet) Bounded Latency</title>
    <author fullname="N. Finn" initials="N." surname="Finn"/>
    <author fullname="J.-Y. Le Boudec" initials="J.-Y." surname="Le Boudec"/>
    <author fullname="E. Mohammadpour" initials="E." surname="Mohammadpour"/>
    <author fullname="J. Zhang" initials="J." surname="Zhang"/>
    <author fullname="B. Varga" initials="B." surname="Varga"/>
    <date month="November" year="2022"/>
    <abstract>
      <t>This document presents a timing model for sources, destinations, and Deterministic Networking (DetNet) transit nodes. Using the model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing methods. The methodology can be used by the management and control planes and by resource reservation algorithms to provide bounded latency and zero congestion loss for the DetNet service.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9320"/>
  <seriesInfo name="DOI" value="10.17487/RFC9320"/>
</reference>


<reference anchor="SCQF">
   <front>
      <title>Segment Routing (SR) Based Bounded Latency</title>
      <author fullname="Mach Chen" initials="M." surname="Chen">
         <organization>Huawei</organization>
      </author>
      <author fullname="Xuesong Geng" initials="X." surname="Geng">
         <organization>Huawei</organization>
      </author>
      <author fullname="Zhenqiang Li" initials="Z." surname="Li">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Jinoo Joung" initials="J." surname="Joung">
         <organization>Sangmyung University</organization>
      </author>
      <author fullname="Jeong-dong Ryoo" initials="J." surname="Ryoo">
         <organization>ETRI</organization>
      </author>
      <date day="7" month="July" year="2023"/>
      <abstract>
	 <t>   One of the goals of DetNet is to provide bounded end-to-end latency
   for critical flows.  This document defines how to leverage Segment
   Routing (SR) to implement bounded latency.  Specifically, the SR
   Identifier (SID) is used to specify transmission time (cycles) of a
   packet.  When forwarding devices along the path follow the
   instructions carried in the packet, the bounded latency is achieved.
   This is called Cycle Specified Queuing and Forwarding (CSQF) in this
   document.

   Since SR is a source routing technology, no per-flow state is
   maintained at intermediate and egress nodes, SR-based CSQF naturally
   supports flow aggregation that is deemed to be a key capability to
   allow DetNet to scale to large networks.


	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-chen-detnet-sr-based-bounded-latency-03"/>
   
</reference>


<reference anchor="LSDN">
   <front>
      <title>Large-Scale Deterministic IP Network</title>
      <author fullname="Li Qiang" initials="L." surname="Qiang">
         <organization>Huawei</organization>
      </author>
      <author fullname="Xuesong Geng" initials="X." surname="Geng">
         <organization>Huawei</organization>
      </author>
      <author fullname="Bingyang Liu" initials="B." surname="Liu">
         <organization>Huawei</organization>
      </author>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Huawei</organization>
      </author>
      <author fullname="Liang Geng" initials="L." surname="Geng">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Guangpeng Li" initials="G." surname="Li">
         </author>
      <date day="2" month="September" year="2019"/>
      <abstract>
	 <t>   This document presents the overall framework and key method for
   Large-scale Deterministic Network (LDN).  LDN can provide bounded
   latency and delay variation (jitter) without requiring precise time
   synchronization among nodes, or per-flow state in transit nodes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-qiang-detnet-large-scale-detnet-05"/>
   
</reference>


<reference anchor="TCQF">
   <front>
      <title>Deterministic Networking (DetNet) Data Plane - Tagged Cyclic Queuing and Forwarding (TCQF) for bounded latency with low jitter in large scale DetNets</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname="Yizhou Li" initials="Y." surname="Li">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Stewart Bryant" initials="S." surname="Bryant">
         <organization>University of Surrey ICS</organization>
      </author>
      <author fullname="Andrew G. Malis" initials="A. G." surname="Malis">
         <organization>Malis Consulting</organization>
      </author>
      <author fullname="Jeong-dong Ryoo" initials="J." surname="Ryoo">
         <organization>ETRI</organization>
      </author>
      <author fullname="Peng Liu" initials="P." surname="Liu">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Guangpeng Li" initials="G." surname="Li">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Shoushou Ren" initials="S." surname="Ren">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Fan Yang" initials="F." surname="Yang">
         <organization>Huawei Technologies</organization>
      </author>
      <date day="19" month="June" year="2023"/>
      <abstract>
	 <t>   This memo specifies a forwarding method for bounded latency and
   bounded jitter for Deterministic Networks and is a variant of the
   IEEE TSN Cyclic Queuing and Forwarding (CQF) method.  Tagged CQF
   (TCQF) supports more than 2 cycles and indicates the cycle number via
   an existing or new packet header field called the tag to replace the
   cycle mapping in CQF which is based purely on synchronized reception
   clock.

   This memo standardizes TCQF as a mechanism independent of the tagging
   method used.  It also specifies tagging via the (1) the existing MPLS
   packet Traffic Class (TC) field for MPLS packets, (2) the IP/IPv6
   DSCP field for IP/IPv6 packets, and (3) a new TCQF Option header for
   IPv6 packets.

   Target benefits of TCQF include low end-to-end jitter, ease of high-
   speed hardware implementation, optional ability to support large
   number of flow in large networks via DiffServ style aggregation by
   applying TCQF to the DetNet aggregate instead of each DetNet flow
   individually, and support of wide-area DetNet networks with arbitrary
   link latencies and latency variations as well as low accuracy clock
   synchronization.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-eckert-detnet-tcqf-03"/>
   
</reference>


<reference anchor="I-D.dang-queuing-with-multiple-cyclic-buffers">
   <front>
      <title>A Queuing Mechanism with Multiple Cyclic Buffers</title>
      <author fullname="Bingyang Liu" initials="B." surname="Liu">
         <organization>Huawei</organization>
      </author>
      <author fullname="Joanna Dang" initials="J." surname="Dang">
         <organization>Huawei</organization>
      </author>
      <date day="22" month="February" year="2021"/>
      <abstract>
	 <t>   This document presents a queuing mechanism with multiple cyclic
   buffers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-dang-queuing-with-multiple-cyclic-buffers-00"/>
   
</reference>


<reference anchor="BIER-TE">
   <front>
      <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname="Michael Menth" initials="M." surname="Menth">
         <organization>University of Tuebingen</organization>
      </author>
      <author fullname="Gregory Cauchie" initials="G." surname="Cauchie">
         <organization>KOEVOO</organization>
      </author>
      <date day="25" month="April" year="2022"/>
      <abstract>
	 <t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for &quot;Bit Index Explicit Replication&quot; (BIER) packets (RFC 8279); it is called &quot;Tree Engineering for Bit Index Explicit Replication&quot; (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.

 BIER-TE introduces a new semantic for &quot;bit positions&quot; (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFERs). A BIER-TE &quot;packets BitString&quot; therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER &quot;subdomains&quot; (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the &quot;Interior Gateway Protocol&quot; (IGP).
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-bier-te-arch-13"/>
   
</reference>


<reference anchor="DNBL">
   <front>
      <title>Deterministic Networking (DetNet) Bounded Latency</title>
      <author fullname="Norman Finn" initials="N." surname="Finn">
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname="Jean-Yves Le Boudec" initials="J." surname="Le Boudec">
         <organization>EPFL</organization>
      </author>
      <author fullname="Ehsan Mohammadpour" initials="E." surname="Mohammadpour">
         <organization>EPFL</organization>
      </author>
      <author fullname="Jiayi Zhang" initials="J." surname="Zhang">
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname="Balazs Varga" initials="B." surname="Varga">
         <organization>Ericsson</organization>
      </author>
      <date day="8" month="April" year="2022"/>
      <abstract>
	 <t>This document presents a timing model for sources, destinations, and Deterministic Networking (DetNet) transit nodes.  Using the model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing methods.  The methodology can be used by the management and control planes and by resource reservation algorithms to provide bounded latency and zero congestion loss for the DetNet service.
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-detnet-bounded-latency-10"/>
   
</reference>


<reference anchor="I-D.stein-srtsn">
   <front>
      <title>Segment Routed Time Sensitive Networking</title>
      <author fullname="Yaakov (J) Stein" initials="Y. J." surname="Stein">
         <organization>RAD</organization>
      </author>
      <date day="29" month="August" year="2021"/>
      <abstract>
	 <t>   Routers perform two distinct user-plane functionalities, namely
   forwarding (where the packet should be sent) and scheduling (when the
   packet should be sent).  One forwarding paradigm is segment routing,
   in which forwarding instructions are encoded in the packet in a stack
   data structure, rather than programmed into the routers.  Time
   Sensitive Networking and Deterministic Networking provide several
   mechanisms for scheduling under the assumption that routers are time
   synchronized.  The most effective mechanisms for delay minimization
   involve per-flow resource allocation.

   SRTSN is a unified approach to forwarding and scheduling that uses a
   single stack data structure.  Each stack entry consists of a
   forwarding portion (e.g., IP addresses or suffixes) and a scheduling
   portion (deadline by which the packet must exit the router).  SRTSN
   thus fully implements network programming for time sensitive flows,
   by prescribing to each router both to-where and by-when each packet
   should be sent.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-stein-srtsn-01"/>
   
</reference>


<reference anchor="I-D.eckert-detnet-bounded-latency-problems">
   <front>
      <title>Problems with existing DetNet bounded latency queuing mechanisms</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname="Stewart Bryant" initials="S." surname="Bryant">
         <organization>Stewart Bryant Ltd</organization>
      </author>
      <date day="12" month="July" year="2021"/>
      <abstract>
	 <t>   The purpose of this memo is to explain the challenges and limitations
   of existing (standardized) bounded latency queuing mechanisms for
   desirable (large scale) MPLS and/or IP based networks to allow them
   to support DetNet services.  These challenges relate to low-cost,
   high-speed hardware implementations, desirable network design
   approaches, system complexity, reliability, scalability, cost of
   signaling, performance and jitter experience for the DetNet
   applications.  Many of these problems are rooted in the use of per-
   hop, per-flow (DetNet) forwarding and queuing state, but highly
   accurate network wide time synchronization can be another challenge
   for some networks.

   This memo does not intend to propose a specific queuing solution, but
   in the same way in which it describes the challenges of mechanisms,
   it reviews how those problem are addressed by currently proposed new
   queuing mechanisms.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-eckert-detnet-bounded-latency-problems-00"/>
   
</reference>


<reference anchor="UBS" >
  <front>
    <title>Urgency-Based Scheduler for Time-Sensitive Switched Ethernet Networks</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <author initials="S." surname="Samii" fullname="Soheil Samii">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="IEEE" value="28th Euromicro Conference on Real-Time Systems (ECRTS)"/>
</reference>
<reference anchor="LBF" >
  <front>
    <title>High-Precision Latency Forwarding over Packet-Programmable Networks</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <date year="2020" month="April"/>
  </front>
  <seriesInfo name="IEEE" value="2020 IEEE/IFIP Network Operations and Management Symposium (NOMS 2020)"/>
  <seriesInfo name="doi" value="10.1109/NOMS47738.2020.9110431"/>
</reference>
<reference anchor="gLBF" target="https://dl.ifip.org/db/conf/cnsm/cnsm2021/1570754857.pdf">
  <front>
    <title>gLBF: Per-Flow Stateless Packet Forwarding with Guaranteed Latency and Near-Synchronous Jitter,</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization></organization>
    </author>
    <date year="2021" month="October"/>
  </front>
  <seriesInfo name="IEEE" value="2021 17th International Conference on Network and Service Management (CNSM), Izmir, Turkey"/>
  <seriesInfo name="doi" value="10.23919/CNSM52442.2021.9615538"/>
</reference>
<reference anchor="gLBF-Springer2023" >
  <front>
    <title>High Precision Latency Forwarding for Wide Area Networks Through Intelligent In-Packet Header Processing (gLBF)</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization></organization>
    </author>
    <date year="2023" month="February"/>
  </front>
  <seriesInfo name="Springer" value="Journal of Network and Systems Management, 31, Article number: 34 (2023)"/>
  <seriesInfo name="doi" value="https://doi.org/10.1007/s10922-022-09718-9"/>
</reference>
<reference anchor="IEEE802.1Q" target="https://doi.org/10.1109/ieeestd.2018.8403927">
  <front>
    <title>IEEE Standard for Local and Metropolitan Area Network — Bridges and Bridged Networks (IEEE Std 802.1Q)</title>
    <author >
      <organization>IEEE 802.1 Working Group</organization>
    </author>
    <date year="2018"/>
  </front>
  <seriesInfo name="doi" value="10.1109/ieeestd.2018.8403927"/>
</reference>
<reference anchor="IEEE802.1Qbv" >
  <front>
    <title>IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged Networks - Amendment 25: Enhancements for Scheduled Traffic (TAS)</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2015"/>
  </front>
</reference>
<reference anchor="CQF" >
  <front>
    <title>IEEE Std 802.1Qch-2017: IEEE Standard for Local and Metropolitan Area Networks - Bridges and Bridged Networks - Amendment 29: Cyclic Queuing and Forwarding (CQF)</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="TSN-ATS" target="https://1.ieee802.org/tsn/802-1qcr/">
  <front>
    <title>P802.1Qcr - Bridges and Bridged Networks Amendment: Asynchronous Traffic Shaping</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <date year="2020" month="July" day="09"/>
  </front>
  <seriesInfo name="IEEE" value=""/>
</reference>
<reference anchor="IPV6-PARMS" target="https://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xhtml">
  <front>
    <title>Internet Protocol Version 6 (IPv6) Parameters</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="IANA" value=""/>
</reference>
<reference anchor="LDN" target="https://dl.ifip.org/db/conf/networking/networking2021/1570696888.pdf">
  <front>
    <title>Towards Large-Scale Deterministic IP Networks</title>
    <author initials="B." surname="Liu" fullname="Binyang Liu">
      <organization></organization>
    </author>
    <author initials="S." surname="Ren" fullname="Shoushou Ren">
      <organization></organization>
    </author>
    <author initials="C." surname="Wang" fullname="Chuang Wang">
      <organization></organization>
    </author>
    <author initials="V." surname="Angilella" fullname="Vincent Angilella">
      <organization></organization>
    </author>
    <author initials="P." surname="Medagliani" fullname="Paolo Medagliani">
      <organization></organization>
    </author>
    <author initials="S." surname="Martin" fullname="Sebastien Martin">
      <organization></organization>
    </author>
    <author initials="J." surname="Leguay" fullname="Jeremie Leguay">
      <organization></organization>
    </author>
    <date year="2021"/>
  </front>
  <seriesInfo name="IEEE" value="2021 IFIP Networking Conference (IFIP Networking)"/>
  <seriesInfo name="doi" value="10.23919/IFIPNetworking52078.2021.9472798"/>
</reference>
<reference anchor="multipleCQF" target="https://www.ieee802.org/1/files/public/docs2021/new-finn-multiple-CQF-0921-v02.pdf">
  <front>
    <title>Multiple Cyclic Queuing and Forwarding</title>
    <author initials="N." surname="Finn" fullname="Norm Finn">
      <organization></organization>
    </author>
    <date year="2021" month="October"/>
  </front>
</reference>


    </references>


<?line 1062?>

<section anchor="high-speed-implementation-considerations"><name>High speed implementation considerations</name>

<section anchor="high-speed-example-pseudocode-instead-of-reference-pseudocode"><name>High speed example pseudocode instead of reference pseudocode</name>

<t>This memo does not describe a normative reference code that aligns with
the normative functional description above <xref target="glbf-spec"/>. The primary reason
is that a naive 1:1 implementation of the functional description would
lead to inferior performance. Nevertheless, the feasibility of high speed
implementations is an important factor in the ability to deploy 
mechanisms like gLBF. Therefore, this appendix describes considerations
for such high speed implementations including pseudocode for on
possible option.</t>

<t><xref target="gLBF"/> describes two approaches for possible optimized hardware implementation
approaches for gLBF. One using "Push In First Out" (PIFO) queues, the
other one times FIFO queues. The following is a representation and
explanation of that second approach because it is hopefully more feasible
for nearer term hardware implementations given the fact that scalable
FIFO high-speed hardware implementations are still a matter for research.</t>

<t>However, the timed FIFO style algorithm presented here is also subject
to possible scalability challenges for hardware because it requires for
each outgoing interface  O(IIF * priorities^2) number of FIFO queues,
where IIF is the number of (incoming) interfaces on the node, and priorities is the
number of priority levels desired (TSN allows up to 8). If however
the priority of flows (packets) used is not per-hop but the same for every
hop (per-path), then the number is just (IIF * priorities).</t>

</section>
<section anchor="ubs-high-speed-implementations"><name>UBS high speed implementations</name>

<t>The algorithm for the pseudocode shown in this appendix further down in this section
is based on the analysis of gLBF behavior done in and for <xref target="gLBF"/>. 
This analysis re-applies the same type of analysis and algorithm that
was done in <xref target="UBS"/> and can be used to implement TSN-ATS in high
speed switching hardware. Therefore, this appendix will start by explaining
the UBS mechanisms.</t>

<t>UBS (see <xref target="UBS"/>, Figure 4), logically consists of two separate stages.
The first stage is a per priority, per incoming interface (IIF) interleaved
regulator. An interleaved regulator is a FIFO where dequeuing of the
queue head packet (qhead) is based on the per-flow state of qhead.</t>

<t>A target departure time for that qhead is calculated from the flow state of
the packet maintained on the router across packets and once that departure time
is reached, the packet is passed to one of the egress strict priority
queues. This is called interleaved regulator, because the FIFO will have
packets from multiple flows (all from the same incoming interface and
outgoing priority), hence 'interleave', and regulator because of the delaying
of the packet up to the target departure time.</t>

<t>The innovation of interleaved regulators as opposed to the prior per-flow shapers
as used in <xref target="RFC2210"/> is the recognition and mathematical proof that the arrival and
target departure times of all packets received from the same IIF (prior hop node)
and the same egress priority will be in order and that they can 
be enqueued into a single FIFO where the per-flow processing only needs to
happen for the qhead. Without (anything but negligible) added latency
vs. per-flow shapers.</t>

<t>With this understanding, the interleaved regulator and following strict
priority stage can easily be combined into a single queuing stage with
appropriate scheduling. In this "flattened" approach, each logical egress
strict priority queue consists of the per-IIF interleaved regulator (FIFO queue)
for that priority.</t>

<t>Scheduling of packets on egress does now need to perform the per-queue
processing of the per-flow state of the qhead, and then take the target
departure time of that packet into account, selecting the interleaved regulator
with the highest priority and earliest target departure time qhead.</t>

</section>
<section anchor="glbf-compared-to-ubs"><name>gLBF compared to UBS</name>

<t>In gLBF, the very same line of thoughts as in UBS can be applied and are the basis
for the described algorithm and shown pseudocode.</t>

<t>In glBF, the order of packets in their arrival and target departure times
depends on the egress priority, the IIF, but also on the priority the packet had
on the prior hop (pprio). All packets with the same (IIF,prio,prio) will arrive
in the same order in which they need to depart, and in which it is therefore
possible to use a FIFO to enqueue the packets and only do timed dequeuing
of the qhead.</t>

<t>Both prio and pprio are of interest, because when gLBF uses an encapsulation
allowing per-hop priority indications, its priority on each hop can be different.
In UBS, priority can equally be different across hops for the same packet,
but the prior hop priority is not necessary to put packets into separate
interleaved regulators because UBS targets in-time delay, where the
interleaved regulator does (only) need to compensate for burst accumulation,
but in gLBF the delay to be introduced depends on the damper value which
depends on the prior hop priority and in result, the order in which in
gLBF packets should depart (absent any burst accumulation) depends also
on the prior hop priority.</t>

<t>Because gLBF does not deal with per-flow state on the router as UBS
does in its interleaved regulators, the FIFOs for gLBF are called timed
FIFOs in this memo and not interleaved regulators</t>

</section>
<section anchor="comparison-to-normative-behavior"><name>Comparison to normative behavior</name>

<t>Whereas the normative description described D, Q and M blocks,
where the D block performs the dampening, and the Q block performs
the priority queuing block, in the high speed hardware optimization,
these are replaced by a single DQ block where the packets are
enqueued into a single stage per-(IIF,pprio,prio) FIFO (similar to UBS) and then
the dampening happens (similar to UBS) on dequeuing from that stage
by the damper time but scheduling/prioritizing packets based on their prio.</t>

<figure title="High Speed single stage gLBF" anchor="FIG-hs-diagram"><artwork><![CDATA[
   +------------------------+       +------------------------+ 
   | Node A                 |       | Node B                 |
   | +-+    +-------+   +-+ |       | +-+    +-------+   +-+ |
 --|-|F|--x-| DQ y  |-z-|M|-|-------|-|F|--x-| DQ y  |-z-|M|-|--->
IIF| +-+    +-------+   +-+ |OIF IIF| +-+    +-------+   +-+ |OIF
   +------------------------+       +------------------------+
          |<- Dampened Q ->|               |<- Dampened Q ->|
                 |<- A/B in-time latency ->|
                 |<--A/B on-time latency -------->|
]]></artwork></figure>

<t>In the normative definition, the damper value to be put into the packet
depended on the time y, where the packet left the damper stage D and
entered the priority queue stage Q. Simplified, the damper value is
(MAX1 - (z - y)).</t>

<t>In the high-speed implementation, the packets are not passed from
a damper state queue to a priority queue. Instead they stay in the
same queue. This is on one hand one of the core reasons why this
approach can support high speed - it does not require two-stage
enqueuing/dequeing/ But it eliminates also the ability to take a time stamp
at time y.</t>

<t>To therefore be able to replicate the normative gLBF behavior with a
single stage, it is necessary in the marking stage M (where the new
damper value is calculated), to somehow know y.</t>

<t>Luckily, y is exactly the target departure time of the packet for
the D and therefore also the DQ stage, so already needs to be
calculated on entry to DQ by calculation: y = (x + damper - &lt;details&gt;),
as explained below.</t>

<t>The pseudocode consists of glbf_enqueue() describing the enqueuing
into the DQ stage, and glbf_dequeue() describing the dequeuing
from the DQ stage. glbf_dequeue() (synchronously) calls 
glbf_send() which represents the marking stage M.</t>

</section>
<section anchor="pseudocode"><name>Pseudocode</name>

<section anchor="glbfenqueue"><name>glbf_enqueue()</name>

<figure title="Reference pseudocode for glbf_enqueue()" anchor="FIG-glbf-enqueue"><artwork><![CDATA[
void glbf_enqueue(pak,oif) {
  tdamp = pak.header.tdamp // damper value from packet
  prio  = pak.header.prio  // this hops packet prio
  pprio = pak.header.pprio // previous hops packet prior
  iif   = pak.context.iif  // incoming interface of packet

  ta = adj_rcv_time(now(),                  \[1]
                    pak.context.iif.speed,
                    pak.context.length)

  td = now() + ta // (dampened earliest) departure time
  pak.context.max1 = max1\[oif,prio]
  enqueue(pak, td, q(oif,iif,prio,pprio))
}
]]></artwork></figure>

<t>pak.header are parsed fields from the received gLBF packet. tdamp is
the damper value.  pak.context is a node local header of the packet.
iif is the interface on which the packet was received.</t>

<t>prio and pprio are current prior hop priority from the packet header.
If for example SRH (<xref target="RFC8754"/>) is used
in conjunction with gLBF, and <xref target="RFC8986"/> formatting of SIDs
is used, then the priority for each hop could be expressed as
a 4-bit SID ARG field (see <xref target="RFC8986"/>, section 3.1) to indicate
16 different priorities per hop.</t>

<t>Parsing the prior hop priority is not a normative requirement of gLBF,
but a specific requirement of the high speed algorithm
presented here to allow the use of single stage timed FIFOs instead of PIFOs.
This type of parsing is not required for SRH, but would be a benefit
of a packet header which like SRH keeps the prior hops information,
opposed to the SR-MPLS approach where past hop SD/Labels are discarded.</t>

<t>now() takes a timestamp from a local (unsynchronised) clock at the
time of execution.</t>

<t>[1] pak.context.ta (time of arrival) is the calculated time at which the first bit of the packet
was entering the incoming interface of the node. adj_rcv_time() is defined
in the next subsection. td is the target
departure time calculated from the current time and the damper
value from the packet. It simply convert the relative damper value to
an absolute timestamp.</t>

<t>max1[oif,prio] is the only gLBF specific interface level state
maintained (read-only) across packets. It is the maximum time calculated
by admission control in the controller-plane for each priority. It
is transferred into a context header field here even though it will
only be used further down in dequeuing because of the assumption that
access to state information is not desirable at the time critical stage
of dequeuing/serialization, whereas such state lookup is very common
for many forwarding plane features before enqueuing.</t>

<t>Finally, the packet is enqueued into a per-oif,iif,prio,pprio timed
FIFO queue.</t>

</section>
<section anchor="adjrcvtime"><name>adj_rcv_time()</name>

<t>To calculate the reference time against which the damper value in the
packet is to be used, this specification assumes the time when the
first bit of the packet is seen on the media connecting to the
incoming interface.</t>

<figure title="Example pseudocode for adv_rcv_time()" anchor="FIG-adj-rcv-time"><artwork><![CDATA[
time_t adj_rcv_time(now, speed, length) {
  time_t now
  int speed, length
      
  return now - length * 8 / speed - FUDGE
}
]]></artwork></figure>

<t>In most simple node equipment, the primary variable latency introduced 
between that (first bit) measurement point and the time when the time
parameter t for adj_rcv_time() can be taken is the deserialization time of the
packet. This can easily be calculated from the packet length as assumed to be 
known from pak.context.length and the bitrate of the incoming interface known
from pak.context.iif.speed plus fixed measured or calculated other
latency FUDGE through internal processing. The example pseudocode, those
are assumed to be static.</t>

<t>If other internal factors in prior forwarding within the node do create
significant enough variation, then those may need compensation through
additional mechanisms. In this case, instead of as shown in
glbf_enqueue(), the reference time for calculation should be taken
directly upon receipt of the packet, before entering the forwarding stage F,
and then used as the now parameter for adj_rcv_time(). This is explicitly
not shown in the code so as to highlight the most simple implementation
option that should be sufficient for most node types.</t>

</section>
<section anchor="glbfdequeue"><name>glbf_dequeue()</name>

<figure title="Pseudocode for glbf_dequeue()" anchor="FIG-glbf-dequeue-"><artwork><![CDATA[
void glbf_dequeue(oif) {
  next_packet: while(1) {
    tnow = now()
    ftd = tnow + 1  // time of first packet to send
    fq = NULL      // queue of first packet to send
    foreach prio in maxpriority...minpriority {
      foreach iif in iifs {
        foreach pprio in priorities}
          // find qhead with earliest departure time
          if (q = q(oif,iif,prio,pprio).qhead) {
            td = q.qhead.td   // target (departure) time
            if td < ftd
              ftd = td
              fq = q
            }
          }
        }
      }
      if fq { // found packet
        pak = dequeue(q,oif)
        glbf_send(oif,tnow,pak)
        break next_packet
      }
    }
  }
}
]]></artwork></figure>

<t>glbf_dequeue() finds the gLBF packet to send as the enqueued packet with the highest
priority and the earliest departure time td (as calculated in glbf_enqueue()),
where td must also not in the future, because otherwise the packet still needs to
be dampened.</t>

<t>The outer loops across this hops prio will find the packet
with exactly those properties, dequeues and sends it. For this,
the  strict priority is expressed through the term maxpriority...minpriority,
which first searches from maximum to minimum priority..</t>

<t>The two inner loops simply look for the packet with the earliest
target departure time across all the (IIF,pprio) timed FIFO queues
for the same prio and OIF.</t>

<t>In ASIC / FPGA implementations, finding this packet is not a sequential
operation as shown in the pseudocode, but can be a single clock-cycle
parallel compare operation across the td values of all queues qheads - at the expense of
chip space, similar to how TCAMs work.</t>

</section>
<section anchor="glbfsend"><name>glbf_send()</name>

<figure title="Reference pseudocode for glbf dequeue" anchor="FIG-glbf-dequeue"><artwork><![CDATA[
void glbf_send(oif,tnow,pak) {
  qtime = tnow - pak.context.td          // \[1]
  td = pak.context.max1 - qtime - FUDGE2 // \[2]
  pak.header.tdamp = td
  serialize(oif,pak)
}
]]></artwork></figure>

<t>Sending packet pak represents the marking block M in the specification.
This needs to calculate the new damping value t and update it in the
packet header before sending the packet.</t>

<t>td needs to be the maximum time max1 that the packet could have
stayed in priority queuing minus the time qtime that it actually did stay in
the queue and minus any additional time FUDGE2 that the packet will still
needs to be processed by the router before its first bit will show up
on the sending interface. This is calculated as shown in 
in [1] and [2] of <xref target="FIG-glbf-dequeue"/>.</t>

<t>The primary factor impacting FUDGE2 is whether or not this calculation and
updating of the packet header td field can be done directly before serialization
starts, or whether it potentially would need to be done while there is
still another packet in the process of being serialized on the interface.
Taking the added latency of a currently serializing packet into account
can for example be implemented by remembering the timestamp of when
that packet started to be serialized and its length - and then taking
that into account to calculate FUDGE2.</t>

</section>
</section>
<section anchor="performance-considerations"><name>Performance considerations</name>

<t>IEEE 802.1 PTP clock synchronization does need to capture the accurate
arrival time of PTP packets. It is also measuring the residency time
of PTP packets between receiving and sending the packet with an
accuracy of nsec and add this to a PTP packet header field  (correctionField).
Given how this needs to be a hardware supported functionality, it is
unclear whether there is a relevant difference supporting this for
few PTP signaling packets as compared to a much larger number of
gLBF data packets - or whether it is a good indication of the feasibility
packet processing steps gLBF requires.</t>

</section>
</section>
<section anchor="history-and-comparison-with-other-bounded-latency-methods"><name>History and comparison with other bounded latency methods</name>

<t>Preceding this work, the best solution to solve the requirements outlined in
this document, where <xref target="TCQF"/> and <xref target="SCQF"/>, which are proven to
be feasible for high speed forwarding planes, because of vendor high-speed
forwarding plane implementation using low-cost FPGA for cyclic queuing. On the other hand,
it was concluded from implementation analysis, that <xref target="UBS"/> was infeasible for the
same type of high-speed, low-cost hardware due to the need for high-speed
flow-state operations, especially read/write cycles to update the state for every packet
at packet processing speeds.</t>

<t>While TCQF and <xref target="SCQF"/> are very good solution proven to work
at high-speed, low cost, available for deployment and ready for standardization, 
the need for network wide and hop-by-hop clock synchronization (albeit at lower
accuracy than required for other mechanisms feasible at high-speed, low-cost) as well
as the need to find network wide good compromise clock cycle times makes planning and
managing them in dynamic, large-scale and/or low-cost network solutions still more complex
to operationalize than what the authors wished for.</t>

<t>In parallel to short term operationalizable solutions <xref target="TCQF"/> and <xref target="SCQF"/>, <xref target="LBF"/> was researched,
which is exploring a wide range of options to signal and control latency through advanced
per-hop processing and in-packet latency related new header elements. Unfortunately, with
the flexibility of <xref target="LBF"/> it was impossible to find a calculus for simple admission control. 
Ultimately, <xref target="gLBF"/> was designed out of the desire to have a mechanism 
derived from <xref target="LBF"/> that also provides guaranteed bounded latency, has the flexibility
benefits of <xref target="UBS"/> with respect to fine-grained and per-hop independent latency
management but does hopefully still fits the limits of what can be implemented in
high-speed, low-cost forwarding/queuing hardware.</t>

<t>This high-speed hardware forwarding feasibility of gLBF has yet to be proven.
Here are some comsiderations, why the authors think that this should be well
feasible:</t>

<t>The total number of FIFO that a platform needs to support is comparable to
the number of queues already supportable in the same type of devices today,
except that service provider core nodes may not all implement that many,
because absent of DetNet services, there is no requirement for them.</t>

<t>The need to implement timed FIFOs (if the proposed high-speed implementation
approach is used) is equal or less complex to shapers, which by now have
also started to appear on high-speed (100Gbps and faster) core routers,
primarily due to high-speed virtual leased line type of services.</t>

<t>The re-marking of packet header fields derived from the calculated
latency of the packet experienced in the node is arguably something where
iOAM type functionality likely provides also prior evidence of feasibility in
high speed hardware forwarding planes. Similarily, processing of PPT timing
protocol packets also have similar requirements.</t>

<t>Even when implementation challenges at high-speed, low-cost make gLBF a
longer term option in those networks, implementation at low-speed (1/10 Gbps)
such as in manufacturing or cars may be an interesting option to explore given
how it has the no-jitter benefits of <xref target="CQF"/> without the need for cycle
management or clock-synchronization: Best of both worlds <xref target="CQF"/> and TSN-ATS ??</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+2963IbV5Ym+n8/RR45TgzQBsCLLpYYXdVNiZKtGkmWTbpr
zpTrVCSABJklIBPOTJCiZUXMQ8wTzpPMuu+1E0lJVdEdU9ExqiiTBPKyL2uv
+/rWdDoNi3pZVpcn2a5bTR+H0JXdujjJzoquaDZlVbZducjeFN1N3byD67IR
fAN/jrOzvMuzt+u8KrJpdrnLm7zqimKZvcq7olrcZk/zFv56UTc3ebOkOy9f
PX0xzlZ1k83rXbWEb9dy7U3ZXWXr+ib7a9nBe7O8WmZ5e1strpq6qnct3qSP
KavhwbUhn8+b4vokWxZdVXTTy/V8FZb1oso3MKFlk6+6abF4VzTd1F0xPTwK
NzD9s+cXb55fhAWM6LJubk+ytluGctucZF2za7vjw8Mnh8eh7Zoi35xkL59f
vAjwFwz0L/m6ruAFt0UbtuVJyLKsqxf8N/++LLbd1Un2EP9s6wYesWrt+/Z2
k/y9qDebourkg5Dvuqu6wadO8Vv8x/O5qItmXbRt9pympF/WDczlxa7bNcVN
UWYXxeKqqtf1ZVm02U/np3oZzqPoTrLj4+PD7Bm8r8nX2fP32waeeJPf6mWL
soOVOIedzbNna9hi+6JewhienWZPHh4+PIyf7uBJcId7U7HJyzUsYlf866Kd
rfLdbFnod02NpFYsy65u9md4ui7ew/oCOTxbF5vNP/oMcxjuv650XDPYx/0p
nXcFkHGXPW1u4Y3JjF7CTLcF/Cd+Lg9u5//a8n1zuk0e3RvPf9WPBt+6yqvs
O6SsNnnpf3+RvWjKYtmUi6v2Kl8VVXb6bf/1dPfsiu7+119Xbv/s7WfPQ6jq
ZpN35XWBxPrji2fHx0eHJ5n9fqwfP/jmgfx6//ibQ/n18aOHD/VXOGr665NH
cG0oq1Xv2fePD5/Irw8efxPvfPJIf31wqC+E7x/Y8+4/tl8f67VPDo/s1+NH
etsTeAe8O8vOn/3wArZnejZbXBWVso62mc6RwU2FlU2FlcENr87P3vANv5R5
dal3AHFdFtN2AXQiH8G1F/bwlDN1i19W+HL8ZokP+WVX7ID7TZFTTje7dVdu
4TmL28W6XEznu9WqaFoc+dOXz3+cXjznZ5YF8PR5WTTTrpjmzeIKLjh78/SV
+1betz8LvAK2vqxgql1bnfw9g9mfV+89021Tz+Fwt7TSPz09J/aZiQz6CRYM
L2JJcg7Lv9ytgR2gBLkoN8X0vKjaEskiO4eh4PfZ8+6qaOBNUSoQMyiAyluk
oxOh3ZfPn8MiHT8GufN819SbctHU2bO6gqHDO4usrrIfi3w9xfdk57ewEps2
Gz1/9uPF+ZgesYQZwAOAdujPyKfxnx1AkFbAyf8wy863wKfsZMvB/EN9lVcV
8K3k297N53BzvinL3r3n9VVRruUrpLqnL5LF+668vJq+bYpF2ZYwGZXKTh7X
17CWb3PYnw4urC+bfLPJYTe+cOkOga/irwcvX7x8q/dk32+LBk5qXbUkxF/n
VX5ZoECDRdxs67bcbbLRm+9fn9MDxvLIZV2eZEeHs6OjwycH+O2Db765/3iG
l8yewIcP7h8li358OD188Pl1v5j1pOMnZWfv5tNZKnfukErw9WV/7bN79FH2
Fk7eC1RrzjsYOL2R19tvA+k+3+7rT7h8b4q8mZ47PegPpB9N7n1ua46yo2/g
sS/hkU1F+wHSLyVv3TF8z3nRXJfwsduu0bM356/Hk+zlr5uymWQXu+Zdcdvb
ruP7T46eHOCFD48fPDjG/TqaPXl09PDh/cfpfh1Nj1iGdsgFQSxfdd22PTk4
WK5n5arczkAcHSznBwsY4sGiajf0H7zx4OjhN4fAwh8//Ga2Xa7+MTb9roOa
yvVhoS8EMz3fNrD9RQOTvN+jHjy72SfPLrLAP5bLIjsFfdQObHYBdLK75H1f
r8tL3MiX1VSI7rsixynAWV/AOkSV/C5q0hGeZPf+UO8aJKF6ldKNMMZIN5Ps
/tEERgWKOXCSareZ4/33H2QjnKe8SijIaKAuaf+RARwefnPQAhc4Pp4e4v+f
fHP0ePokJab78NV/CjrA4/r48Hh29ENCAPfwc+QZ1RK2m/b6VQ16A3PUomvq
bb0u4etk97P/9T/+Jzy7XF4WzHv592WkjpE8d5nxS2U30lVkZRQvpIuyP4rd
9y1Q1jaVfI/voJuEm5dFUYApNcPrZ6CW3X9y/M0wJ3BUcOeNyaLNr7982TZ+
2XJctkqXZTr99LJNs1Og7CVxxeOHJ9nzCqT2gqidDFPTTJbZBRiZKzBJRxen
559Z3Z4C4y3si/M34+wib9/xos+ydNkf4iqg3kgfT0/cipCGt7cgut+Lqync
/o0M4G+lL1yIL1+nJ2A7kT6Y/cDKIt3jvQEwg/+wJSJCgWumpxepSnnvrSxF
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
+2Cse2ptEqxhyxc1VqHdsB8Zldp+GhHlIviwM7tqOe2CiirIutptM8750Xvr
yBnuiL96aWiVf3mXB+J1mrzA/hY5bm3yKEeyNErEIbkul5jIItzXLQsnGYgn
YQgegLdkQmkqi7xy7zZ6C7m9Ww/8EN2+Pv1vApCjFb9ox4YkKhxZARGTMek+
I3EcCR47iaFaVRekDEHWjzJVqNA2/dpUnGAl2c4pw050oI2cizzFh4zyiMQX
POApD5vyLERPMSbwiXtPiflJUrblyUfP0j0p1b28bApexXvOThYBQXW2lsxy
52HCTUPRLmZvTKnxNCMVxTEDJtIITzOnrEh81rKmXWT+jV6sFRq8hY8rmytr
ky9VPYzmEdEajjvwIvU1bq5zyHlZTWsZDXmLxxNLNAh3ka6MBn1ft/FxVjvW
1UFnR8WpUh4kl9e2S1jYjWstjgWfatjBW7Zcl87l1/9wRp3/75BR1/8+GnVn
v01vxXQbNOoGv//c23tG3eDb//61M1hLMe2IuDSSbmbd73/rXzfF6+r+dfwv
moDHd5iAe/bfsdl/neahsk+bij7Z+RRdw1azOZEHuQyHSFgWB0XfxkypQ/xQ
rY8QBtSsW0oSJj8IMJ9dwQnkSY0aWzRAQv4hgSMxIH/pZXnn1P89B9T7p5YQ
x06V1psGzPA50gucejp6/3R6ezoe9xmt8Z3RLV2QSRoUTxcYAbL5DMVpPRjE
5GMpnkB2opoXXfIEefGpWi9nlX04BMcaMcdmLTPH7BtN35OJSIS2kaVK1LDZ
f2Iu8OtnuMCv/7m5wP1PcwFBY8cThenuxhPuG0+4ojyG0tJL1R9OXmeM2dnd
dqoxGf5XLHIzCmuzJebawtE4mo5+PaWDZdkZ+CWddznoiXVhx94d2965PqNK
0KjC6MHDDBtMe0UlLXrAcbWQEzx14QaHeUQu+egnwIEIRsAtf34WEQcYGwmV
ueHYjx1JShN4ipb/pub6LI7f8/lOS/0/HU8inK8uOn2t1oCzFCcS2KHJbgS1
SWmjrLCMhXYuGAZPim3jvDIakiWez9V4BmUXdOwwHNxTg7jr86yBrAvSlxJk
mmCcvniPzDu63WkgQxr62wnFdUBWcNRgyDXgQu2JlY34ZKBIsoJLDD2xffnr
CW0ZGgK/y2iGX2dvhWcPmd1YM2fFF/G9mntkDrxQO8K6y8P3VI+aX3YaBMcc
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
Up+NZ0QBPP7lX0II/xslODn3Lh8BAA==

-->

</rfc>

