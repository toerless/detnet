<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.1.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-detnet-glbf-02" category="std" consensus="true" submissionType="IETF" tocDepth="5" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="detnet-glbf">Deterministic Networking (DetNet) Data Plane - guaranteed Latency Based Forwarding (gLBF) for bounded latency with low jitter and asynchronous forwarding in Deterministic Networks</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert" role="editor">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>alex@futurewei.com</email>
      </address>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization>Independent</organization>
      <address>
        <postal>
          <country>UK</country>
        </postal>
        <email>sb@stewartbryant.com</email>
      </address>
    </author>
    <author initials="S." surname="Hommes" fullname="Stefan Hommes">
      <organization>ZF Friedrichshafen AG</organization>
      <address>
        <postal>
          <country>DE</country>
        </postal>
        <email>stefan.hommes@zf.de</email>
      </address>
    </author>

    <date year="2024" month="January" day="05"/>

    
    <workgroup>DETNET</workgroup>
    

    <abstract>


<?line 212?>

<t>This memo proposes a mechanism called "guaranteed Latency Based Forwarding" (gLBF) as part of DetNet for hop-by-hop packet forwarding with per-hop deterministically bounded latency and minimal jitter.</t>

<t>gLBF is intended to be useful across a wide range of networks and applications with need for high-precision deterministic networking services, including in-car networks or networks used for industrial automation across on factory floors, all the way to ++100Gbps country-wide networks.</t>

<t>Contrary to other mechanisms, gLBF does not require network wide clock synchronization, nor does it need to maintain per-flow state at network nodes, avoiding drawbacks of other known methods while leveraging their advantages.</t>

<t>Specifically, gLBF uses the queuing model and calculus of Urgency Based Scheduling (UBS, <xref target="UBS"/>),
which is used by TSN Asynchronous Traffic Shaping <xref target="TSN-ATS"/>. gLBF is intended to be a plug-in replacement for
TSN-ATN or as a parallel mechanism beside TSN-ATS because it allows to keeping the same controller-plane
design which is selecting paths for TSN-ATS, sizing TSN-ATS queues, calculating latencies and admitting
flows to calculated paths for calculated latencies.</t>

<t>In addition to reducing the jitter compared to TSN-ATS by additional buffering (dampening) in the network,
gLBF also eliminates the need for per-flow, per-hop state maintenance required by TSN-ATS.  This avoids the need to signal per-flow state to every hop from the controller-plane and associated scaling problems.  It also reduces implementation cost for high-speed networking hardware due to the avoidance of additional high-speed speed read/write memory access to retrieve,
process and update per-flow state variables for a large number of flows.</t>



    </abstract>



  </front>

  <middle>


<?line 230?>

<section anchor="overview-informative"><name>Overview (informative)</name>

<section anchor="terminology"><name>Terminology</name>

<dl>
  <dt>CaaS</dt>
  <dd>
    <t>Control as a Service. Cloud (compute) and network services to enable control (loops) with network connected devices, for example cars.</t>
  </dd>
  <dt>CQF</dt>
  <dd>
    <t>Cyclic Queuing and Forwarding.  A queuing mechanism defined by annex T of IEEE802.1Q.</t>
  </dd>
  <dt>DT</dt>
  <dd>
    <t>Dead Time. A term from CQF indicating the time during each cycle in which no frames can be sent because the the receiving node could not receive it into the desired cycle buffer.</t>
  </dd>
  <dt>node</dt>
  <dd>
    <t>Term used to indicate a system that with respect to gLBF does not act as a host, aka: sender/receiver. This memo avoids the term router to avoid implying that this is an IP/IPv6 router, as opposed to an LSR (label switch router). Likewise, a node can also be an 802.1 bridge implementing gLBF.</t>
  </dd>
  <dt>TCQF</dt>
  <dd>
    <t>Tagged Cyclic Queuing and Forwarding. The mechanism specified in this memo.</t>
  </dd>
</dl>

</section>
<section anchor="summary"><name>Summary</name>

<t>This memo proposes a mechanism called "guaranteed Latency Based Forwarding" (gLBF) for
hop-by-hop packet forwarding with per-hop deterministically bounded latency and minimal jitter.</t>

<t>gLBF is intended to be useful across a wide range of networks and applications with need for high-precision deterministic networking services, including in-car networks or networks used for industrial automation across on factory floors, all the way to ++100Gbps country-wide networks.</t>

<t>At its foundation, gLBF addresses the problems of burst accumulation and jitter accumulation across multiple hops.</t>

<t>Burst accumulation is  the phenomenon in which bursts of packets from senders in admission-controlled network will increase across intermediate nodes. This can only be managed with exponential complexity in admission control processing and significantly worst-case increase in end-to-end latency and/or lowered maximum utilization. What is needed for dynamic, large-scale or easy to manage admission control solutions are forwarding mechanisms without this problem, so that admission control for bandwidth and jitter/buffer-requirements can be linear: decomposed into solely per-hop calculations independent of changes in prior-hop traffic characteristics. Without forwarding plane solutions to overcome burst accumulation, this is not possible</t>

<t>Existing solutions addressing burst-accumulation do this by maintaining inter-packet gaps on a per-flow basis, such as in TSN Asynchronous Traffic Shaping (TSN-ATS). gLBF instead ensures inter-packet gaps are always maintained without the need for per-flow state. The basic idea involves assigning a specific queuing delay budget for any given node and class of traffic. This budget is pre-known from admission control calculus.  As the packet is transmitted, the actual queuing delay that was experienced by the packet at the node is subtracted from that budget and carried in a new header field of the packet.  Upon receiving the packet, the subsequent node subjects the packet to a delay stage.  Here the packet needs to wait for the time specified by that parameter before the node proceeds with regular processing of the packet.  This way, any queuing delay variations are absorbed and deterministic delay without the possibility of burst accumulation can be achieved.</t>

<t>By addressing burst-accumulation, gLBF also overcomes the problem of jitter-accumulation. This is the second core problem of mechanisms such as TSN-ATS: Depending on the amount of competing admitted traffic on a hop at any point in time packets of a flow may experience zero to maximum delay across the hop. This is the per-hop jitter. This jitter is additive across multiple hope, resulting in the inability for applications requiring (near) synchronous packet delivery to solely rely on such mechanisms. It likewise limits the ability of high utilization of networks with large number of bounded latency flows.</t>

<t>The basic principle on which gLBF operates was already proposed by researchers in the early 1990th
and called "Dampers". These dampers where not pursued or adopted due to the lack of network equipment capabilities
back then.  Only with recent and upcoming improvements in advanced forwarding planes will it be possible to
build these technologies at scale and cost.</t>

<t>Contrary to other proposals, gLBF does not require network wide clock synchronization.  Likewise, it does not need to maintain per-flow state at network nodes, as delay budget and the queuing delay variations that are to be absorbed are carried as part of the packets themselves, making them "self-contained".  This eliminate the for the per-flow, per-hop state maintenance required by TSN-ATS, which involves
scaling problems of signaling this per-flow state to every hop from the controller-plane as well as the
high-speed networking hardware implementation cost of high-speed speed read/write memory access to retrieve,
process and update these per-flow state variables for large number of flows.</t>

<t>Opposed to other damper proposals, gLBF also supports the queuing model and calculus of Urgency Based Scheduling (UBS, <xref target="UBS"/>),
which is used by TSN-ATS. gLBF is intended to be a plug-in replacement for
TSN-ATN or as a parallel mechanism beside TSN-ATS because it allows to keeping the same controller-plane
design which is selecting paths for TSN-ATS, sizing TSN-ATS queues, calculating latencies and admitting
flows to calculated paths for calculated latencies.</t>

<t>While gLBF as presented here is intended for use with IETF forwarding protocols and to provide
DetNet QoS for bounded latency and lower bounded jitter, it would equally applicable to other forwarding
planes, such as IEEE 802.1 Ethernet switching - assuming appropriate packet headers are defined
to carry the hop-by-hop and end-to-end metadata required by the mechanism.</t>

</section>
<section anchor="application-scenarios-and-use-cases"><name>Application scenarios and use cases</name>

<t>gLBF addresses the same use cases that are targeted by deterministic networking and high-precision networking services in general.  Common requirements of those services involve the need to provide service levels within very tightly defined service level bounds, in particular very specific latencies without the possibility of congestion-induced loss.  The ability to provide services with corresponding service level guarantees enables many applications that would simply not be feasible without such guarantees.  The following describes some use cases and application scenarios.</t>

<t>The development towards autonomous driving vehicles leads to new requirements and a high demand of computational resources that are often not available within a car. A solution is to reduce the in-car processing to a minimum, and to offload more computational expensive tasks to the cloud environment. Due to the safety implications and use cases, a delay in the transport of message from the cloud to the car and vice versa is often not acceptable. This includes application scenarios such as trajectory planning for driverless vehicles, but also emergency notifications to surrounding cars that require a fast delivery of messages to prevent a delayed action in case of an accident. While the usage of TSN for in-vehicle networks is already investigated and more mature, the usage of a real-time communication with guaranteed latencies for vehicles with to the cloud is still an open challenge.</t>

<t>Another use case that is important for the automotive industry is to further optimise the manufacturing process by taking into account more data sources. Since most of the SCADA systems and PLCs cannot connect to large data lakes and perform more advanced computational jobs, a real-time communication to the shop floor from a cloud instance does have several benefits. First of all does it integrate more data into the decision making process, since the control algorithms to automate manufacturing sites located in a cloud environment can take into account more variables than single plant control systems. Another aspect is also to reduce the resources on a particular factory floor or plant by transferring complex, recurring and more resource computational jobs to a cloud provider where a lack of computational power is not the limiting factor. However, in such cases it is important that associated control can still occur in real-time and according to very precise timing constraints.  Such a development is already foreseen by trends such as Industry 4.0 and Control-as-a-Service (CaaS).</t>

</section>
<section anchor="background"><name>Background</name>

<t>The following background introduces and explains gLBF step by step.
It uses IEEE 802.1 "Time Sensitive Networking" (TSN) mechanisms for reference, because
at the time of this memo, TSN bounded latency mechanisms are the most commonly understood and
deployed mechanisms to provide bounded latency and jitter services.</t>

<t>All mechanisms compared here are as well as those used by TSN based on the overall service design
that traffic flows have a well-defined rate and burstyness, which are tracked by the controller-plane and
called here the "envelope" of the flow.</t>

<t>The traffic model used for gLBF is taken from UBS gives the flow a rate r [bps/sec] and
a burst size b [bits] and the traffic envelope condition is that the total number of
bits w(t) over a period t [sec] of for the flow must be equal to or smaller than (r * t + b).
In one typical case, a flow wants to send a packet of size b one every interval of p [sec].
This translates into a rate r = b / p for the flow because after the flow has sent the first packet
of b bits, it will take p seconds until (r * t) has a size of b again: (r * t) = ((b / p) * p).</t>

<t>The controller-plane uses this per-flow information to calculate for each flow a path with sufficient free bandwidth
and per-hop buffers so that the bounded end-to-end latency of packets can be guaranteed. It then
allocates bandwidth and buffer resources to the flow so that further flows will not impact it.</t>

<t>Within this framework, bounded latency mechanisms can in general be divided into "on-time" and "in-time"
mechanisms.</t>

<section anchor="in-time-mechanisms"><name>In-time mechanisms</name>

<t>"In-time" bounded latency mechanisms forward packets in an (almost) work conserving manner.</t>

<t>When there is no competing traffic in the network, packets of traffic flows that comply
to their admitted envelope are forwarded without any mechanism introduced queuing latency.
When the maximum amount of admitted traffic is present, then packets of admitted flows
will experience the maximum guaranteed, so-called bounded latency. In result, in-time mechanism
introduce the maximum amount of jitter because the amount of competing traffic can
quickly change and then the latency of packets will change greatly.</t>

<t>IEEE TSN Asynchronous Traffic Shaping is the prime example of
an in-time mechanism. IETF <xref target="RFC2212"/>, "Integrated Services" is an older mechanism
based on the same principles.  In-time mechanisms have the benefit of not requiring
clock-synchronization between nodes to support their queuing.</t>

</section>
<section anchor="on-time-mechanisms"><name>On-time mechanisms</name>

<t>On-time bounded latency mechanisms do deliver packets (near) synchronously with zero or a small
maximum jitter - significantly smaller than that of in-time mechanisms.</t>

<t>EEE TSN Cyclic Queuing and Forwarding (CQF) is an example of an on-time
mechanism as is the Tagged Cyclic Queuing and Forwarding (TCQF) mechanism proposed to DetNet.<br />
Unlike the before mentioned in-time mechanisms, these mechanisms require clock synchronization
between router.</t>

</section>
<section anchor="control-loops-vs-in-time-and-on-time"><name>Control loops vs. in-time and on-time</name>

<t>One set of applications that require or prefer on-time (low jitter) delivery of packets are
control loops in vehicles or industrial environments and hence low-speed and short-range networks.</t>

<t>Emerging or future use-cases such as remote PLC or remote driving extend these requirements also
into metropolitan scale networks. In these environments, on-time forwarding is also called
synchronous forwarding for synchronous control loops.</t>

<t>Typically, in synchronous control loops, central units such as Programmable Logic Controllers
(PLC) do control a set of sensors and actors, polling or periodically receiving status information
from sensors and sending action instructions to actors. When packet forwarding is
on-time (synchronous), this central unit does exactly know the time at which sensors
sent a packet and the time at which packets are received by actors and they can react on it.</t>

<t>These solutions do not require sensors and actors to have accurate, synchronised clocks. Instead,
the central unit can control the time at which sensor and actors perform their operations
within the accuracy of the (zero/low) jitter of the network packet transmission.</t>

<t>When bounded latency forwarding is (only) in-time, edge nodes in the network and/or sensors
and actors need to convert the packets arriving with high jitter into an on-time arrival model
to continue supporting this application required model.</t>

<t>This conversion is typically called a playout-buffer mechanism and involves the need to synchronizing time
between senders and receivers, and hence most commonly the need for the network to support clock
synchronization to support these edge devices and/or sender receivers.</t>

<t>In result, existing bounded latency mechanisms to support synchronous, on-time delivery of packets
do require clock synchronization across the network. In the existing mechanisms like CQF for
the forwarding mechanism itself, in the on-time mechanisms to synchronize edge-devices and hosts.</t>

</section>
<section anchor="challenges-with-network-wide-clock-synchronization"><name>Challenges with network wide clock synchronization</name>

<t>While clock synchronization is a well understood technology, it is also a significant operational
if not device equipment cost factor [TBD: Add details if desired].</t>

<t>Therefore, clock synchronization with e.g.: IEEE 1588 PTP is
only deployed where no simpler solutions exist that provide the same benefits but without
clock synchronization. Today this for example means that in mobile networks, only the so-called
fronthaul deploys clock synchronization, but not the backhaul.</t>

<t>In result, it could be a challenge
to introduce new applications such as the above mentioned remote PLC, driving applications if
they wanted to rely on a bounded latency network service. But even for existing markets such
as in-car or industrial networks, removal or reduction of the need for clock synchronization could
be a significant evolution to reduce cost and increase simplicity of solutions.</t>

</section>
</section>
</section>
<section anchor="glbf-introduction-informative"><name>gLBF introduction (informative)</name>

<section anchor="dampers"><name>Dampers</name>

<t>The principle of the mechanism presented here is the so-called "Damper" mechanism, first mentioned
in the early 1990th, but never standardized back then, primarily because the required forwarding
was considered to be too advanced to be supportable in equipment at the time. These limitations
are not starting to be resolved, and hence it seems like a good time to re-introduce this mechanism.</t>

<t>The principle of damper based forwarding is easily explained: When a packet is sent by a node A,
this node will have measured the latency L, how long the packet was processed by the node. The main factor
of L is  the queuing latency of the packet in A because of competing traffic sent to the
same outgoing interface. Based on the admission control and queuing algorithms used in the node, there
can be a known upper bound M(ax) for this processing latency though, and when the packet then arrives at the
next-hop receiving node B, this node will simply further delay the packet by (B-L), and in result
the packet will have synchronously been forwarded from A to B with a constant latency of M(ax).</t>

<figure title="Forwarding without Damper" anchor="FIG1"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+         +-+      |      |   +-+         +-+      |
|-x-|F|---------|Q|------|------|-x-|F|---------|Q|------|
|   +-+         +-+      | Link |   +-+         +-+      |
+------------------- ----+      +------------------------+
  |<--------- Hop A/B latency --->|
]]></artwork></figure>

<t><xref target="FIG1"/> shows a single hop from node A to node B without Dampers.</t>

<t>A receives a packet. The F)orwarding module determines some outgoing
interface towards node B where it is enqueued into Q because
competing packets may already be in line to be sent from Q to B.
This is because packets may be arriving simultaneously from multiple
different input interfaces on A (not shown in picture), and/or the
speed of the receiving interface on A is higher than the speed of the
link to B.</t>

<t>Forwarding F can be L2 switching and/or L3 routing, the choice does not
impact the considerations described here.</t>

<t>When the packet is finally sent from Q over link to B, B repeats the same steps
towards the next (not shown) node.</t>

<t>(x) is the reception time of
the packet in A and B, and the per-hop latency of the packet
is xB - xA, predominantly determined by the time the packet has
to wait in Q plus any other relevant processing latency, fixed or
variable from F plus the propagation latency of the packet across
link, which is predominantly determined by the serialization latency
of the packet plus the propagation latency of the link, which is
the speed of light in the material used, for example fiber, where
the speed of light is 31 percent slower than across vacuum.</t>

<t>All the factors impacting the hop A/B latency other than Q in A are
naturally bounded: A well defined maximum can be calculated or
overestimated. The transmission of the packet from A to B is composed
from the serialization latency of the packet which can be calculated
from the packet length of the packet and per-packet-bit speed of the
packet. The propagation latency through the link can be calculated from
speed of light and material (speed of light is 31% slower through fiber than
vacuum for example). And so on.</t>

<t>To have a guaranteed bounded latency through Q, an admission control
system is required that tracks, accounts and limits the total amount
of traffic through Q. Admission control mechanisms rely on knowing the
maximum amount of bursts that each traffic flow can cause and adding
up those bursts to determine the maximum amount of simultaneous packet data
in Q that therefore impacts the maximum latency of each individual packet
through Q.</t>

<t>With such an admission control system, one can therefore calculate
a maximum hop A/B propagation latency MAX for a packet, but 
packets will naturally have variable hop A/B latency lower than MAX,
based on differences in packet size and differences in competing
traffic. In result, their relative arrival times xB in B will be different
from their relative arrival times xA in A. This leads to so-called
"burst-aggregation" and hence the problem that the admission control
system can not easily calculate the maximum burst and latency
through Q in B as it can do for Q in A.</t>

<t>If however packets could be made to be forwarded such that
their Hop A/B latency would all be the same (synchronous, on-time), then the
admission control system could apply the same calculus to
B as it was able to apply to A. This is what damper mechanisms attempt to achieve.</t>

<figure title="Forwarding with Damper" anchor="FIG2"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+   +-+   +-+      |      |   +-+   +-+   +-+      |
|-x-|D|-y-|F|---|Q|------|------|-x-|D|-y-|F|---|Q|------|
|   +-+   +-+   +-+      | Link |   +-+   +-+   +-+      |
+------------------------+      +------------------------+
        |<- A/B in-time latency ->|
        |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG2"/> shows the most simple to explain, but not implement, Damper
mechanism to achieve exactly this. Node A measures the time at
xA, sends this value in a packet header to B. B measures the
time directly at reception of the packet in xB. It then delays
the packet for a time (MAX-(xB-yA)). In result, the latency
(yB-yA) will exactly be MAX, up to the accuracy of the damper.</t>

<t>The first challenge with simple approach is the need to synchronize
the clocks between A and B, so that (xB-yA) can correctly be calculated.</t>

<figure title="Forwarding with Damper and measuring" anchor="FIG3"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+   +-+   +-+      |      |   +-+   +-+   +-+      |
|-x-|D|-y-|F|---|Q|----z-|------|-x-|D|-y-|F|---|Q|----z-|
|   +-+   +-+   +-+      | Link |   +-+   +-+   +-+      |
+------------------------+      +------------------------+
        |<- A/B in-time latency ->|
        |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG3"/> shows how this can be resolved by also measuring the time
at z. A calculates d = (MAX1-(zA-yA)) and sends d in a header of the
packet to B. B then delays the packet in D by d relative to the also
locally measured time xB. Because the calculation of d in A and the
delay by d in D does not depend on clock synchronization between A
and B anymore, this approach eliminate the need for clock synchronization.</t>

<t>But in result of this change, the measurement of latency incurred by
transmitting the packet over link is also not included in this
approach.</t>

<t>MAX1 in this approach is the bounded latency for all processing of
a packet except for this link propagation latency P, equivalent to
the speed of light across the transmission medium times the length of the medium,
and MAX = MAX1 + P.</t>

<t>The serialization latencies latency across the sending interface
on A and the receiving interface on B can be included in MAX1 though.
It is only necessary for the measured timestamps zA and xB to
be the logically for the same point in time assuming the link had a minimum
length, e.g.: for a  back to back connection. For example, the reference
time is the time when the first bit of the packet can be observed
on the shortest wire between A an B. A can most likely measure zA only
some fixed offset o of time before r, hence needs to correct zA += o
before calculating d. Likewise, B could for example only measure xB
exactly after the whole packet arrived. this would be l * r later than
the reference time, where r is the serialization rate of the receiving
interface on B and l is the length of the packet. B would hence need
to adjust d -= l * r to subtract this time from the time the packet
needs to be delayed in D.</t>

<figure title="gLBF refined model" anchor="FIG4"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
| +-+    +-+   +-+   +-+ |      | +-+    +-+   +-+   +-+ |
|-|F|--x-|D|-y-|Q|-z-|M|-|------|-|F|--x-|D|-y-|Q|-z-|M|-|
| +-+    +-+   +-+   +-+ |      | +-+    +-+   +-+   +-+ |
+------------------------+      +------------------------+
       |<- Dampened Q ->|              |<- Dampened Q ->|
             |<- A/B in-time latency ->|
             |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG4"/> shows a further refined model for simpler implementation.
Larger routers/switches are typically modular, and forwarding
happens on a different modular component (such as a linecard)
than the queuing for the outgoing interface. Expecting clock
synchronization even within such a large device is undesirable.</t>

<t>In result, <xref target="FIG4"/> shows damper operation as occurring solely before
enqueuing packets into Q and after dequeuing them. The Damper
module measures the x timestamp, extracts d from the packet header,
adjusts it according to the above described considerations and then
delays the packet by that value and enqueues the packet afterwards. 
After the packet is dequeued, the Marking module measures the time
z, adjusts it according to the previously described considerations
calculates the value of d and overwrites the packet header before
sending the packet.</t>

</section>
<section anchor="dampers-and-controller-plane"><name>Dampers and controller-plane</name>

<figure title="Path selection and gLBF example" anchor="FIG5"><artwork><![CDATA[
         Controller-plane:
        Path Control  and
         Admission Control
      ..     .      .      ..
     .       .       .       . 
   +---+   +---+   +---+   +---+  Src---| A |---| B |---| C |---| D |
   +---+   +---+   +---+   +---+
     |       |       |       |
   +---+   +---+   +---+   +---+
   | E |---| F |---| G |---| H |--- Dst
   +---+   +---+   +---+   +---+
]]></artwork></figure>

<t>While the damper mechanism described so far can be realized with different
queuing mechanisms and hence different calculus for every interface
for which bounded latency can be supported, the role of the controller
plane involves other components beside admission control, and those
need to be possible to tightly be coupled with admission control for
efficient use of resources.</t>

<t><xref target="FIG5"/> shows the most common problem. The controller-plane needs to
provide for a new traffic flow from Src to Dst a path through the
network and reserve the resources. The most simple form for just bandwidth
reservation is called Constrained Shortest Path First (CSPF). With the
need to also provide end-to-end latency guarantees in support of bounded
latency, not only does the path calculation becomes more complex, but
many per-hop bounded latency queuing mechanisms support also to select
more than one per-hop latency on the hop, and the controller-plane
needs to determine for each hop of a possible hop, which one is best.</t>

<t>In result, the controller-plane needs to know exactly what parameters
the bounded latency queuing mechanism on each hop/interface can have
to perform these operations, and standardization of these parameters
ultimately results in standardizing the bounded latency queuing mechanism -
and not only the damper part.</t>

</section>
</section>
<section anchor="glbf-spec"><name>gLBF specification (normative)</name>

<section anchor="damper-with-ubs-queuingcalculus"><name>Damper with UBS queuing/calculus</name>

<t>guaranteed Latency Based Forwarding (gLBF) is using the queuing model
of Urgency Based Scheduling (UBS), which is also used in TSN
Asynchronus Traffic Shaping (TSN-ATS).  This allows gLBF to
re-use or co-develop one and the same controller-plane and its
optimization algorithms for bandwidth and latency control for
TSN-ATS or a DetNet L3 equivalent thereof and gLBF. Hence, gLBF
should provide the most easily operationalised on-time solution
for networks that want to evolve from an in-time model via TSN-ATS,
or that even would want to operate both options in parallel.</t>

<t>Effectively, gLBF replaces the per-flow interleaves regulators of UBS
with per-flow stateless damper operations. Where UBS only provides
for in-time latency guarantees, gLBF provides in result in-time
latency service, but with fundamentally the same calculus as UBS.</t>

<figure title="Path selection and gLBF example" anchor="FIG6"><artwork><![CDATA[
   +-----------------------------------------------+
   | UBS strict priority Queuing block             |
   |                                               |
   |               +--------------+   +----------+ |
   | +-------+   /-| Prio 1 queue |---|          | |
   | | Packet|  /  +--------------+   | Strict   | |
-->| | Prio  |->         ...         -| Priority | |--->
   | | enque |  \  +--------------+   | Schedule | |
   | +-------+   \-| Prio 8 queue |---|          | |
   |               +--------------+   +----------+ |
   +-----------------------------------------------+
]]></artwork></figure>

<t>Strict Priority Scheduling removes packets always from the
highest priority queue (1 is highest) that has a pending packet
and forward it. UBS defines two options for the traffic model
traffic flows. The more flexible one defines that each flow
specifies a rate r and a maximum burst size b (in bits).</t>

<t>In result, the bounded latency of a packet in priority 1 is (roughly)
the latency required to serialize the sum of the bursts 
of all the flows admitted into priority 1. The bounded latency of a packet
in priority 2 is that priority latency plus the latency required
to serialize the sum of the bursts of all the flows admitted into
priority 2. And so on.</t>

</section>
<section anchor="glbf-processing"><name>gLBF processing</name>

<t>The following text extends/refines the damper processing as necessary
for gLBF.</t>

<figure title="refined gLBF processing diagram" anchor="FIG7"><artwork><![CDATA[
   +------------------------+       +------------------------+ 
   | Node A                 |       | Node B                 |
   | +-+    +-+   +-+   +-+ |       | +-+    +-+   +-+   +-+ |
 --|-|F|--x-|D|-y-|Q|-z-|M|-|-------|-|F|--x-|D|-y-|Q|-z-|M|-|--->
IIF| +-+    +-+   +-+   +-+ |OIF IIF| +-+    +-+   +-+   +-+ |OIF
   +------------------------+       +------------------------+
          |<- Dampened Q ->|               |<- Dampened Q ->|
                |<- A/B in-time latency -->|
                |<--A/B on-time latency -------->|
]]></artwork></figure>

<t>The Delay module retrieves the delay from a packet header fields,
requirements for that packet header field are defined in <xref target="DM"/>.</t>

<t>Because serialization speeds on the Incoming InterFace (IIF) will be different
for different IIF, and because D will likely need to compensate the measured
time x based on the packet length and serialization speed, an internal
packet header should maintain this information. Note that this is solely
an implementation consideration and should not impact the configuration model
of gLBF.</t>

<t>The Queuing module is logically as described in UBS, except that
the priority of a packet in gLBF is not selected based on per-flow state,
but instead an appropriate packet header field of the packet is looked
up in the Packet Prio Enque stage of Q and the packet accordingly
enqueued based on that fields value. Possible options for indicating
such a priority in a packet header field are defined below in <xref target="DM"/>.</t>

<t>Like Q, M also needs to look up the packet priority to know MAX1 for
the packet and hence calculate d that it rewrites in the packet header.</t>

<t>The overall configuration data model to be defined for gLBF is hence
the configuration data model for UBS, which is a set of priority queues
and their maximum size, and in addition for gLBF for each of these
queues a controller-plane calculated MAX maximum latency value to be used
by M.</t>

<t>Given how the node knows the serialization speed of OIF, MAX1 for each of
the queues could automatically be derived from the maximum length in bytes
for each of the UBS priority queues, but this may not provide enough
flexibility for fine-tuning (TBD), especially when packet downgrade as
describe below is used.</t>

<t>TBD: paint a small yang-like data model, even though its trivial, like in the TCQF draft.
This should primarily include additional diagnostic data model elements,
such as maximum occupancy of any of the priority queus and number of overruns.</t>

</section>
<section anchor="error-handling"><name>Error handling</name>

<t>A well specified standard for a damper mechanism such as described in
this document needs to take care of error cases as well. The prime error
condition is, when the sending node A of a gLBF packet recognizes that
the packet was enqueued for longer than MAX1 and hence the to-be-calculated
delay to be put into the packet would have to be &lt; 0.</t>

<t>In this case, error signaling, such as ICMPv6/ICMP needs to be triggered
(throttled !), and the packet be discarded - to avoid failure of admission
control / congestion further down the path for other packets as well.</t>

<t>The data model (below) describes an optional data model that allows
instead of discarding of the packet to signal an ECN like mechanism together
with lower-priority forwarding of such packet to inform the receiver directly
about the problem and allow the application to deal with such conditions
better than through other error signaling.</t>

</section>
<section anchor="DM"><name>Data Model for gLBF packet metadata</name>

<t>gLBF is specifically designated to support per-hop, per-flow stateless
operations because it does not require any per-flow, but only per-packet
metadata for its processing. While it is possible to</t>

<section anchor="damper-24-bit-value-unit-1-usec"><name>damper:  24 bit value, unit 1 usec.</name>

<t>This is a value potentially different for every packet in a flow
and it is rewritten by every gLBF forwarder along the path.</t>

<t>gLBF requires a packet header indicating the delay that the damper
on the next hop needs to apply to the packet. Dampening only needs
to be accurate to the extent that synchronous delivery needs to be
accurate. A unit of 1 usec is considered today to be sufficient for
all purposes. The maximum size of delay is the maximum per-hop
queuing latency. 65 msec is considered to be much more than ever
desirable. Therefore, a 16 bit header field is sufficient.</t>

<t>Note that link propagation latency does not impact delay. Hence
the size of delay does not create any constraint on the length of links.</t>

</section>
<section anchor="end-to-end-priority-3-bits"><name>end-to-end-priority: 3 bits</name>

<t>This is a field that needs to be the same for all packets of
a flow so that they will be forwarded with the same latency
processing and hence do not incur different latencies and therefore
possible reordering. This field is written when the packet
enters the gLBF path and only read.</t>

<t>8 Priorities and hence 8 different latencies per hop are considered
sufficient on a per-hop basis. If prio is an end-to-end packet header 
field such as by using 8 different DSCP in IPv6/IP, this results in
8 different latency traffic classes.</t>

</section>
<section anchor="hop-by-hop-priority-3-bits-per-hop"><name>hop-by-hop-priority: 3 bits (per hop)</name>

<t>This is a better, more advanced alternative to the end-to-end-priority.
This data is optional. If it is present for a particular hop, then
it supersedes the end-to-end-priority.</t>

<t>Because this data is per-hop, it should not be encoded in an
end-to-end part of the packet header, but into a hop-by-hop part of the
header:</t>

<t>Because DetNet traffic needs the resources of each flow to be controlled,
re-routing of DetNet flows without the controller-plane is highly
undesirable and could easily result in congestion. A per-hop,
per-flow stateless forwarding mechanism such as SR-MPLS or SRv6 is
therefore highly desirable to provide a per-hop steering field. The priority
could easily be part of such a per-hop steering field by allocating
dynamically, or on-demand up to 8 different SID (Segment IDentifiers),
such as up to 8 MPLS labels, or using 3 bits of the parameter field
of IPv6 SIDs.</t>

<t>When such per-hop priority is indicated, the controller-plane can
support much more than 8 end-to-end latencies, simply by using different
per-hop latencies. For example one flow may use priority 1-1-1-1-1
across four hops, the new slower flow may use 1-2-1-2 across 4 hops,
the next one may use 2-2-2-2, and so on.</t>

</section>
<section anchor="phop-prio-3-bits"><name>phop-prio: 3 bits</name>

<t>This field is re-written on every hop when hop-by-hop-priorities are used.</t>

<t>This is an optional field which may be beneficial in and end-to-end
header if hop-by-hop priorities are used for forwarding in gLBF
and the hop-by-hop-priority of the packet on the prior hop is not
available from the hop-by-hop packet header anymore. This is typically
the case in MPLS based forwarding, such as SR-MPLS because this information
would have been removed. Note that this header field is only required
in support of optional simplified high-speed forwarding implementation
options.</t>

</section>
<section anchor="error-handling-data-items"><name>Error handling data items</name>

<t>Di: one bit</t>

<t>Downgrade intent. This bit is set when the packet enters the gLBF
domain and never changed.</t>

<t>Ds: one bit</t>

<t>Downgrade status. This bit is set to 0 when the packet enters the
gLBF domain and potentially changed to 1 by one gLBF forwarder
as described in the following.</t>

<t>When the Di bit is not set, and a gLBF forwarder recognizes that the
packet can not be forwarded within its guaranteed latency, the packet
is discarded and forwarding plane specific error signaling is triggered
(such as IGMP/ICMPv6). Discarding is done to avoid causing latency
errors further down the path because of this packet.</t>

<t>When this bit is set, the packet will not be discarded, but instead
the Ds bit is set to indicate that the packet must not be forwarded
with gLBF guaranteed latency anymore, but only with best or even
lower-than-best effort.</t>

<t>Di and DS may be encoded into the two ECN bits for IP/IPv6 dataplanes.
The required behavior should be backward compatible with existing
ECN implementations should the packet unexpected pass a router that
processes the packet not as gLBF.</t>

</section>
<section anchor="accuracy-and-sizing-of-the-damper-field-considerations"><name>Accuracy and sizing of the damper field considerations</name>

<t>This memo recommends that the damper field in packet headers has
a size of 24 bits or larger and represents the dampening time with
a resolution of 1 nsec. The following text explains the reasoning
for this recommendation.</t>

<t>The accuracy needed for the damper value in the packet header as well
as the internal calculations performed for gLBF depends on a variety of
factors. The most important factor is the accuracy of the provided
bounded latency as desired/required by the applications.</t>

<t>Even though Ethernet is defined as an asynchronous medium, the
clock accuracy is required to be +- 100 ppm (part per million). For a
1500 byte packet across a 100 Mbps Ethernet the propagation
latency difference between fastest and slowest clock is 24 nsec.
If gLBF is to be supported also on such slower speed networks with
multiple hops, then these errors may add up (?), and it is likely
not possible to provide end-to-end propagation latency accuracy
much better than 1 usec without requiring more transmission
accuracy through mechanisms such as PTP - which gLBF attempts
to avoid/minimize. For higher speed links, errors in short term
propagation latency variation becomes irrelevant though.</t>

<t>In WAN network deployments, propagation latency is in the order of
msec such as ca. 1 msec for 250 Km of fiber. Serialization latency
on a 1gbps Ethernet is ca. 1 usec for a 128 byte packet. It is
likely that an accuracy of propagation latency in the order of
1 usec is sufficient when the round-trip-time is potentially
1000 times faster.</t>

<t>In result of these two simple data points, we consider that the
accuracy of end-to-end propagation latency of interest is 1 usec.
To avoid introducing additive errors, the resolution
of the damper value needs to be higher. This memo therefore
considers to use 1 nsec resolution to represent damper values.
This too is the value used in PTP.</t>

<t>The maximum value and hence the size of the damper field in
packets depends on the maximum latency introduced in
buffering on the sending node plus smaller factors such
as serialization latency. This maximum is primarily depending
on the slowest links to be supported. A 128 byte packet
on a 100 Mbps link has ca. 10 usec propagation latency.
With just 16 bit damper value with nsec accuracy this would
allow only 6 packet buffers. This may be too low. Hence
the damper field should at minimum be at least 24 bits.</t>

</section>
</section>
<section anchor="ingress-and-egress-processing"><name>Ingress and Egress processing</name>

<section anchor="network-ingress-edge-policing"><name>Network ingress edge policing</name>

<t>When packets enter a gLBF domain from a prior hop,
such as a node from a different domain or a sending host, and that
prior hop is sending gLBF packet markings, then the timing
of the packet arrival as well as the markings in packet header(s) for
gLBF MUST only be observed when that prior hop is trusted by the gLBF domain</t>

<t>If the prior hop can not be trusted for correct marking and/or timing of
the packets, the first-hop gLBF node in the gLBF domain MUST implement
a per-flow policer for the flow to avoid that packets from such a prior hop will cause
problems with gLBF guarantees in the gLBF domain.</t>

<t>A policer is to be placed logically after the damper module of gLBF and 
before the queuing module.</t>

<t>Instead of a policer, the ingress edge node of the gLBF domain MAY instead
use a per-flow shaper or interleaved regulator. When a prior hop sends
for example packets of a flow with too high a rate, a shaper would
attempt to avoid discard packets from such a flow until also the burst size
of the flow is exceeded, by further delaying them. A policer would immediately
discard any packets that does not meet their flows envelope.</t>

</section>
<section anchor="glbf-sender-types"><name>gLBF sender types</name>

<section anchor="simple-glbf-senders"><name>Simple gLBF senders</name>

<t>Senders are expected to send their traffic flows such that their
relative timing complies to the admitted traffic envelope. Senders
that for example only send one flow, such as simple sensors or
actors, typically will be able to do this.</t>

<t>When senders can actually do this (send packets for gLBF with the
right timing), then these packets do not need to have gLBF packet header elements.
Instead, this ingress network node can calculate the damper time locally from
the following consideration to avoid any need for gLBF processing
in the sender.</t>

<t>The maximum gLBF damper time in this case is the serialization time of the largest packet
for gLBF received from the sender. Thus, when the sender sends smaller
packets than the maximum admitted packet size, then the first hop network
node needs to dampen packets based on that difference in serialization time.</t>

</section>
<section anchor="normal-glbf-senders"><name>Normal gLBF senders</name>

<t>When senders can not fully comply to send packets with their
admitted envelope, then they need to implement gLBF and indicate in the packet header the
gLBF damper value. For example, when the sender can not ensure that
at the target sending time of a gLBF packet the outgoing interface is
free, then that other still serializing packet will impact the timing
of the following packet(s) for gLBF. Another reason is when the sender has to send
packets from multiple flows and those can not or are are not generated in a coordinated
fashion to avoid delay, then they could compete on the outgoing interface
of the sender, introducing delay.</t>

<t>Normal gLBF senders simply need to implement the queue and marking stage
of gLBF, but not the dampening stage, because that only applies to receivers/forwarders.</t>

</section>
<section anchor="non-glbf-senders"><name>Non gLBF senders</name>

<t>When senders can not be simple gLBF senders but can also not
implement the gLBF queuing and marking stage, then the following
first hop node of the gLBF domain needs to treat them like untrusted
prior hop but always use a shaper or interleaved regulator so as not
to discard their packets.</t>

</section>
</section>
<section anchor="receivers-and-glbf"><name>receivers and gLBF</name>

<section anchor="normal-glbf-receivers"><name>Normal gLBF receivers</name>

<t>Normal gLBF receivers can process packet gLBF markings and need to 
therefore implement the gLBF dampening block.</t>

</section>
<section anchor="glbf-incapable-receivers"><name>gLBF incapable receivers</name>

<t>When receivers can not implement the gLBF dampening stage, then
the worst-case burst that may arrive at the receiver is to be
counted as added jitter to the end-to-end service.</t>

<t>It is impossible to let the network eliminate such bursts without
additional coordination and gating of packets across all senders
and their network ingress nodes by gating of those packets. This is
not a gLBF specific issue, but simply a limitation of the (near)
synchronous service model offered by gLBF and equally exists
in any delay and latency model with this type of service:</t>

<t>Consider a set of N senders conspire to generate a burst at the
same receiver. They do know from the admission control model the
latency each of them has to that receiver and can thus time the generation
of packets such that the last-hop router would have to send all those
N packets (one from each sender) in parallel on the interface. Which
is obviously not possible.</t>

<t>With gLBF capable receivers, this possible burst is taken into account
by including the latency introduced by such a worst-case burst into the
end-to-end latency through the controller-plane, and indicating the actual
latency that the packet needs to be dampened in the gLBF header field to the receiver.
But when the receiver does not support such dampening, then that
maximum last-hop burst-size simply turns into possible jitter.</t>

</section>
</section>
<section anchor="further-considerations"><name>Further considerations</name>

<t>A host may be a different type of gLBF sender than it is gLBF receiver.
In a common case in cloud applications, a container or VM in a data center
may the a sender/receiver, and such an application may be considered
to be trusted by the gLBF domain if it is an application of the network
operator itself (such as part of a higher level service of the network operator),
but not when it is a customer application.</t>

<t>gLBF marking needs to happen after contention of packets from all applications,
so it is something that can considered to happen inside the operating system.
This operating system of such a host may not (yet) implement gLBF, so
it may not be possible to correctly generate the gLBF marking as a sender.
Instead, the application may generate the appropriate packet markings for
steering and gLBF, but may need to leave the damper marking incorrect.</t>

<t>On the other hand, dampening received gLBF packets on a receiver can happen at the
application level, so that the operating system does not need to do it. Such
dampening is exactly the same functionality that in applications is normally
called "playout buffering", except that it will be a much smaller amount of
delay time because playout buffering needs to take the whole path delay into
account, whereas gLBF dampening is only for the prior hop.</t>

</section>
<section anchor="summary-1"><name>Summary</name>

<t>There is a non-trivial set of options for ingress/egress processing
that could be beneficial to simplify and secure dealing with different
type of sender and receivers.</t>

<t>Later versions of this memo can attempt
to define specific profiles of edge behavior to limit the recommended
set of implememtation options for sender/receivers and gLBF edge nodes.</t>

</section>
</section>
</section>
<section anchor="controller-plane-considerations-informative"><name>Controller-plane considerations (informative)</name>

<section anchor="glbf-versus-ubs-tsn-ats"><name>gLBF versus UBS / TSN-ATS</name>

<t>By relying on <xref target="UBS"/> for both the traffic model as well as the
bounded latency calculus, gLBF should be easy to operationalize
by relying on controller-plane implementations for TSN-ATS: UBS/TSN-ATS
and gLBF provide the same bounded latency and use the same model
to manage bandwidth for different flows: By calculating which
flow needs to go on which hop into which priority queues.</t>

<t>The main change to a UBS/TSN-ATS controller-plane when using gLBF
is that when a flow is to be admitted into the network, removed,
or rerouted. In UBS, each of these operations imply that the
controller-plane needs to signal to each node along the path
the traffic flow parameters so the forwarding plane can establish
the per-hop,per-flow state for the flow. Depending on network
configuration this will also imply configuration of the next-hop
for the flow for the routing.</t>

<t>For gLBF hop-by-hop operations, the first hop needs to receive
the per-path or per-hop priority information that is then imposed
into an appropriate packet header for the flows packets.</t>

</section>
<section anchor="first-hop-policing"><name>first-hop policing</name>

<t>In gLBF, the controller-plane has to perform this action only against
the ingress node to the gLBF domain. The traffic parameters such as
rate and burst size are only relevant to establish a policer so
that the flow can not violate the admitted traffic parameters for
the flow. This "policing" on the first hop is actually a function
independent of gLBF, UBS or any other method used across the path.</t>

</section>
<section anchor="path-steering"><name>path steering</name>

<t>gLBF operated independently of the path steering mechanism, but
the controller-plane will very likely want to ensure that gLBF
(or for that matter any DetNet) traffic does not unexpectedly gets
rerouted by in-networking routing mechanisms because normally
it will or can not reserve resources for such re-routed flows
on such arbitrary failure paths without significant additional
effort and/or waste of resources.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA considerations</name>

<t>None yet.</t>

</section>
<section anchor="changelog"><name>Changelog</name>

<t>[RFC-editor: please remove]</t>

<t>00 Initial version.</t>

<t>01 Added use cases from  Stefan</t>

<t>02 refresh only, waiting for progress in WG discussion</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2210">
  <front>
    <title>The Use of RSVP with IETF Integrated Services</title>
    <author fullname="J. Wroclawski" initials="J." surname="Wroclawski"/>
    <date month="September" year="1997"/>
    <abstract>
      <t>This note describes the use of the RSVP resource reservation protocol with the Controlled-Load and Guaranteed QoS control services. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2210"/>
  <seriesInfo name="DOI" value="10.17487/RFC2210"/>
</reference>

<reference anchor="RFC2212">
  <front>
    <title>Specification of Guaranteed Quality of Service</title>
    <author fullname="S. Shenker" initials="S." surname="Shenker"/>
    <author fullname="C. Partridge" initials="C." surname="Partridge"/>
    <author fullname="R. Guerin" initials="R." surname="Guerin"/>
    <date month="September" year="1997"/>
    <abstract>
      <t>This memo describes the network element behavior required to deliver a guaranteed service (guaranteed delay and bandwidth) in the Internet. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2212"/>
  <seriesInfo name="DOI" value="10.17487/RFC2212"/>
</reference>

<reference anchor="RFC2474">
  <front>
    <title>Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
    <author fullname="K. Nichols" initials="K." surname="Nichols"/>
    <author fullname="S. Blake" initials="S." surname="Blake"/>
    <author fullname="F. Baker" initials="F." surname="Baker"/>
    <author fullname="D. Black" initials="D." surname="Black"/>
    <date month="December" year="1998"/>
    <abstract>
      <t>This document defines the IP header field, called the DS (for differentiated services) field. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2474"/>
  <seriesInfo name="DOI" value="10.17487/RFC2474"/>
</reference>

<reference anchor="RFC3270">
  <front>
    <title>Multi-Protocol Label Switching (MPLS) Support of Differentiated Services</title>
    <author fullname="F. Le Faucheur" initials="F." role="editor" surname="Le Faucheur"/>
    <author fullname="L. Wu" initials="L." surname="Wu"/>
    <author fullname="B. Davie" initials="B." surname="Davie"/>
    <author fullname="S. Davari" initials="S." surname="Davari"/>
    <author fullname="P. Vaananen" initials="P." surname="Vaananen"/>
    <author fullname="R. Krishnan" initials="R." surname="Krishnan"/>
    <author fullname="P. Cheval" initials="P." surname="Cheval"/>
    <author fullname="J. Heinanen" initials="J." surname="Heinanen"/>
    <date month="May" year="2002"/>
    <abstract>
      <t>This document defines a flexible solution for support of Differentiated Services (Diff-Serv) over Multi-Protocol Label Switching (MPLS) networks. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="3270"/>
  <seriesInfo name="DOI" value="10.17487/RFC3270"/>
</reference>

<reference anchor="RFC8655">
  <front>
    <title>Deterministic Networking Architecture</title>
    <author fullname="N. Finn" initials="N." surname="Finn"/>
    <author fullname="P. Thubert" initials="P." surname="Thubert"/>
    <author fullname="B. Varga" initials="B." surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <date month="October" year="2019"/>
    <abstract>
      <t>This document provides the overall architecture for Deterministic Networking (DetNet), which provides a capability to carry specified unicast or multicast data flows for real-time applications with extremely low data loss rates and bounded latency within a network domain. Techniques used include 1) reserving data-plane resources for individual (or aggregated) DetNet flows in some or all of the intermediate nodes along the path of the flow, 2) providing explicit routes for DetNet flows that do not immediately change with the network topology, and 3) distributing data from DetNet flow packets over time and/or space to ensure delivery of each packet's data in spite of the loss of a path. DetNet operates at the IP layer and delivers service over lower-layer technologies such as MPLS and Time- Sensitive Networking (TSN) as defined by IEEE 802.1.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8655"/>
  <seriesInfo name="DOI" value="10.17487/RFC8655"/>
</reference>

<reference anchor="RFC8200">
  <front>
    <title>Internet Protocol, Version 6 (IPv6) Specification</title>
    <author fullname="S. Deering" initials="S." surname="Deering"/>
    <author fullname="R. Hinden" initials="R." surname="Hinden"/>
    <date month="July" year="2017"/>
    <abstract>
      <t>This document specifies version 6 of the Internet Protocol (IPv6). It obsoletes RFC 2460.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="86"/>
  <seriesInfo name="RFC" value="8200"/>
  <seriesInfo name="DOI" value="10.17487/RFC8200"/>
</reference>

<reference anchor="RFC8964">
  <front>
    <title>Deterministic Networking (DetNet) Data Plane: MPLS</title>
    <author fullname="B. Varga" initials="B." role="editor" surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <author fullname="L. Berger" initials="L." surname="Berger"/>
    <author fullname="A. Malis" initials="A." surname="Malis"/>
    <author fullname="S. Bryant" initials="S." surname="Bryant"/>
    <author fullname="J. Korhonen" initials="J." surname="Korhonen"/>
    <date month="January" year="2021"/>
    <abstract>
      <t>This document specifies the Deterministic Networking (DetNet) data plane when operating over an MPLS Packet Switched Network. It leverages existing pseudowire (PW) encapsulations and MPLS Traffic Engineering (MPLS-TE) encapsulations and mechanisms. This document builds on the DetNet architecture and data plane framework.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8964"/>
  <seriesInfo name="DOI" value="10.17487/RFC8964"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC3209">
  <front>
    <title>RSVP-TE: Extensions to RSVP for LSP Tunnels</title>
    <author fullname="D. Awduche" initials="D." surname="Awduche"/>
    <author fullname="L. Berger" initials="L." surname="Berger"/>
    <author fullname="D. Gan" initials="D." surname="Gan"/>
    <author fullname="T. Li" initials="T." surname="Li"/>
    <author fullname="V. Srinivasan" initials="V." surname="Srinivasan"/>
    <author fullname="G. Swallow" initials="G." surname="Swallow"/>
    <date month="December" year="2001"/>
    <abstract>
      <t>This document describes the use of RSVP (Resource Reservation Protocol), including all the necessary extensions, to establish label-switched paths (LSPs) in MPLS (Multi-Protocol Label Switching). Since the flow along an LSP is completely identified by the label applied at the ingress node of the path, these paths may be treated as tunnels. A key application of LSP tunnels is traffic engineering with MPLS as specified in RFC 2702. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="3209"/>
  <seriesInfo name="DOI" value="10.17487/RFC3209"/>
</reference>

<reference anchor="RFC4875">
  <front>
    <title>Extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for Point-to-Multipoint TE Label Switched Paths (LSPs)</title>
    <author fullname="R. Aggarwal" initials="R." role="editor" surname="Aggarwal"/>
    <author fullname="D. Papadimitriou" initials="D." role="editor" surname="Papadimitriou"/>
    <author fullname="S. Yasukawa" initials="S." role="editor" surname="Yasukawa"/>
    <date month="May" year="2007"/>
    <abstract>
      <t>This document describes extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for the set up of Traffic Engineered (TE) point-to-multipoint (P2MP) Label Switched Paths (LSPs) in Multi- Protocol Label Switching (MPLS) and Generalized MPLS (GMPLS) networks. The solution relies on RSVP-TE without requiring a multicast routing protocol in the Service Provider core. Protocol elements and procedures for this solution are described.</t>
      <t>There can be various applications for P2MP TE LSPs such as IP multicast. Specification of how such applications will use a P2MP TE LSP is outside the scope of this document. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="4875"/>
  <seriesInfo name="DOI" value="10.17487/RFC4875"/>
</reference>

<reference anchor="RFC8296">
  <front>
    <title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
    <author fullname="IJ. Wijnands" initials="IJ." role="editor" surname="Wijnands"/>
    <author fullname="E. Rosen" initials="E." role="editor" surname="Rosen"/>
    <author fullname="A. Dolganow" initials="A." surname="Dolganow"/>
    <author fullname="J. Tantsura" initials="J." surname="Tantsura"/>
    <author fullname="S. Aldrin" initials="S." surname="Aldrin"/>
    <author fullname="I. Meilik" initials="I." surname="Meilik"/>
    <date month="January" year="2018"/>
    <abstract>
      <t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a "multicast domain", without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol. When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent. The ingress router then encapsulates the packet in a BIER header. The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header. The details of the encapsulation depend on the type of network used to realize the multicast domain. This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8296"/>
  <seriesInfo name="DOI" value="10.17487/RFC8296"/>
</reference>

<reference anchor="RFC8402">
  <front>
    <title>Segment Routing Architecture</title>
    <author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"/>
    <author fullname="S. Previdi" initials="S." role="editor" surname="Previdi"/>
    <author fullname="L. Ginsberg" initials="L." surname="Ginsberg"/>
    <author fullname="B. Decraene" initials="B." surname="Decraene"/>
    <author fullname="S. Litkowski" initials="S." surname="Litkowski"/>
    <author fullname="R. Shakir" initials="R." surname="Shakir"/>
    <date month="July" year="2018"/>
    <abstract>
      <t>Segment Routing (SR) leverages the source routing paradigm. A node steers a packet through an ordered list of instructions, called "segments". A segment can represent any instruction, topological or service based. A segment can have a semantic local to an SR node or global within an SR domain. SR provides a mechanism that allows a flow to be restricted to a specific topological path, while maintaining per-flow state only at the ingress node(s) to the SR domain.</t>
      <t>SR can be directly applied to the MPLS architecture with no change to the forwarding plane. A segment is encoded as an MPLS label. An ordered list of segments is encoded as a stack of labels. The segment to process is on the top of the stack. Upon completion of a segment, the related label is popped from the stack.</t>
      <t>SR can be applied to the IPv6 architecture, with a new type of routing header. A segment is encoded as an IPv6 address. An ordered list of segments is encoded as an ordered list of IPv6 addresses in the routing header. The active segment is indicated by the Destination Address (DA) of the packet. The next active segment is indicated by a pointer in the new routing header.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8402"/>
  <seriesInfo name="DOI" value="10.17487/RFC8402"/>
</reference>

<reference anchor="RFC8754">
  <front>
    <title>IPv6 Segment Routing Header (SRH)</title>
    <author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"/>
    <author fullname="D. Dukes" initials="D." role="editor" surname="Dukes"/>
    <author fullname="S. Previdi" initials="S." surname="Previdi"/>
    <author fullname="J. Leddy" initials="J." surname="Leddy"/>
    <author fullname="S. Matsushima" initials="S." surname="Matsushima"/>
    <author fullname="D. Voyer" initials="D." surname="Voyer"/>
    <date month="March" year="2020"/>
    <abstract>
      <t>Segment Routing can be applied to the IPv6 data plane using a new type of Routing Extension Header called the Segment Routing Header (SRH). This document describes the SRH and how it is used by nodes that are Segment Routing (SR) capable.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8754"/>
  <seriesInfo name="DOI" value="10.17487/RFC8754"/>
</reference>

<reference anchor="RFC8938">
  <front>
    <title>Deterministic Networking (DetNet) Data Plane Framework</title>
    <author fullname="B. Varga" initials="B." role="editor" surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <author fullname="L. Berger" initials="L." surname="Berger"/>
    <author fullname="A. Malis" initials="A." surname="Malis"/>
    <author fullname="S. Bryant" initials="S." surname="Bryant"/>
    <date month="November" year="2020"/>
    <abstract>
      <t>This document provides an overall framework for the Deterministic Networking (DetNet) data plane. It covers concepts and considerations that are generally common to any DetNet data plane specification. It describes related Controller Plane considerations as well.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8938"/>
  <seriesInfo name="DOI" value="10.17487/RFC8938"/>
</reference>

<reference anchor="RFC8986">
  <front>
    <title>Segment Routing over IPv6 (SRv6) Network Programming</title>
    <author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"/>
    <author fullname="P. Camarillo" initials="P." role="editor" surname="Camarillo"/>
    <author fullname="J. Leddy" initials="J." surname="Leddy"/>
    <author fullname="D. Voyer" initials="D." surname="Voyer"/>
    <author fullname="S. Matsushima" initials="S." surname="Matsushima"/>
    <author fullname="Z. Li" initials="Z." surname="Li"/>
    <date month="February" year="2021"/>
    <abstract>
      <t>The Segment Routing over IPv6 (SRv6) Network Programming framework enables a network operator or an application to specify a packet processing program by encoding a sequence of instructions in the IPv6 packet header.</t>
      <t>Each instruction is implemented on one or several nodes in the network and identified by an SRv6 Segment Identifier in the packet.</t>
      <t>This document defines the SRv6 Network Programming concept and specifies the base set of SRv6 behaviors that enables the creation of interoperable overlays with underlay optimization.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8986"/>
  <seriesInfo name="DOI" value="10.17487/RFC8986"/>
</reference>

<reference anchor="RFC9016">
  <front>
    <title>Flow and Service Information Model for Deterministic Networking (DetNet)</title>
    <author fullname="B. Varga" initials="B." surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <author fullname="R. Cummings" initials="R." surname="Cummings"/>
    <author fullname="Y. Jiang" initials="Y." surname="Jiang"/>
    <author fullname="D. Fedyk" initials="D." surname="Fedyk"/>
    <date month="March" year="2021"/>
    <abstract>
      <t>This document describes the flow and service information model for Deterministic Networking (DetNet). These models are defined for IP and MPLS DetNet data planes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9016"/>
  <seriesInfo name="DOI" value="10.17487/RFC9016"/>
</reference>

<reference anchor="RFC9262">
  <front>
    <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
    <author fullname="T. Eckert" initials="T." role="editor" surname="Eckert"/>
    <author fullname="M. Menth" initials="M." surname="Menth"/>
    <author fullname="G. Cauchie" initials="G." surname="Cauchie"/>
    <date month="October" year="2022"/>
    <abstract>
      <t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for "Bit Index Explicit Replication" (BIER) packets (RFC 8279); it is called "Tree Engineering for Bit Index Explicit Replication" (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.</t>
      <t>BIER-TE introduces a new semantic for "bit positions" (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate "Bit-Forwarding Egress Routers" (BFERs). A BIER-TE "packets BitString" therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER "subdomains" (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the "Interior Gateway Protocol" (IGP).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9262"/>
  <seriesInfo name="DOI" value="10.17487/RFC9262"/>
</reference>

<reference anchor="RFC9320">
  <front>
    <title>Deterministic Networking (DetNet) Bounded Latency</title>
    <author fullname="N. Finn" initials="N." surname="Finn"/>
    <author fullname="J.-Y. Le Boudec" initials="J.-Y." surname="Le Boudec"/>
    <author fullname="E. Mohammadpour" initials="E." surname="Mohammadpour"/>
    <author fullname="J. Zhang" initials="J." surname="Zhang"/>
    <author fullname="B. Varga" initials="B." surname="Varga"/>
    <date month="November" year="2022"/>
    <abstract>
      <t>This document presents a timing model for sources, destinations, and Deterministic Networking (DetNet) transit nodes. Using the model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing methods. The methodology can be used by the management and control planes and by resource reservation algorithms to provide bounded latency and zero congestion loss for the DetNet service.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9320"/>
  <seriesInfo name="DOI" value="10.17487/RFC9320"/>
</reference>


<reference anchor="SCQF">
   <front>
      <title>Segment Routing (SR) Based Bounded Latency</title>
      <author fullname="Mach Chen" initials="M." surname="Chen">
         <organization>Huawei</organization>
      </author>
      <author fullname="Xuesong Geng" initials="X." surname="Geng">
         <organization>Huawei</organization>
      </author>
      <author fullname="Zhenqiang Li" initials="Z." surname="Li">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Jinoo Joung" initials="J." surname="Joung">
         <organization>Sangmyung University</organization>
      </author>
      <author fullname="Jeong-dong Ryoo" initials="J." surname="Ryoo">
         <organization>ETRI</organization>
      </author>
      <date day="7" month="July" year="2023"/>
      <abstract>
	 <t>   One of the goals of DetNet is to provide bounded end-to-end latency
   for critical flows.  This document defines how to leverage Segment
   Routing (SR) to implement bounded latency.  Specifically, the SR
   Identifier (SID) is used to specify transmission time (cycles) of a
   packet.  When forwarding devices along the path follow the
   instructions carried in the packet, the bounded latency is achieved.
   This is called Cycle Specified Queuing and Forwarding (CSQF) in this
   document.

   Since SR is a source routing technology, no per-flow state is
   maintained at intermediate and egress nodes, SR-based CSQF naturally
   supports flow aggregation that is deemed to be a key capability to
   allow DetNet to scale to large networks.


	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-chen-detnet-sr-based-bounded-latency-03"/>
   
</reference>


<reference anchor="LSDN">
   <front>
      <title>Large-Scale Deterministic IP Network</title>
      <author fullname="Li Qiang" initials="L." surname="Qiang">
         <organization>Huawei</organization>
      </author>
      <author fullname="Xuesong Geng" initials="X." surname="Geng">
         <organization>Huawei</organization>
      </author>
      <author fullname="Bingyang Liu" initials="B." surname="Liu">
         <organization>Huawei</organization>
      </author>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Huawei</organization>
      </author>
      <author fullname="Liang Geng" initials="L." surname="Geng">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Guangpeng Li" initials="G." surname="Li">
         </author>
      <date day="2" month="September" year="2019"/>
      <abstract>
	 <t>   This document presents the overall framework and key method for
   Large-scale Deterministic Network (LDN).  LDN can provide bounded
   latency and delay variation (jitter) without requiring precise time
   synchronization among nodes, or per-flow state in transit nodes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-qiang-detnet-large-scale-detnet-05"/>
   
</reference>


<reference anchor="TCQF">
   <front>
      <title>Deterministic Networking (DetNet) Data Plane - Tagged Cyclic Queuing and Forwarding (TCQF) for bounded latency with low jitter in large scale DetNets</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname="Yizhou Li" initials="Y." surname="Li">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Stewart Bryant" initials="S." surname="Bryant">
         <organization>University of Surrey ICS</organization>
      </author>
      <author fullname="Andrew G. Malis" initials="A. G." surname="Malis">
         <organization>Malis Consulting</organization>
      </author>
      <author fullname="Jeong-dong Ryoo" initials="J." surname="Ryoo">
         <organization>ETRI</organization>
      </author>
      <author fullname="Peng Liu" initials="P." surname="Liu">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Guangpeng Li" initials="G." surname="Li">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Shoushou Ren" initials="S." surname="Ren">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Fan Yang" initials="F." surname="Yang">
         <organization>Huawei Technologies</organization>
      </author>
      <date day="7" month="July" year="2023"/>
      <abstract>
	 <t>   This memo specifies a forwarding method for bounded latency and
   bounded jitter for Deterministic Networks and is a variant of the
   IEEE TSN Cyclic Queuing and Forwarding (CQF) method.  Tagged CQF
   (TCQF) supports more than 2 cycles and indicates the cycle number via
   an existing or new packet header field called the tag to replace the
   cycle mapping in CQF which is based purely on synchronized reception
   clock.

   This memo standardizes TCQF as a mechanism independent of the tagging
   method used.  It also specifies tagging via the (1) the existing MPLS
   packet Traffic Class (TC) field for MPLS packets, (2) the IP/IPv6
   DSCP field for IP/IPv6 packets, and (3) a new TCQF Option header for
   IPv6 packets.

   Target benefits of TCQF include low end-to-end jitter, ease of high-
   speed hardware implementation, optional ability to support large
   number of flow in large networks via DiffServ style aggregation by
   applying TCQF to the DetNet aggregate instead of each DetNet flow
   individually, and support of wide-area DetNet networks with arbitrary
   link latencies and latency variations as well as low accuracy clock
   synchronization.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-eckert-detnet-tcqf-04"/>
   
</reference>


<reference anchor="I-D.dang-queuing-with-multiple-cyclic-buffers">
   <front>
      <title>A Queuing Mechanism with Multiple Cyclic Buffers</title>
      <author fullname="Bingyang Liu" initials="B." surname="Liu">
         <organization>Huawei</organization>
      </author>
      <author fullname="Joanna Dang" initials="J." surname="Dang">
         <organization>Huawei</organization>
      </author>
      <date day="22" month="February" year="2021"/>
      <abstract>
	 <t>   This document presents a queuing mechanism with multiple cyclic
   buffers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-dang-queuing-with-multiple-cyclic-buffers-00"/>
   
</reference>


<reference anchor="BIER-TE">
   <front>
      <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname="Michael Menth" initials="M." surname="Menth">
         <organization>University of Tuebingen</organization>
      </author>
      <author fullname="Gregory Cauchie" initials="G." surname="Cauchie">
         <organization>KOEVOO</organization>
      </author>
      <date day="25" month="April" year="2022"/>
      <abstract>
	 <t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for &quot;Bit Index Explicit Replication&quot; (BIER) packets (RFC 8279); it is called &quot;Tree Engineering for Bit Index Explicit Replication&quot; (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.

 BIER-TE introduces a new semantic for &quot;bit positions&quot; (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFERs). A BIER-TE &quot;packets BitString&quot; therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER &quot;subdomains&quot; (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the &quot;Interior Gateway Protocol&quot; (IGP).
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-bier-te-arch-13"/>
   
</reference>


<reference anchor="DNBL">
   <front>
      <title>Deterministic Networking (DetNet) Bounded Latency</title>
      <author fullname="Norman Finn" initials="N." surname="Finn">
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname="Jean-Yves Le Boudec" initials="J." surname="Le Boudec">
         <organization>EPFL</organization>
      </author>
      <author fullname="Ehsan Mohammadpour" initials="E." surname="Mohammadpour">
         <organization>EPFL</organization>
      </author>
      <author fullname="Jiayi Zhang" initials="J." surname="Zhang">
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname="Balazs Varga" initials="B." surname="Varga">
         <organization>Ericsson</organization>
      </author>
      <date day="8" month="April" year="2022"/>
      <abstract>
	 <t>This document presents a timing model for sources, destinations, and Deterministic Networking (DetNet) transit nodes.  Using the model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing methods.  The methodology can be used by the management and control planes and by resource reservation algorithms to provide bounded latency and zero congestion loss for the DetNet service.
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-detnet-bounded-latency-10"/>
   
</reference>


<reference anchor="I-D.stein-srtsn">
   <front>
      <title>Segment Routed Time Sensitive Networking</title>
      <author fullname="Yaakov (J) Stein" initials="Y. J." surname="Stein">
         <organization>RAD</organization>
      </author>
      <date day="29" month="August" year="2021"/>
      <abstract>
	 <t>   Routers perform two distinct user-plane functionalities, namely
   forwarding (where the packet should be sent) and scheduling (when the
   packet should be sent).  One forwarding paradigm is segment routing,
   in which forwarding instructions are encoded in the packet in a stack
   data structure, rather than programmed into the routers.  Time
   Sensitive Networking and Deterministic Networking provide several
   mechanisms for scheduling under the assumption that routers are time
   synchronized.  The most effective mechanisms for delay minimization
   involve per-flow resource allocation.

   SRTSN is a unified approach to forwarding and scheduling that uses a
   single stack data structure.  Each stack entry consists of a
   forwarding portion (e.g., IP addresses or suffixes) and a scheduling
   portion (deadline by which the packet must exit the router).  SRTSN
   thus fully implements network programming for time sensitive flows,
   by prescribing to each router both to-where and by-when each packet
   should be sent.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-stein-srtsn-01"/>
   
</reference>


<reference anchor="I-D.eckert-detnet-bounded-latency-problems">
   <front>
      <title>Problems with existing DetNet bounded latency queuing mechanisms</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname="Stewart Bryant" initials="S." surname="Bryant">
         <organization>Stewart Bryant Ltd</organization>
      </author>
      <date day="12" month="July" year="2021"/>
      <abstract>
	 <t>   The purpose of this memo is to explain the challenges and limitations
   of existing (standardized) bounded latency queuing mechanisms for
   desirable (large scale) MPLS and/or IP based networks to allow them
   to support DetNet services.  These challenges relate to low-cost,
   high-speed hardware implementations, desirable network design
   approaches, system complexity, reliability, scalability, cost of
   signaling, performance and jitter experience for the DetNet
   applications.  Many of these problems are rooted in the use of per-
   hop, per-flow (DetNet) forwarding and queuing state, but highly
   accurate network wide time synchronization can be another challenge
   for some networks.

   This memo does not intend to propose a specific queuing solution, but
   in the same way in which it describes the challenges of mechanisms,
   it reviews how those problem are addressed by currently proposed new
   queuing mechanisms.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-eckert-detnet-bounded-latency-problems-00"/>
   
</reference>


<reference anchor="UBS" >
  <front>
    <title>Urgency-Based Scheduler for Time-Sensitive Switched Ethernet Networks</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <author initials="S." surname="Samii" fullname="Soheil Samii">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="IEEE" value="28th Euromicro Conference on Real-Time Systems (ECRTS)"/>
</reference>
<reference anchor="LBF" >
  <front>
    <title>High-Precision Latency Forwarding over Packet-Programmable Networks</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <date year="2020" month="April"/>
  </front>
  <seriesInfo name="IEEE" value="2020 IEEE/IFIP Network Operations and Management Symposium (NOMS 2020)"/>
  <seriesInfo name="doi" value="10.1109/NOMS47738.2020.9110431"/>
</reference>
<reference anchor="gLBF" target="https://dl.ifip.org/db/conf/cnsm/cnsm2021/1570754857.pdf">
  <front>
    <title>gLBF: Per-Flow Stateless Packet Forwarding with Guaranteed Latency and Near-Synchronous Jitter,</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization></organization>
    </author>
    <date year="2021" month="October"/>
  </front>
  <seriesInfo name="IEEE" value="2021 17th International Conference on Network and Service Management (CNSM), Izmir, Turkey"/>
  <seriesInfo name="doi" value="10.23919/CNSM52442.2021.9615538"/>
</reference>
<reference anchor="gLBF-Springer2023" >
  <front>
    <title>High Precision Latency Forwarding for Wide Area Networks Through Intelligent In-Packet Header Processing (gLBF)</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization></organization>
    </author>
    <date year="2023" month="February"/>
  </front>
  <seriesInfo name="Springer" value="Journal of Network and Systems Management, 31, Article number: 34 (2023)"/>
  <seriesInfo name="doi" value="https://doi.org/10.1007/s10922-022-09718-9"/>
</reference>
<reference anchor="IEEE802.1Q" target="https://doi.org/10.1109/ieeestd.2018.8403927">
  <front>
    <title>IEEE Standard for Local and Metropolitan Area Network — Bridges and Bridged Networks (IEEE Std 802.1Q)</title>
    <author >
      <organization>IEEE 802.1 Working Group</organization>
    </author>
    <date year="2018"/>
  </front>
  <seriesInfo name="doi" value="10.1109/ieeestd.2018.8403927"/>
</reference>
<reference anchor="IEEE802.1Qbv" >
  <front>
    <title>IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged Networks - Amendment 25: Enhancements for Scheduled Traffic (TAS)</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2015"/>
  </front>
</reference>
<reference anchor="CQF" >
  <front>
    <title>IEEE Std 802.1Qch-2017: IEEE Standard for Local and Metropolitan Area Networks - Bridges and Bridged Networks - Amendment 29: Cyclic Queuing and Forwarding (CQF)</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="TSN-ATS" target="https://1.ieee802.org/tsn/802-1qcr/">
  <front>
    <title>P802.1Qcr - Bridges and Bridged Networks Amendment: Asynchronous Traffic Shaping</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <date year="2020" month="July" day="09"/>
  </front>
  <seriesInfo name="IEEE" value=""/>
</reference>
<reference anchor="IPV6-PARMS" target="https://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xhtml">
  <front>
    <title>Internet Protocol Version 6 (IPv6) Parameters</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="IANA" value=""/>
</reference>
<reference anchor="LDN" target="https://dl.ifip.org/db/conf/networking/networking2021/1570696888.pdf">
  <front>
    <title>Towards Large-Scale Deterministic IP Networks</title>
    <author initials="B." surname="Liu" fullname="Binyang Liu">
      <organization></organization>
    </author>
    <author initials="S." surname="Ren" fullname="Shoushou Ren">
      <organization></organization>
    </author>
    <author initials="C." surname="Wang" fullname="Chuang Wang">
      <organization></organization>
    </author>
    <author initials="V." surname="Angilella" fullname="Vincent Angilella">
      <organization></organization>
    </author>
    <author initials="P." surname="Medagliani" fullname="Paolo Medagliani">
      <organization></organization>
    </author>
    <author initials="S." surname="Martin" fullname="Sebastien Martin">
      <organization></organization>
    </author>
    <author initials="J." surname="Leguay" fullname="Jeremie Leguay">
      <organization></organization>
    </author>
    <date year="2021"/>
  </front>
  <seriesInfo name="IEEE" value="2021 IFIP Networking Conference (IFIP Networking)"/>
  <seriesInfo name="doi" value="10.23919/IFIPNetworking52078.2021.9472798"/>
</reference>
<reference anchor="multipleCQF" target="https://www.ieee802.org/1/files/public/docs2021/new-finn-multiple-CQF-0921-v02.pdf">
  <front>
    <title>Multiple Cyclic Queuing and Forwarding</title>
    <author initials="N." surname="Finn" fullname="Norm Finn">
      <organization></organization>
    </author>
    <date year="2021" month="October"/>
  </front>
</reference>


    </references>


<?line 1064?>

<section anchor="high-speed-implementation-considerations"><name>High speed implementation considerations</name>

<section anchor="high-speed-example-pseudocode-instead-of-reference-pseudocode"><name>High speed example pseudocode instead of reference pseudocode</name>

<t>This memo does not describe a normative reference code that aligns with
the normative functional description above <xref target="glbf-spec"/>. The primary reason
is that a naive 1:1 implementation of the functional description would
lead to inferior performance. Nevertheless, the feasibility of high speed
implementations is an important factor in the ability to deploy 
mechanisms like gLBF. Therefore, this appendix describes considerations
for such high speed implementations including pseudocode for on
possible option.</t>

<t><xref target="gLBF"/> describes two approaches for possible optimized hardware implementation
approaches for gLBF. One using "Push In First Out" (PIFO) queues, the
other one times FIFO queues. The following is a representation and
explanation of that second approach because it is hopefully more feasible
for nearer term hardware implementations given the fact that scalable
FIFO high-speed hardware implementations are still a matter for research.</t>

<t>However, the timed FIFO style algorithm presented here is also subject
to possible scalability challenges for hardware because it requires for
each outgoing interface  O(IIF * priorities^2) number of FIFO queues,
where IIF is the number of (incoming) interfaces on the node, and priorities is the
number of priority levels desired (TSN allows up to 8). If however
the priority of flows (packets) used is not per-hop but the same for every
hop (per-path), then the number is just (IIF * priorities).</t>

</section>
<section anchor="ubs-high-speed-implementations"><name>UBS high speed implementations</name>

<t>The algorithm for the pseudocode shown in this appendix further down in this section
is based on the analysis of gLBF behavior done in and for <xref target="gLBF"/>. 
This analysis re-applies the same type of analysis and algorithm that
was done in <xref target="UBS"/> and can be used to implement TSN-ATS in high
speed switching hardware. Therefore, this appendix will start by explaining
the UBS mechanisms.</t>

<t>UBS (see <xref target="UBS"/>, Figure 4), logically consists of two separate stages.
The first stage is a per priority, per incoming interface (IIF) interleaved
regulator. An interleaved regulator is a FIFO where dequeuing of the
queue head packet (qhead) is based on the per-flow state of qhead.</t>

<t>A target departure time for that qhead is calculated from the flow state of
the packet maintained on the router across packets and once that departure time
is reached, the packet is passed to one of the egress strict priority
queues. This is called interleaved regulator, because the FIFO will have
packets from multiple flows (all from the same incoming interface and
outgoing priority), hence 'interleave', and regulator because of the delaying
of the packet up to the target departure time.</t>

<t>The innovation of interleaved regulators as opposed to the prior per-flow shapers
as used in <xref target="RFC2210"/> is the recognition and mathematical proof that the arrival and
target departure times of all packets received from the same IIF (prior hop node)
and the same egress priority will be in order and that they can 
be enqueued into a single FIFO where the per-flow processing only needs to
happen for the qhead. Without (anything but negligible) added latency
vs. per-flow shapers.</t>

<t>With this understanding, the interleaved regulator and following strict
priority stage can easily be combined into a single queuing stage with
appropriate scheduling. In this "flattened" approach, each logical egress
strict priority queue consists of the per-IIF interleaved regulator (FIFO queue)
for that priority.</t>

<t>Scheduling of packets on egress does now need to perform the per-queue
processing of the per-flow state of the qhead, and then take the target
departure time of that packet into account, selecting the interleaved regulator
with the highest priority and earliest target departure time qhead.</t>

</section>
<section anchor="glbf-compared-to-ubs"><name>gLBF compared to UBS</name>

<t>In gLBF, the very same line of thoughts as in UBS can be applied and are the basis
for the described algorithm and shown pseudocode.</t>

<t>In glBF, the order of packets in their arrival and target departure times
depends on the egress priority, the IIF, but also on the priority the packet had
on the prior hop (pprio). All packets with the same (IIF,prio,prio) will arrive
in the same order in which they need to depart, and in which it is therefore
possible to use a FIFO to enqueue the packets and only do timed dequeuing
of the qhead.</t>

<t>Both prio and pprio are of interest, because when gLBF uses an encapsulation
allowing per-hop priority indications, its priority on each hop can be different.
In UBS, priority can equally be different across hops for the same packet,
but the prior hop priority is not necessary to put packets into separate
interleaved regulators because UBS targets in-time delay, where the
interleaved regulator does (only) need to compensate for burst accumulation,
but in gLBF the delay to be introduced depends on the damper value which
depends on the prior hop priority and in result, the order in which in
gLBF packets should depart (absent any burst accumulation) depends also
on the prior hop priority.</t>

<t>Because gLBF does not deal with per-flow state on the router as UBS
does in its interleaved regulators, the FIFOs for gLBF are called timed
FIFOs in this memo and not interleaved regulators</t>

</section>
<section anchor="comparison-to-normative-behavior"><name>Comparison to normative behavior</name>

<t>Whereas the normative description described D, Q and M blocks,
where the D block performs the dampening, and the Q block performs
the priority queuing block, in the high speed hardware optimization,
these are replaced by a single DQ block where the packets are
enqueued into a single stage per-(IIF,pprio,prio) FIFO (similar to UBS) and then
the dampening happens (similar to UBS) on dequeuing from that stage
by the damper time but scheduling/prioritizing packets based on their prio.</t>

<figure title="High Speed single stage gLBF" anchor="FIG-hs-diagram"><artwork><![CDATA[
   +------------------------+       +------------------------+ 
   | Node A                 |       | Node B                 |
   | +-+    +-------+   +-+ |       | +-+    +-------+   +-+ |
 --|-|F|--x-| DQ y  |-z-|M|-|-------|-|F|--x-| DQ y  |-z-|M|-|--->
IIF| +-+    +-------+   +-+ |OIF IIF| +-+    +-------+   +-+ |OIF
   +------------------------+       +------------------------+
          |<- Dampened Q ->|               |<- Dampened Q ->|
                 |<- A/B in-time latency ->|
                 |<--A/B on-time latency -------->|
]]></artwork></figure>

<t>In the normative definition, the damper value to be put into the packet
depended on the time y, where the packet left the damper stage D and
entered the priority queue stage Q. Simplified, the damper value is
(MAX1 - (z - y)).</t>

<t>In the high-speed implementation, the packets are not passed from
a damper state queue to a priority queue. Instead they stay in the
same queue. This is on one hand one of the core reasons why this
approach can support high speed - it does not require two-stage
enqueuing/dequeing/ But it eliminates also the ability to take a time stamp
at time y.</t>

<t>To therefore be able to replicate the normative gLBF behavior with a
single stage, it is necessary in the marking stage M (where the new
damper value is calculated), to somehow know y.</t>

<t>Luckily, y is exactly the target departure time of the packet for
the D and therefore also the DQ stage, so already needs to be
calculated on entry to DQ by calculation: y = (x + damper - &lt;details&gt;),
as explained below.</t>

<t>The pseudocode consists of glbf_enqueue() describing the enqueuing
into the DQ stage, and glbf_dequeue() describing the dequeuing
from the DQ stage. glbf_dequeue() (synchronously) calls 
glbf_send() which represents the marking stage M.</t>

</section>
<section anchor="pseudocode"><name>Pseudocode</name>

<section anchor="glbfenqueue"><name>glbf_enqueue()</name>

<figure title="Reference pseudocode for glbf_enqueue()" anchor="FIG-glbf-enqueue"><artwork><![CDATA[
void glbf_enqueue(pak,oif) {
  tdamp = pak.header.tdamp // damper value from packet
  prio  = pak.header.prio  // this hops packet prio
  pprio = pak.header.pprio // previous hops packet prior
  iif   = pak.context.iif  // incoming interface of packet

  ta = adj_rcv_time(now(),                  \[1]
                    pak.context.iif.speed,
                    pak.context.length)

  td = now() + ta // (dampened earliest) departure time
  pak.context.max1 = max1\[oif,prio]
  enqueue(pak, td, q(oif,iif,prio,pprio))
}
]]></artwork></figure>

<t>pak.header are parsed fields from the received gLBF packet. tdamp is
the damper value.  pak.context is a node local header of the packet.
iif is the interface on which the packet was received.</t>

<t>prio and pprio are current prior hop priority from the packet header.
If for example SRH (<xref target="RFC8754"/>) is used
in conjunction with gLBF, and <xref target="RFC8986"/> formatting of SIDs
is used, then the priority for each hop could be expressed as
a 4-bit SID ARG field (see <xref target="RFC8986"/>, section 3.1) to indicate
16 different priorities per hop.</t>

<t>Parsing the prior hop priority is not a normative requirement of gLBF,
but a specific requirement of the high speed algorithm
presented here to allow the use of single stage timed FIFOs instead of PIFOs.
This type of parsing is not required for SRH, but would be a benefit
of a packet header which like SRH keeps the prior hops information,
opposed to the SR-MPLS approach where past hop SD/Labels are discarded.</t>

<t>now() takes a timestamp from a local (unsynchronised) clock at the
time of execution.</t>

<t>[1] pak.context.ta (time of arrival) is the calculated time at which the first bit of the packet
was entering the incoming interface of the node. adj_rcv_time() is defined
in the next subsection. td is the target
departure time calculated from the current time and the damper
value from the packet. It simply convert the relative damper value to
an absolute timestamp.</t>

<t>max1[oif,prio] is the only gLBF specific interface level state
maintained (read-only) across packets. It is the maximum time calculated
by admission control in the controller-plane for each priority. It
is transferred into a context header field here even though it will
only be used further down in dequeuing because of the assumption that
access to state information is not desirable at the time critical stage
of dequeuing/serialization, whereas such state lookup is very common
for many forwarding plane features before enqueuing.</t>

<t>Finally, the packet is enqueued into a per-oif,iif,prio,pprio timed
FIFO queue.</t>

</section>
<section anchor="adjrcvtime"><name>adj_rcv_time()</name>

<t>To calculate the reference time against which the damper value in the
packet is to be used, this specification assumes the time when the
first bit of the packet is seen on the media connecting to the
incoming interface.</t>

<figure title="Example pseudocode for adv_rcv_time()" anchor="FIG-adj-rcv-time"><artwork><![CDATA[
time_t adj_rcv_time(now, speed, length) {
  time_t now
  int speed, length
      
  return now - length * 8 / speed - FUDGE
}
]]></artwork></figure>

<t>In most simple node equipment, the primary variable latency introduced 
between that (first bit) measurement point and the time when the time
parameter t for adj_rcv_time() can be taken is the deserialization time of the
packet. This can easily be calculated from the packet length as assumed to be 
known from pak.context.length and the bitrate of the incoming interface known
from pak.context.iif.speed plus fixed measured or calculated other
latency FUDGE through internal processing. The example pseudocode, those
are assumed to be static.</t>

<t>If other internal factors in prior forwarding within the node do create
significant enough variation, then those may need compensation through
additional mechanisms. In this case, instead of as shown in
glbf_enqueue(), the reference time for calculation should be taken
directly upon receipt of the packet, before entering the forwarding stage F,
and then used as the now parameter for adj_rcv_time(). This is explicitly
not shown in the code so as to highlight the most simple implementation
option that should be sufficient for most node types.</t>

</section>
<section anchor="glbfdequeue"><name>glbf_dequeue()</name>

<figure title="Pseudocode for glbf_dequeue()" anchor="FIG-glbf-dequeue-"><artwork><![CDATA[
void glbf_dequeue(oif) {
  next_packet: while(1) {
    tnow = now()
    ftd = tnow + 1  // time of first packet to send
    fq = NULL      // queue of first packet to send
    foreach prio in maxpriority...minpriority {
      foreach iif in iifs {
        foreach pprio in priorities}
          // find qhead with earliest departure time
          if (q = q(oif,iif,prio,pprio).qhead) {
            td = q.qhead.td   // target (departure) time
            if td < ftd
              ftd = td
              fq = q
            }
          }
        }
      }
      if fq { // found packet
        pak = dequeue(q,oif)
        glbf_send(oif,tnow,pak)
        break next_packet
      }
    }
  }
}
]]></artwork></figure>

<t>glbf_dequeue() finds the gLBF packet to send as the enqueued packet with the highest
priority and the earliest departure time td (as calculated in glbf_enqueue()),
where td must also not in the future, because otherwise the packet still needs to
be dampened.</t>

<t>The outer loops across this hops prio will find the packet
with exactly those properties, dequeues and sends it. For this,
the  strict priority is expressed through the term maxpriority...minpriority,
which first searches from maximum to minimum priority..</t>

<t>The two inner loops simply look for the packet with the earliest
target departure time across all the (IIF,pprio) timed FIFO queues
for the same prio and OIF.</t>

<t>In ASIC / FPGA implementations, finding this packet is not a sequential
operation as shown in the pseudocode, but can be a single clock-cycle
parallel compare operation across the td values of all queues qheads - at the expense of
chip space, similar to how TCAMs work.</t>

</section>
<section anchor="glbfsend"><name>glbf_send()</name>

<figure title="Reference pseudocode for glbf dequeue" anchor="FIG-glbf-dequeue"><artwork><![CDATA[
void glbf_send(oif,tnow,pak) {
  qtime = tnow - pak.context.td          // \[1]
  td = pak.context.max1 - qtime - FUDGE2 // \[2]
  pak.header.tdamp = td
  serialize(oif,pak)
}
]]></artwork></figure>

<t>Sending packet pak represents the marking block M in the specification.
This needs to calculate the new damping value t and update it in the
packet header before sending the packet.</t>

<t>td needs to be the maximum time max1 that the packet could have
stayed in priority queuing minus the time qtime that it actually did stay in
the queue and minus any additional time FUDGE2 that the packet will still
needs to be processed by the router before its first bit will show up
on the sending interface. This is calculated as shown in 
in [1] and [2] of <xref target="FIG-glbf-dequeue"/>.</t>

<t>The primary factor impacting FUDGE2 is whether or not this calculation and
updating of the packet header td field can be done directly before serialization
starts, or whether it potentially would need to be done while there is
still another packet in the process of being serialized on the interface.
Taking the added latency of a currently serializing packet into account
can for example be implemented by remembering the timestamp of when
that packet started to be serialized and its length - and then taking
that into account to calculate FUDGE2.</t>

</section>
</section>
<section anchor="performance-considerations"><name>Performance considerations</name>

<t>IEEE 802.1 PTP clock synchronization does need to capture the accurate
arrival time of PTP packets. It is also measuring the residency time
of PTP packets between receiving and sending the packet with an
accuracy of nsec and add this to a PTP packet header field  (correctionField).
Given how this needs to be a hardware supported functionality, it is
unclear whether there is a relevant difference supporting this for
few PTP signaling packets as compared to a much larger number of
gLBF data packets - or whether it is a good indication of the feasibility
packet processing steps gLBF requires.</t>

</section>
</section>
<section anchor="history-and-comparison-with-other-bounded-latency-methods"><name>History and comparison with other bounded latency methods</name>

<t>Preceding this work, the best solution to solve the requirements outlined in
this document, where <xref target="TCQF"/> and <xref target="SCQF"/>, which are proven to
be feasible for high speed forwarding planes, because of vendor high-speed
forwarding plane implementation using low-cost FPGA for cyclic queuing. On the other hand,
it was concluded from implementation analysis, that <xref target="UBS"/> was infeasible for the
same type of high-speed, low-cost hardware due to the need for high-speed
flow-state operations, especially read/write cycles to update the state for every packet
at packet processing speeds.</t>

<t>While TCQF and <xref target="SCQF"/> are very good solution proven to work
at high-speed, low cost, available for deployment and ready for standardization, 
the need for network wide and hop-by-hop clock synchronization (albeit at lower
accuracy than required for other mechanisms feasible at high-speed, low-cost) as well
as the need to find network wide good compromise clock cycle times makes planning and
managing them in dynamic, large-scale and/or low-cost network solutions still more complex
to operationalize than what the authors wished for.</t>

<t>In parallel to short term operationalizable solutions <xref target="TCQF"/> and <xref target="SCQF"/>, <xref target="LBF"/> was researched,
which is exploring a wide range of options to signal and control latency through advanced
per-hop processing and in-packet latency related new header elements. Unfortunately, with
the flexibility of <xref target="LBF"/> it was impossible to find a calculus for simple admission control. 
Ultimately, <xref target="gLBF"/> was designed out of the desire to have a mechanism 
derived from <xref target="LBF"/> that also provides guaranteed bounded latency, has the flexibility
benefits of <xref target="UBS"/> with respect to fine-grained and per-hop independent latency
management but does hopefully still fits the limits of what can be implemented in
high-speed, low-cost forwarding/queuing hardware.</t>

<t>This high-speed hardware forwarding feasibility of gLBF has yet to be proven.
Here are some comsiderations, why the authors think that this should be well
feasible:</t>

<t>The total number of FIFO that a platform needs to support is comparable to
the number of queues already supportable in the same type of devices today,
except that service provider core nodes may not all implement that many,
because absent of DetNet services, there is no requirement for them.</t>

<t>The need to implement timed FIFOs (if the proposed high-speed implementation
approach is used) is equal or less complex to shapers, which by now have
also started to appear on high-speed (100Gbps and faster) core routers,
primarily due to high-speed virtual leased line type of services.</t>

<t>The re-marking of packet header fields derived from the calculated
latency of the packet experienced in the node is arguably something where
iOAM type functionality likely provides also prior evidence of feasibility in
high speed hardware forwarding planes. Similarily, processing of PPT timing
protocol packets also have similar requirements.</t>

<t>Even when implementation challenges at high-speed, low-cost make gLBF a
longer term option in those networks, implementation at low-speed (1/10 Gbps)
such as in manufacturing or cars may be an interesting option to explore given
how it has the no-jitter benefits of <xref target="CQF"/> without the need for cycle
management or clock-synchronization: Best of both worlds <xref target="CQF"/> and TSN-ATS ??</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+2963IbV5Yu+H8/RY4cEwdoA+BFF0uMruqmRMlWHUmWTbp9
Zso9FQkgQWYJyIQzE6RoWRHnIeYJ50nOuu+1E0lJVdEdU9FxVFEmCeRlX9Ze
9/Wt6XQaFvWyrC5Psl23mj4OoSu7dXGSnRVd0WzKqmy7cpG9KbqbunkH12Uj
+Ab+HGdneZdnb9d5VWTT7HKXN3nVFcUye5V3RbW4zZ7mLfz1om5u8mZJd16+
evpinK3qJpvXu2oJ367l2puyu8rW9U3217KD92Z5tczy9rZaXDV1Ve9avEkf
U1bDg2tDPp83xfVJtiy6quiml+v5KizrRZVvYELLJl9102Lxrmi6qbtiengc
bmD6Z88v3jy/CAsY0WXd3J5kbbcM5bY5ybpm13bHh4dP4Mq2a4p8c5K9fH7x
IsBfMNC/5Ou6ghfcFm3Ylichy7KuXvDf/Puy2HZXJ9lD/LOtG3jEqrXv29tN
8vei3myKqpMPQr7rruoGnzrFb/Efz+eiLpp10bbZc5qSflk3MJcXu27XFDdF
mV0Ui6uqXteXZdFmP52f6mU4j6I7yY6Pjw+zZ/C+Jl9nz99vG3jiTX6rly3K
DlbiHHY2z56tYYvti3oJY3h2mj15ePjwMH66gyfBHe5NxSYv17CIXfGvi3a2
ynezZaHfNTWSWrEsu7rZn+HpungP6wvk8GxdbDb/6DPMYbj/utJxzWAf96d0
3hVAxl32tLmFNyYzegkz3Rbwn/i5PLid/2vL983pNnl0bzz/XT8afOsqr7Lv
kLLa5KX/94vsRVMWy6ZcXLVX+aqostNv+6+nu2dXdPe//rZy+2dvP3seQlU3
m7wrrwsk1h9fPDs+Pjo8yez3Y/34wTcP5Nf7x98cyq+PHz18qL/CUdNfnzyC
a0NZrXrPvn98+ER+ffD4m3jnk0f664NDfSF8/8Ced/+x/fpYr31yeGS/Hj/S
257AO+DdWXb+7IcXsD3Ts9niqqiUdbTNdI4MbiqsbCqsDG54dX72hm/4tcyr
S70DiOuymLYLoBP5CK69sIennKlb/LrCl+M3S3zIr7tiB9xvipxyutmtu3IL
z1ncLtblYjrfrVZF0+LIn758/uP04jk/syyAp8/Lopl2xTRvFldwwdmbp6/c
t/K+/VngFbD1ZQVT7drq5O8ZzP68eu+Zbpt6Doe7pZX+6ek5sc9MZNBPsGB4
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
s6CCsmYfAQA=

-->

</rfc>

