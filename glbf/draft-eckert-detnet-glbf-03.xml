<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.8 (Ruby 2.6.10) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-detnet-glbf-03" category="std" consensus="true" submissionType="IETF" tocDepth="5" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="detnet-glbf">Deterministic Networking (DetNet) Data Plane - guaranteed Latency Based Forwarding (gLBF) for bounded latency with low jitter and asynchronous forwarding in Deterministic Networks</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert" role="editor">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization>Sympotech</organization>
      <address>
        <postal>
          <code>CA</code>
          <country>USA</country>
        </postal>
        <email>ludwig@clemm.org</email>
      </address>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization>Independent</organization>
      <address>
        <postal>
          <country>UK</country>
        </postal>
        <email>sb@stewartbryant.com</email>
      </address>
    </author>
    <author initials="S." surname="Hommes" fullname="Stefan Hommes">
      <organization>ZF Friedrichshafen AG</organization>
      <address>
        <postal>
          <country>DE</country>
        </postal>
        <email>stefan.hommes@zf.de</email>
      </address>
    </author>

    <date year="2024" month="July" day="06"/>

    
    <workgroup>DETNET</workgroup>
    

    <abstract>


<?line 210?>

<t>This memo proposes a mechanism called "guaranteed Latency Based Forwarding" (gLBF) as part of DetNet for hop-by-hop packet forwarding with per-hop deterministically bounded latency and minimal jitter.</t>

<t>gLBF is intended to be useful across a wide range of networks and applications with need for high-precision deterministic networking services, including in-car networks or networks used for industrial automation across on factory floors, all the way to ++100Gbps country-wide networks.</t>

<t>Contrary to other mechanisms, gLBF does not require network wide clock synchronization, nor does it need to maintain per-flow state at network nodes, avoiding drawbacks of other known methods while leveraging their advantages.</t>

<t>Specifically, gLBF uses the queuing model and calculus of Urgency Based Scheduling (UBS, <xref target="UBS"/>),
which is used by TSN Asynchronous Traffic Shaping <xref target="TSN-ATS"/>. gLBF is intended to be a plug-in replacement for
TSN-ATN or as a parallel mechanism beside TSN-ATS because it allows to keeping the same controller-plane
design which is selecting paths for TSN-ATS, sizing TSN-ATS queues, calculating latencies and admitting
flows to calculated paths for calculated latencies.</t>

<t>In addition to reducing the jitter compared to TSN-ATS by additional buffering (dampening) in the network,
gLBF also eliminates the need for per-flow, per-hop state maintenance required by TSN-ATS.  This avoids the need to signal per-flow state to every hop from the controller-plane and associated scaling problems.  It also reduces implementation cost for high-speed networking hardware due to the avoidance of additional high-speed speed read/write memory access to retrieve,
process and update per-flow state variables for a large number of flows.</t>



    </abstract>



  </front>

  <middle>


<?line 228?>

<section anchor="overview-informative"><name>Overview (informative)</name>

<section anchor="terminology"><name>Terminology</name>

<dl>
  <dt>CaaS</dt>
  <dd>
    <t>Control as a Service. Cloud (compute) and network services to enable control (loops) with network connected devices, for example cars.</t>
  </dd>
  <dt>CQF</dt>
  <dd>
    <t>Cyclic Queuing and Forwarding.  A queuing mechanism defined by annex T of IEEE802.1Q.</t>
  </dd>
  <dt>DT</dt>
  <dd>
    <t>Dead Time. A term from CQF indicating the time during each cycle in which no frames can be sent because the the receiving node could not receive it into the desired cycle buffer.</t>
  </dd>
  <dt>node</dt>
  <dd>
    <t>Term used to indicate a system that with respect to gLBF does not act as a host, aka: sender/receiver. This memo avoids the term router to avoid implying that this is an IP/IPv6 router, as opposed to an LSR (label switch router). Likewise, a node can also be an 802.1 bridge implementing gLBF.</t>
  </dd>
  <dt>TCQF</dt>
  <dd>
    <t>Tagged Cyclic Queuing and Forwarding. The mechanism specified in this memo.</t>
  </dd>
</dl>

</section>
<section anchor="summary"><name>Summary</name>

<t>This memo proposes a mechanism called "guaranteed Latency Based Forwarding" (gLBF) for
hop-by-hop packet forwarding with per-hop deterministically bounded latency and minimal jitter.</t>

<t>gLBF is intended to be useful across a wide range of networks and applications with need for high-precision deterministic networking services, including in-car networks or networks used for industrial automation across on factory floors, all the way to ++100Gbps country-wide networks.</t>

<t>At its foundation, gLBF addresses the problems of burst accumulation and jitter accumulation across multiple hops.</t>

<t>Burst accumulation is  the phenomenon in which bursts of packets from senders in admission-controlled network will increase across intermediate nodes. This can only be managed with exponential complexity in admission control processing and significantly worst-case increase in end-to-end latency and/or lowered maximum utilization. What is needed for dynamic, large-scale or easy to manage admission control solutions are forwarding mechanisms without this problem, so that admission control for bandwidth and jitter/buffer-requirements can be linear: decomposed into solely per-hop calculations independent of changes in prior-hop traffic characteristics. Without forwarding plane solutions to overcome burst accumulation, this is not possible</t>

<t>Existing solutions addressing burst-accumulation do this by maintaining inter-packet gaps on a per-flow basis, such as in TSN Asynchronous Traffic Shaping (TSN-ATS). gLBF instead ensures inter-packet gaps are always maintained without the need for per-flow state. The basic idea involves assigning a specific queuing delay budget for any given node and class of traffic. This budget is pre-known from admission control calculus.  As the packet is transmitted, the actual queuing delay that was experienced by the packet at the node is subtracted from that budget and carried in a new header field of the packet.  Upon receiving the packet, the subsequent node subjects the packet to a delay stage.  Here the packet needs to wait for the time specified by that parameter before the node proceeds with regular processing of the packet.  This way, any queuing delay variations are absorbed and deterministic delay without the possibility of burst accumulation can be achieved.</t>

<t>By addressing burst-accumulation, gLBF also overcomes the problem of jitter-accumulation. This is the second core problem of mechanisms such as TSN-ATS: Depending on the amount of competing admitted traffic on a hop at any point in time packets of a flow may experience zero to maximum delay across the hop. This is the per-hop jitter. This jitter is additive across multiple hope, resulting in the inability for applications requiring (near) synchronous packet delivery to solely rely on such mechanisms. It likewise limits the ability of high utilization of networks with large number of bounded latency flows.</t>

<t>The basic principle on which gLBF operates was already proposed by researchers in the early 1990th
and called "Dampers". These dampers where not pursued or adopted due to the lack of network equipment capabilities
back then.  Only with recent and upcoming improvements in advanced forwarding planes will it be possible to
build these technologies at scale and cost.</t>

<t>Contrary to other proposals, gLBF does not require network wide clock synchronization.  Likewise, it does not need to maintain per-flow state at network nodes, as delay budget and the queuing delay variations that are to be absorbed are carried as part of the packets themselves, making them "self-contained".  This eliminate the for the per-flow, per-hop state maintenance required by TSN-ATS, which involves
scaling problems of signaling this per-flow state to every hop from the controller-plane as well as the
high-speed networking hardware implementation cost of high-speed speed read/write memory access to retrieve,
process and update these per-flow state variables for large number of flows.</t>

<t>Opposed to other damper proposals, gLBF also supports the queuing model and calculus of Urgency Based Scheduling (UBS, <xref target="UBS"/>),
which is used by TSN-ATS. gLBF is intended to be a plug-in replacement for
TSN-ATN or as a parallel mechanism beside TSN-ATS because it allows to keeping the same controller-plane
design which is selecting paths for TSN-ATS, sizing TSN-ATS queues, calculating latencies and admitting
flows to calculated paths for calculated latencies.</t>

<t>While gLBF as presented here is intended for use with IETF forwarding protocols and to provide
DetNet QoS for bounded latency and lower bounded jitter, it would equally applicable to other forwarding
planes, such as IEEE 802.1 Ethernet switching - assuming appropriate packet headers are defined
to carry the hop-by-hop and end-to-end metadata required by the mechanism.</t>

</section>
<section anchor="application-scenarios-and-use-cases"><name>Application scenarios and use cases</name>

<t>gLBF addresses the same use cases that are targeted by deterministic networking and high-precision networking services in general.  Common requirements of those services involve the need to provide service levels within very tightly defined service level bounds, in particular very specific latencies without the possibility of congestion-induced loss.  The ability to provide services with corresponding service level guarantees enables many applications that would simply not be feasible without such guarantees.  The following describes some use cases and application scenarios.</t>

<t>The development towards autonomous driving vehicles leads to new requirements and a high demand of computational resources that are often not available within a car. A solution is to reduce the in-car processing to a minimum, and to offload more computational expensive tasks to the cloud environment. Due to the safety implications and use cases, a delay in the transport of message from the cloud to the car and vice versa is often not acceptable. This includes application scenarios such as trajectory planning for driverless vehicles, but also emergency notifications to surrounding cars that require a fast delivery of messages to prevent a delayed action in case of an accident. While the usage of TSN for in-vehicle networks is already investigated and more mature, the usage of a real-time communication with guaranteed latencies for vehicles with to the cloud is still an open challenge.</t>

<t>Another use case that is important for the automotive industry is to further optimise the manufacturing process by taking into account more data sources. Since most of the SCADA systems and PLCs cannot connect to large data lakes and perform more advanced computational jobs, a real-time communication to the shop floor from a cloud instance does have several benefits. First of all does it integrate more data into the decision making process, since the control algorithms to automate manufacturing sites located in a cloud environment can take into account more variables than single plant control systems. Another aspect is also to reduce the resources on a particular factory floor or plant by transferring complex, recurring and more resource computational jobs to a cloud provider where a lack of computational power is not the limiting factor. However, in such cases it is important that associated control can still occur in real-time and according to very precise timing constraints.  Such a development is already foreseen by trends such as Industry 4.0 and Control-as-a-Service (CaaS).</t>

</section>
<section anchor="background"><name>Background</name>

<t>The following background introduces and explains gLBF step by step.
It uses IEEE 802.1 "Time Sensitive Networking" (TSN) mechanisms for reference, because
at the time of this memo, TSN bounded latency mechanisms are the most commonly understood and
deployed mechanisms to provide bounded latency and jitter services.</t>

<t>All mechanisms compared here are as well as those used by TSN based on the overall service design
that traffic flows have a well-defined rate and burstyness, which are tracked by the controller-plane and
called here the "envelope" of the flow.</t>

<t>The traffic model used for gLBF is taken from UBS gives the flow a rate r [bps/sec] and
a burst size b [bits] and the traffic envelope condition is that the total number of
bits w(t) over a period t [sec] of for the flow must be equal to or smaller than (r * t + b).
In one typical case, a flow wants to send a packet of size b one every interval of p [sec].
This translates into a rate r = b / p for the flow because after the flow has sent the first packet
of b bits, it will take p seconds until (r * t) has a size of b again: (r * t) = ((b / p) * p).</t>

<t>The controller-plane uses this per-flow information to calculate for each flow a path with sufficient free bandwidth
and per-hop buffers so that the bounded end-to-end latency of packets can be guaranteed. It then
allocates bandwidth and buffer resources to the flow so that further flows will not impact it.</t>

<t>Within this framework, bounded latency mechanisms can in general be divided into "on-time" and "in-time"
mechanisms.</t>

<section anchor="in-time-mechanisms"><name>In-time mechanisms</name>

<t>"In-time" bounded latency mechanisms forward packets in an (almost) work conserving manner.</t>

<t>When there is no competing traffic in the network, packets of traffic flows that comply
to their admitted envelope are forwarded without any mechanism introduced queuing latency.
When the maximum amount of admitted traffic is present, then packets of admitted flows
will experience the maximum guaranteed, so-called bounded latency. In result, in-time mechanism
introduce the maximum amount of jitter because the amount of competing traffic can
quickly change and then the latency of packets will change greatly.</t>

<t>IEEE TSN Asynchronous Traffic Shaping is the prime example of
an in-time mechanism. IETF <xref target="RFC2212"/>, "Integrated Services" is an older mechanism
based on the same principles.  In-time mechanisms have the benefit of not requiring
clock-synchronization between nodes to support their queuing.</t>

</section>
<section anchor="on-time-mechanisms"><name>On-time mechanisms</name>

<t>On-time bounded latency mechanisms do deliver packets (near) synchronously with zero or a small
maximum jitter - significantly smaller than that of in-time mechanisms.</t>

<t>EEE TSN Cyclic Queuing and Forwarding (CQF) is an example of an on-time
mechanism as is the Tagged Cyclic Queuing and Forwarding (TCQF) mechanism proposed to DetNet.<br />
Unlike the before mentioned in-time mechanisms, these mechanisms require clock synchronization
between router.</t>

</section>
<section anchor="control-loops-vs-in-time-and-on-time"><name>Control loops vs. in-time and on-time</name>

<t>One set of applications that require or prefer on-time (low jitter) delivery of packets are
control loops in vehicles or industrial environments and hence low-speed and short-range networks.</t>

<t>Emerging or future use-cases such as remote PLC or remote driving extend these requirements also
into metropolitan scale networks. In these environments, on-time forwarding is also called
synchronous forwarding for synchronous control loops.</t>

<t>Typically, in synchronous control loops, central units such as Programmable Logic Controllers
(PLC) do control a set of sensors and actors, polling or periodically receiving status information
from sensors and sending action instructions to actors. When packet forwarding is
on-time (synchronous), this central unit does exactly know the time at which sensors
sent a packet and the time at which packets are received by actors and they can react on it.</t>

<t>These solutions do not require sensors and actors to have accurate, synchronised clocks. Instead,
the central unit can control the time at which sensor and actors perform their operations
within the accuracy of the (zero/low) jitter of the network packet transmission.</t>

<t>When bounded latency forwarding is (only) in-time, edge nodes in the network and/or sensors
and actors need to convert the packets arriving with high jitter into an on-time arrival model
to continue supporting this application required model.</t>

<t>This conversion is typically called a playout-buffer mechanism and involves the need to synchronizing time
between senders and receivers, and hence most commonly the need for the network to support clock
synchronization to support these edge devices and/or sender receivers.</t>

<t>In result, existing bounded latency mechanisms to support synchronous, on-time delivery of packets
do require clock synchronization across the network. In the existing mechanisms like CQF for
the forwarding mechanism itself, in the on-time mechanisms to synchronize edge-devices and hosts.</t>

</section>
<section anchor="challenges-with-network-wide-clock-synchronization"><name>Challenges with network wide clock synchronization</name>

<t>While clock synchronization is a well understood technology, it is also a significant operational
if not device equipment cost factor [TBD: Add details if desired].</t>

<t>Therefore, clock synchronization with e.g.: IEEE 1588 PTP is
only deployed where no simpler solutions exist that provide the same benefits but without
clock synchronization. Today this for example means that in mobile networks, only the so-called
fronthaul deploys clock synchronization, but not the backhaul.</t>

<t>In result, it could be a challenge
to introduce new applications such as the above mentioned remote PLC, driving applications if
they wanted to rely on a bounded latency network service. But even for existing markets such
as in-car or industrial networks, removal or reduction of the need for clock synchronization could
be a significant evolution to reduce cost and increase simplicity of solutions.</t>

</section>
</section>
</section>
<section anchor="glbf-introduction-informative"><name>gLBF introduction (informative)</name>

<section anchor="dampers"><name>Dampers</name>

<t>The principle of the mechanism presented here is the so-called "Damper" mechanism, first mentioned
in the early 1990th, but never standardized back then, primarily because the required forwarding
was considered to be too advanced to be supportable in equipment at the time. These limitations
are not starting to be resolved, and hence it seems like a good time to re-introduce this mechanism.</t>

<t>The principle of damper based forwarding is easily explained: When a packet is sent by a node A,
this node will have measured the latency L, how long the packet was processed by the node. The main factor
of L is  the queuing latency of the packet in A because of competing traffic sent to the
same outgoing interface. Based on the admission control and queuing algorithms used in the node, there
can be a known upper bound M(ax) for this processing latency though, and when the packet then arrives at the
next-hop receiving node B, this node will simply further delay the packet by (B-L), and in result
the packet will have synchronously been forwarded from A to B with a constant latency of M(ax).</t>

<figure title="Forwarding without Damper" anchor="FIG1"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+         +-+      |      |   +-+         +-+      |
|-x-|F|---------|Q|------|------|-x-|F|---------|Q|------|
|   +-+         +-+      | Link |   +-+         +-+      |
+------------------- ----+      +------------------------+
  |<--------- Hop A/B latency --->|
]]></artwork></figure>

<t><xref target="FIG1"/> shows a single hop from node A to node B without Dampers.</t>

<t>A receives a packet. The F)orwarding module determines some outgoing
interface towards node B where it is enqueued into Q because
competing packets may already be in line to be sent from Q to B.
This is because packets may be arriving simultaneously from multiple
different input interfaces on A (not shown in picture), and/or the
speed of the receiving interface on A is higher than the speed of the
link to B.</t>

<t>Forwarding F can be L2 switching and/or L3 routing, the choice does not
impact the considerations described here.</t>

<t>When the packet is finally sent from Q over link to B, B repeats the same steps
towards the next (not shown) node.</t>

<t>(x) is the reception time of
the packet in A and B, and the per-hop latency of the packet
is xB - xA, predominantly determined by the time the packet has
to wait in Q plus any other relevant processing latency, fixed or
variable from F plus the propagation latency of the packet across
link, which is predominantly determined by the serialization latency
of the packet plus the propagation latency of the link, which is
the speed of light in the material used, for example fiber, where
the speed of light is 31 percent slower than across vacuum.</t>

<t>All the factors impacting the hop A/B latency other than Q in A are
naturally bounded: A well defined maximum can be calculated or
overestimated. The transmission of the packet from A to B is composed
from the serialization latency of the packet which can be calculated
from the packet length of the packet and per-packet-bit speed of the
packet. The propagation latency through the link can be calculated from
speed of light and material (speed of light is 31% slower through fiber than
vacuum for example). And so on.</t>

<t>To have a guaranteed bounded latency through Q, an admission control
system is required that tracks, accounts and limits the total amount
of traffic through Q. Admission control mechanisms rely on knowing the
maximum amount of bursts that each traffic flow can cause and adding
up those bursts to determine the maximum amount of simultaneous packet data
in Q that therefore impacts the maximum latency of each individual packet
through Q.</t>

<t>With such an admission control system, one can therefore calculate
a maximum hop A/B propagation latency MAX for a packet, but 
packets will naturally have variable hop A/B latency lower than MAX,
based on differences in packet size and differences in competing
traffic. In result, their relative arrival times xB in B will be different
from their relative arrival times xA in A. This leads to so-called
"burst-aggregation" and hence the problem that the admission control
system can not easily calculate the maximum burst and latency
through Q in B as it can do for Q in A.</t>

<t>If however packets could be made to be forwarded such that
their Hop A/B latency would all be the same (synchronous, on-time), then the
admission control system could apply the same calculus to
B as it was able to apply to A. This is what damper mechanisms attempt to achieve.</t>

<figure title="Forwarding with Damper" anchor="FIG2"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+   +-+   +-+      |      |   +-+   +-+   +-+      |
|-x-|D|-y-|F|---|Q|------|------|-x-|D|-y-|F|---|Q|------|
|   +-+   +-+   +-+      | Link |   +-+   +-+   +-+      |
+------------------------+      +------------------------+
        |<- A/B in-time latency ->|
        |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG2"/> shows the most simple to explain, but not implement, Damper
mechanism to achieve exactly this. Node A measures the time at
xA, sends this value in a packet header to B. B measures the
time directly at reception of the packet in xB. It then delays
the packet for a time (MAX-(xB-yA)). In result, the latency
(yB-yA) will exactly be MAX, up to the accuracy of the damper.</t>

<t>The first challenge with simple approach is the need to synchronize
the clocks between A and B, so that (xB-yA) can correctly be calculated.</t>

<figure title="Forwarding with Damper and measuring" anchor="FIG3"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
|   +-+   +-+   +-+      |      |   +-+   +-+   +-+      |
|-x-|D|-y-|F|---|Q|----z-|------|-x-|D|-y-|F|---|Q|----z-|
|   +-+   +-+   +-+      | Link |   +-+   +-+   +-+      |
+------------------------+      +------------------------+
        |<- A/B in-time latency ->|
        |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG3"/> shows how this can be resolved by also measuring the time
at z. A calculates d = (MAX1-(zA-yA)) and sends d in a header of the
packet to B. B then delays the packet in D by d relative to the also
locally measured time xB. Because the calculation of d in A and the
delay by d in D does not depend on clock synchronization between A
and B anymore, this approach eliminate the need for clock synchronization.</t>

<t>But in result of this change, the measurement of latency incurred by
transmitting the packet over link is also not included in this
approach.</t>

<t>MAX1 in this approach is the bounded latency for all processing of
a packet except for this link propagation latency P, equivalent to
the speed of light across the transmission medium times the length of the medium,
and MAX = MAX1 + P.</t>

<t>The serialization latencies latency across the sending interface
on A and the receiving interface on B can be included in MAX1 though.
It is only necessary for the measured timestamps zA and xB to
be the logically for the same point in time assuming the link had a minimum
length, e.g.: for a  back to back connection. For example, the reference
time is the time when the first bit of the packet can be observed
on the shortest wire between A an B. A can most likely measure zA only
some fixed offset o of time before r, hence needs to correct zA += o
before calculating d. Likewise, B could for example only measure xB
exactly after the whole packet arrived. this would be l * r later than
the reference time, where r is the serialization rate of the receiving
interface on B and l is the length of the packet. B would hence need
to adjust d -= l * r to subtract this time from the time the packet
needs to be delayed in D.</t>

<figure title="gLBF refined model" anchor="FIG4"><artwork><![CDATA[
+------------------------+      +------------------------+ 
| Node A                 |      | Node B                 |
| +-+    +-+   +-+   +-+ |      | +-+    +-+   +-+   +-+ |
|-|F|--x-|D|-y-|Q|-z-|M|-|------|-|F|--x-|D|-y-|Q|-z-|M|-|
| +-+    +-+   +-+   +-+ |      | +-+    +-+   +-+   +-+ |
+------------------------+      +------------------------+
       |<- Dampened Q ->|              |<- Dampened Q ->|
             |<- A/B in-time latency ->|
             |<--A/B on-time latency ------->|
]]></artwork></figure>

<t><xref target="FIG4"/> shows a further refined model for simpler implementation.
Larger routers/switches are typically modular, and forwarding
happens on a different modular component (such as a linecard)
than the queuing for the outgoing interface. Expecting clock
synchronization even within such a large device is undesirable.</t>

<t>In result, <xref target="FIG4"/> shows damper operation as occurring solely before
enqueuing packets into Q and after dequeuing them. The Damper
module measures the x timestamp, extracts d from the packet header,
adjusts it according to the above described considerations and then
delays the packet by that value and enqueues the packet afterwards. 
After the packet is dequeued, the Marking module measures the time
z, adjusts it according to the previously described considerations
calculates the value of d and overwrites the packet header before
sending the packet.</t>

</section>
<section anchor="dampers-and-controller-plane"><name>Dampers and controller-plane</name>

<figure title="Path selection and gLBF example" anchor="FIG5"><artwork><![CDATA[
         Controller-plane:
        Path Control  and
         Admission Control
      ..     .      .      ..
     .       .       .       . 
   +---+   +---+   +---+   +---+  Src---| A |---| B |---| C |---| D |
   +---+   +---+   +---+   +---+
     |       |       |       |
   +---+   +---+   +---+   +---+
   | E |---| F |---| G |---| H |--- Dst
   +---+   +---+   +---+   +---+
]]></artwork></figure>

<t>While the damper mechanism described so far can be realized with different
queuing mechanisms and hence different calculus for every interface
for which bounded latency can be supported, the role of the controller
plane involves other components beside admission control, and those
need to be possible to tightly be coupled with admission control for
efficient use of resources.</t>

<t><xref target="FIG5"/> shows the most common problem. The controller-plane needs to
provide for a new traffic flow from Src to Dst a path through the
network and reserve the resources. The most simple form for just bandwidth
reservation is called Constrained Shortest Path First (CSPF). With the
need to also provide end-to-end latency guarantees in support of bounded
latency, not only does the path calculation becomes more complex, but
many per-hop bounded latency queuing mechanisms support also to select
more than one per-hop latency on the hop, and the controller-plane
needs to determine for each hop of a possible hop, which one is best.</t>

<t>In result, the controller-plane needs to know exactly what parameters
the bounded latency queuing mechanism on each hop/interface can have
to perform these operations, and standardization of these parameters
ultimately results in standardizing the bounded latency queuing mechanism -
and not only the damper part.</t>

</section>
</section>
<section anchor="glbf-spec"><name>gLBF specification (normative)</name>

<section anchor="damper-with-ubs-queuingcalculus"><name>Damper with UBS queuing/calculus</name>

<t>guaranteed Latency Based Forwarding (gLBF) is using the queuing model
of Urgency Based Scheduling (UBS), which is also used in TSN
Asynchronus Traffic Shaping (TSN-ATS).  This allows gLBF to
re-use or co-develop one and the same controller-plane and its
optimization algorithms for bandwidth and latency control for
TSN-ATS or a DetNet L3 equivalent thereof and gLBF. Hence, gLBF
should provide the most easily operationalised on-time solution
for networks that want to evolve from an in-time model via TSN-ATS,
or that even would want to operate both options in parallel.</t>

<t>Effectively, gLBF replaces the per-flow interleaves regulators of UBS
with per-flow stateless damper operations. Where UBS only provides
for in-time latency guarantees, gLBF provides in result in-time
latency service, but with fundamentally the same calculus as UBS.</t>

<figure title="Path selection and gLBF example" anchor="FIG6"><artwork><![CDATA[
   +-----------------------------------------------+
   | UBS strict priority Queuing block             |
   |                                               |
   |               +--------------+   +----------+ |
   | +-------+   /-| Prio 1 queue |---|          | |
   | | Packet|  /  +--------------+   | Strict   | |
-->| | Prio  |->         ...         -| Priority | |--->
   | | enque |  \  +--------------+   | Schedule | |
   | +-------+   \-| Prio 8 queue |---|          | |
   |               +--------------+   +----------+ |
   +-----------------------------------------------+
]]></artwork></figure>

<t>Strict Priority Scheduling removes packets always from the
highest priority queue (1 is highest) that has a pending packet
and forward it. UBS defines two options for the traffic model
traffic flows. The more flexible one defines that each flow
specifies a rate r and a maximum burst size b (in bits).</t>

<t>In result, the bounded latency of a packet in priority 1 is (roughly)
the latency required to serialize the sum of the bursts 
of all the flows admitted into priority 1. The bounded latency of a packet
in priority 2 is that priority latency plus the latency required
to serialize the sum of the bursts of all the flows admitted into
priority 2. And so on.</t>

</section>
<section anchor="glbf-processing"><name>gLBF processing</name>

<t>The following text extends/refines the damper processing as necessary
for gLBF.</t>

<figure title="refined gLBF processing diagram" anchor="FIG7"><artwork><![CDATA[
   +------------------------+       +------------------------+ 
   | Node A                 |       | Node B                 |
   | +-+    +-+   +-+   +-+ |       | +-+    +-+   +-+   +-+ |
 --|-|F|--x-|D|-y-|Q|-z-|M|-|-------|-|F|--x-|D|-y-|Q|-z-|M|-|--->
IIF| +-+    +-+   +-+   +-+ |OIF IIF| +-+    +-+   +-+   +-+ |OIF
   +------------------------+       +------------------------+
          |<- Dampened Q ->|               |<- Dampened Q ->|
                |<- A/B in-time latency -->|
                |<--A/B on-time latency -------->|
]]></artwork></figure>

<t>The Delay module retrieves the delay from a packet header fields,
requirements for that packet header field are defined in <xref target="DM"/>.</t>

<t>Because serialization speeds on the Incoming InterFace (IIF) will be different
for different IIF, and because D will likely need to compensate the measured
time x based on the packet length and serialization speed, an internal
packet header should maintain this information. Note that this is solely
an implementation consideration and should not impact the configuration model
of gLBF.</t>

<t>The Queuing module is logically as described in UBS, except that
the priority of a packet in gLBF is not selected based on per-flow state,
but instead an appropriate packet header field of the packet is looked
up in the Packet Prio Enque stage of Q and the packet accordingly
enqueued based on that fields value. Possible options for indicating
such a priority in a packet header field are defined below in <xref target="DM"/>.</t>

<t>Like Q, M also needs to look up the packet priority to know MAX1 for
the packet and hence calculate d that it rewrites in the packet header.</t>

<t>The overall configuration data model to be defined for gLBF is hence
the configuration data model for UBS, which is a set of priority queues
and their maximum size, and in addition for gLBF for each of these
queues a controller-plane calculated MAX maximum latency value to be used
by M.</t>

<t>Given how the node knows the serialization speed of OIF, MAX1 for each of
the queues could automatically be derived from the maximum length in bytes
for each of the UBS priority queues, but this may not provide enough
flexibility for fine-tuning (TBD), especially when packet downgrade as
describe below is used.</t>

<t>TBD: paint a small yang-like data model, even though its trivial, like in the TCQF draft.
This should primarily include additional diagnostic data model elements,
such as maximum occupancy of any of the priority queus and number of overruns.</t>

</section>
<section anchor="error-handling"><name>Error handling</name>

<t>A well specified standard for a damper mechanism such as described in
this document needs to take care of error cases as well. The prime error
condition is, when the sending node A of a gLBF packet recognizes that
the packet was enqueued for longer than MAX1 and hence the to-be-calculated
delay to be put into the packet would have to be &lt; 0.</t>

<t>In this case, error signaling, such as ICMPv6/ICMP needs to be triggered
(throttled !), and the packet be discarded - to avoid failure of admission
control / congestion further down the path for other packets as well.</t>

<t>The data model (below) describes an optional data model that allows
instead of discarding of the packet to signal an ECN like mechanism together
with lower-priority forwarding of such packet to inform the receiver directly
about the problem and allow the application to deal with such conditions
better than through other error signaling.</t>

</section>
<section anchor="DM"><name>Data Model for gLBF packet metadata</name>

<t>gLBF is specifically designated to support per-hop, per-flow stateless
operations because it does not require any per-flow, but only per-packet
metadata for its processing. While it is possible to</t>

<section anchor="damper-24-bit-value-unit-1-usec"><name>damper:  24 bit value, unit 1 usec.</name>

<t>This is a value potentially different for every packet in a flow
and it is rewritten by every gLBF forwarder along the path.</t>

<t>gLBF requires a packet header indicating the delay that the damper
on the next hop needs to apply to the packet. Dampening only needs
to be accurate to the extent that synchronous delivery needs to be
accurate. A unit of 1 usec is considered today to be sufficient for
all purposes. The maximum size of delay is the maximum per-hop
queuing latency. 65 msec is considered to be much more than ever
desirable. Therefore, a 16 bit header field is sufficient.</t>

<t>Note that link propagation latency does not impact delay. Hence
the size of delay does not create any constraint on the length of links.</t>

</section>
<section anchor="end-to-end-priority-3-bits"><name>end-to-end-priority: 3 bits</name>

<t>This is a field that needs to be the same for all packets of
a flow so that they will be forwarded with the same latency
processing and hence do not incur different latencies and therefore
possible reordering. This field is written when the packet
enters the gLBF path and only read.</t>

<t>8 Priorities and hence 8 different latencies per hop are considered
sufficient on a per-hop basis. If prio is an end-to-end packet header 
field such as by using 8 different DSCP in IPv6/IP, this results in
8 different latency traffic classes.</t>

</section>
<section anchor="hop-by-hop-priority-3-bits-per-hop"><name>hop-by-hop-priority: 3 bits (per hop)</name>

<t>This is a better, more advanced alternative to the end-to-end-priority.
This data is optional. If it is present for a particular hop, then
it supersedes the end-to-end-priority.</t>

<t>Because this data is per-hop, it should not be encoded in an
end-to-end part of the packet header, but into a hop-by-hop part of the
header:</t>

<t>Because DetNet traffic needs the resources of each flow to be controlled,
re-routing of DetNet flows without the controller-plane is highly
undesirable and could easily result in congestion. A per-hop,
per-flow stateless forwarding mechanism such as SR-MPLS or SRv6 is
therefore highly desirable to provide a per-hop steering field. The priority
could easily be part of such a per-hop steering field by allocating
dynamically, or on-demand up to 8 different SID (Segment IDentifiers),
such as up to 8 MPLS labels, or using 3 bits of the parameter field
of IPv6 SIDs.</t>

<t>When such per-hop priority is indicated, the controller-plane can
support much more than 8 end-to-end latencies, simply by using different
per-hop latencies. For example one flow may use priority 1-1-1-1-1
across four hops, the new slower flow may use 1-2-1-2 across 4 hops,
the next one may use 2-2-2-2, and so on.</t>

</section>
<section anchor="phop-prio-3-bits"><name>phop-prio: 3 bits</name>

<t>This field is re-written on every hop when hop-by-hop-priorities are used.</t>

<t>This is an optional field which may be beneficial in and end-to-end
header if hop-by-hop priorities are used for forwarding in gLBF
and the hop-by-hop-priority of the packet on the prior hop is not
available from the hop-by-hop packet header anymore. This is typically
the case in MPLS based forwarding, such as SR-MPLS because this information
would have been removed. Note that this header field is only required
in support of optional simplified high-speed forwarding implementation
options.</t>

</section>
<section anchor="error-handling-data-items"><name>Error handling data items</name>

<t>Di: one bit</t>

<t>Downgrade intent. This bit is set when the packet enters the gLBF
domain and never changed.</t>

<t>Ds: one bit</t>

<t>Downgrade status. This bit is set to 0 when the packet enters the
gLBF domain and potentially changed to 1 by one gLBF forwarder
as described in the following.</t>

<t>When the Di bit is not set, and a gLBF forwarder recognizes that the
packet can not be forwarded within its guaranteed latency, the packet
is discarded and forwarding plane specific error signaling is triggered
(such as IGMP/ICMPv6). Discarding is done to avoid causing latency
errors further down the path because of this packet.</t>

<t>When this bit is set, the packet will not be discarded, but instead
the Ds bit is set to indicate that the packet must not be forwarded
with gLBF guaranteed latency anymore, but only with best or even
lower-than-best effort.</t>

<t>Di and DS may be encoded into the two ECN bits for IP/IPv6 dataplanes.
The required behavior should be backward compatible with existing
ECN implementations should the packet unexpected pass a router that
processes the packet not as gLBF.</t>

</section>
<section anchor="accuracy-and-sizing-of-the-damper-field-considerations"><name>Accuracy and sizing of the damper field considerations</name>

<t>This memo recommends that the damper field in packet headers has
a size of 24 bits or larger and represents the dampening time with
a resolution of 1 nsec. The following text explains the reasoning
for this recommendation.</t>

<t>The accuracy needed for the damper value in the packet header as well
as the internal calculations performed for gLBF depends on a variety of
factors. The most important factor is the accuracy of the provided
bounded latency as desired/required by the applications.</t>

<t>Even though Ethernet is defined as an asynchronous medium, the
clock accuracy is required to be +- 100 ppm (part per million). For a
1500 byte packet across a 100 Mbps Ethernet the propagation
latency difference between fastest and slowest clock is 24 nsec.
If gLBF is to be supported also on such slower speed networks with
multiple hops, then these errors may add up (?), and it is likely
not possible to provide end-to-end propagation latency accuracy
much better than 1 usec without requiring more transmission
accuracy through mechanisms such as PTP - which gLBF attempts
to avoid/minimize. For higher speed links, errors in short term
propagation latency variation becomes irrelevant though.</t>

<t>In WAN network deployments, propagation latency is in the order of
msec such as ca. 1 msec for 250 Km of fiber. Serialization latency
on a 1gbps Ethernet is ca. 1 usec for a 128 byte packet. It is
likely that an accuracy of propagation latency in the order of
1 usec is sufficient when the round-trip-time is potentially
1000 times faster.</t>

<t>In result of these two simple data points, we consider that the
accuracy of end-to-end propagation latency of interest is 1 usec.
To avoid introducing additive errors, the resolution
of the damper value needs to be higher. This memo therefore
considers to use 1 nsec resolution to represent damper values.
This too is the value used in PTP.</t>

<t>The maximum value and hence the size of the damper field in
packets depends on the maximum latency introduced in
buffering on the sending node plus smaller factors such
as serialization latency. This maximum is primarily depending
on the slowest links to be supported. A 128 byte packet
on a 100 Mbps link has ca. 10 usec propagation latency.
With just 16 bit damper value with nsec accuracy this would
allow only 6 packet buffers. This may be too low. Hence
the damper field should at minimum be at least 24 bits.</t>

</section>
</section>
<section anchor="ingress-and-egress-processing"><name>Ingress and Egress processing</name>

<section anchor="network-ingress-edge-policing"><name>Network ingress edge policing</name>

<t>When packets enter a gLBF domain from a prior hop,
such as a node from a different domain or a sending host, and that
prior hop is sending gLBF packet markings, then the timing
of the packet arrival as well as the markings in packet header(s) for
gLBF MUST only be observed when that prior hop is trusted by the gLBF domain</t>

<t>If the prior hop can not be trusted for correct marking and/or timing of
the packets, the first-hop gLBF node in the gLBF domain MUST implement
a per-flow policer for the flow to avoid that packets from such a prior hop will cause
problems with gLBF guarantees in the gLBF domain.</t>

<t>A policer is to be placed logically after the damper module of gLBF and 
before the queuing module.</t>

<t>Instead of a policer, the ingress edge node of the gLBF domain MAY instead
use a per-flow shaper or interleaved regulator. When a prior hop sends
for example packets of a flow with too high a rate, a shaper would
attempt to avoid discard packets from such a flow until also the burst size
of the flow is exceeded, by further delaying them. A policer would immediately
discard any packets that does not meet their flows envelope.</t>

</section>
<section anchor="glbf-sender-types"><name>gLBF sender types</name>

<section anchor="simple-glbf-senders"><name>Simple gLBF senders</name>

<t>Senders are expected to send their traffic flows such that their
relative timing complies to the admitted traffic envelope. Senders
that for example only send one flow, such as simple sensors or
actors, typically will be able to do this.</t>

<t>When senders can actually do this (send packets for gLBF with the
right timing), then these packets do not need to have gLBF packet header elements.
Instead, this ingress network node can calculate the damper time locally from
the following consideration to avoid any need for gLBF processing
in the sender.</t>

<t>The maximum gLBF damper time in this case is the serialization time of the largest packet
for gLBF received from the sender. Thus, when the sender sends smaller
packets than the maximum admitted packet size, then the first hop network
node needs to dampen packets based on that difference in serialization time.</t>

</section>
<section anchor="normal-glbf-senders"><name>Normal gLBF senders</name>

<t>When senders can not fully comply to send packets with their
admitted envelope, then they need to implement gLBF and indicate in the packet header the
gLBF damper value. For example, when the sender can not ensure that
at the target sending time of a gLBF packet the outgoing interface is
free, then that other still serializing packet will impact the timing
of the following packet(s) for gLBF. Another reason is when the sender has to send
packets from multiple flows and those can not or are are not generated in a coordinated
fashion to avoid delay, then they could compete on the outgoing interface
of the sender, introducing delay.</t>

<t>Normal gLBF senders simply need to implement the queue and marking stage
of gLBF, but not the dampening stage, because that only applies to receivers/forwarders.</t>

</section>
<section anchor="non-glbf-senders"><name>Non gLBF senders</name>

<t>When senders can not be simple gLBF senders but can also not
implement the gLBF queuing and marking stage, then the following
first hop node of the gLBF domain needs to treat them like untrusted
prior hop but always use a shaper or interleaved regulator so as not
to discard their packets.</t>

</section>
</section>
<section anchor="receivers-and-glbf"><name>receivers and gLBF</name>

<section anchor="normal-glbf-receivers"><name>Normal gLBF receivers</name>

<t>Normal gLBF receivers can process packet gLBF markings and need to 
therefore implement the gLBF dampening block.</t>

</section>
<section anchor="glbf-incapable-receivers"><name>gLBF incapable receivers</name>

<t>When receivers can not implement the gLBF dampening stage, then
the worst-case burst that may arrive at the receiver is to be
counted as added jitter to the end-to-end service.</t>

<t>It is impossible to let the network eliminate such bursts without
additional coordination and gating of packets across all senders
and their network ingress nodes by gating of those packets. This is
not a gLBF specific issue, but simply a limitation of the (near)
synchronous service model offered by gLBF and equally exists
in any delay and latency model with this type of service:</t>

<t>Consider a set of N senders conspire to generate a burst at the
same receiver. They do know from the admission control model the
latency each of them has to that receiver and can thus time the generation
of packets such that the last-hop router would have to send all those
N packets (one from each sender) in parallel on the interface. Which
is obviously not possible.</t>

<t>With gLBF capable receivers, this possible burst is taken into account
by including the latency introduced by such a worst-case burst into the
end-to-end latency through the controller-plane, and indicating the actual
latency that the packet needs to be dampened in the gLBF header field to the receiver.
But when the receiver does not support such dampening, then that
maximum last-hop burst-size simply turns into possible jitter.</t>

</section>
</section>
<section anchor="further-considerations"><name>Further considerations</name>

<t>A host may be a different type of gLBF sender than it is gLBF receiver.
In a common case in cloud applications, a container or VM in a data center
may the a sender/receiver, and such an application may be considered
to be trusted by the gLBF domain if it is an application of the network
operator itself (such as part of a higher level service of the network operator),
but not when it is a customer application.</t>

<t>gLBF marking needs to happen after contention of packets from all applications,
so it is something that can considered to happen inside the operating system.
This operating system of such a host may not (yet) implement gLBF, so
it may not be possible to correctly generate the gLBF marking as a sender.
Instead, the application may generate the appropriate packet markings for
steering and gLBF, but may need to leave the damper marking incorrect.</t>

<t>On the other hand, dampening received gLBF packets on a receiver can happen at the
application level, so that the operating system does not need to do it. Such
dampening is exactly the same functionality that in applications is normally
called "playout buffering", except that it will be a much smaller amount of
delay time because playout buffering needs to take the whole path delay into
account, whereas gLBF dampening is only for the prior hop.</t>

</section>
<section anchor="summary-1"><name>Summary</name>

<t>There is a non-trivial set of options for ingress/egress processing
that could be beneficial to simplify and secure dealing with different
type of sender and receivers.</t>

<t>Later versions of this memo can attempt
to define specific profiles of edge behavior to limit the recommended
set of implememtation options for sender/receivers and gLBF edge nodes.</t>

</section>
</section>
</section>
<section anchor="controller-plane-considerations-informative"><name>Controller-plane considerations (informative)</name>

<section anchor="glbf-versus-ubs-tsn-ats"><name>gLBF versus UBS / TSN-ATS</name>

<t>By relying on <xref target="UBS"/> for both the traffic model as well as the
bounded latency calculus, gLBF should be easy to operationalize
by relying on controller-plane implementations for TSN-ATS: UBS/TSN-ATS
and gLBF provide the same bounded latency and use the same model
to manage bandwidth for different flows: By calculating which
flow needs to go on which hop into which priority queues.</t>

<t>The main change to a UBS/TSN-ATS controller-plane when using gLBF
is that when a flow is to be admitted into the network, removed,
or rerouted. In UBS, each of these operations imply that the
controller-plane needs to signal to each node along the path
the traffic flow parameters so the forwarding plane can establish
the per-hop,per-flow state for the flow. Depending on network
configuration this will also imply configuration of the next-hop
for the flow for the routing.</t>

<t>For gLBF hop-by-hop operations, the first hop needs to receive
the per-path or per-hop priority information that is then imposed
into an appropriate packet header for the flows packets.</t>

</section>
<section anchor="first-hop-policing"><name>first-hop policing</name>

<t>In gLBF, the controller-plane has to perform this action only against
the ingress node to the gLBF domain. The traffic parameters such as
rate and burst size are only relevant to establish a policer so
that the flow can not violate the admitted traffic parameters for
the flow. This "policing" on the first hop is actually a function
independent of gLBF, UBS or any other method used across the path.</t>

</section>
<section anchor="path-steering"><name>path steering</name>

<t>gLBF operated independently of the path steering mechanism, but
the controller-plane will very likely want to ensure that gLBF
(or for that matter any DetNet) traffic does not unexpectedly gets
rerouted by in-networking routing mechanisms because normally
it will or can not reserve resources for such re-routed flows
on such arbitrary failure paths without significant additional
effort and/or waste of resources.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA considerations</name>

<t>None yet.</t>

</section>
<section anchor="changelog"><name>Changelog</name>

<t>[RFC-editor: please remove]</t>

<t>00 Initial version.</t>

<t>01 Added use cases from  Stefan</t>

<t>02 refresh only, waiting for progress in WG discussion</t>

<t>03 refresh, affiliation change of co-author</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2210">
  <front>
    <title>The Use of RSVP with IETF Integrated Services</title>
    <author fullname="J. Wroclawski" initials="J." surname="Wroclawski"/>
    <date month="September" year="1997"/>
    <abstract>
      <t>This note describes the use of the RSVP resource reservation protocol with the Controlled-Load and Guaranteed QoS control services. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2210"/>
  <seriesInfo name="DOI" value="10.17487/RFC2210"/>
</reference>

<reference anchor="RFC2212">
  <front>
    <title>Specification of Guaranteed Quality of Service</title>
    <author fullname="S. Shenker" initials="S." surname="Shenker"/>
    <author fullname="C. Partridge" initials="C." surname="Partridge"/>
    <author fullname="R. Guerin" initials="R." surname="Guerin"/>
    <date month="September" year="1997"/>
    <abstract>
      <t>This memo describes the network element behavior required to deliver a guaranteed service (guaranteed delay and bandwidth) in the Internet. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2212"/>
  <seriesInfo name="DOI" value="10.17487/RFC2212"/>
</reference>

<reference anchor="RFC2474">
  <front>
    <title>Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
    <author fullname="K. Nichols" initials="K." surname="Nichols"/>
    <author fullname="S. Blake" initials="S." surname="Blake"/>
    <author fullname="F. Baker" initials="F." surname="Baker"/>
    <author fullname="D. Black" initials="D." surname="Black"/>
    <date month="December" year="1998"/>
    <abstract>
      <t>This document defines the IP header field, called the DS (for differentiated services) field. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2474"/>
  <seriesInfo name="DOI" value="10.17487/RFC2474"/>
</reference>

<reference anchor="RFC3270">
  <front>
    <title>Multi-Protocol Label Switching (MPLS) Support of Differentiated Services</title>
    <author fullname="F. Le Faucheur" initials="F." role="editor" surname="Le Faucheur"/>
    <author fullname="L. Wu" initials="L." surname="Wu"/>
    <author fullname="B. Davie" initials="B." surname="Davie"/>
    <author fullname="S. Davari" initials="S." surname="Davari"/>
    <author fullname="P. Vaananen" initials="P." surname="Vaananen"/>
    <author fullname="R. Krishnan" initials="R." surname="Krishnan"/>
    <author fullname="P. Cheval" initials="P." surname="Cheval"/>
    <author fullname="J. Heinanen" initials="J." surname="Heinanen"/>
    <date month="May" year="2002"/>
    <abstract>
      <t>This document defines a flexible solution for support of Differentiated Services (Diff-Serv) over Multi-Protocol Label Switching (MPLS) networks. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="3270"/>
  <seriesInfo name="DOI" value="10.17487/RFC3270"/>
</reference>

<reference anchor="RFC8655">
  <front>
    <title>Deterministic Networking Architecture</title>
    <author fullname="N. Finn" initials="N." surname="Finn"/>
    <author fullname="P. Thubert" initials="P." surname="Thubert"/>
    <author fullname="B. Varga" initials="B." surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <date month="October" year="2019"/>
    <abstract>
      <t>This document provides the overall architecture for Deterministic Networking (DetNet), which provides a capability to carry specified unicast or multicast data flows for real-time applications with extremely low data loss rates and bounded latency within a network domain. Techniques used include 1) reserving data-plane resources for individual (or aggregated) DetNet flows in some or all of the intermediate nodes along the path of the flow, 2) providing explicit routes for DetNet flows that do not immediately change with the network topology, and 3) distributing data from DetNet flow packets over time and/or space to ensure delivery of each packet's data in spite of the loss of a path. DetNet operates at the IP layer and delivers service over lower-layer technologies such as MPLS and Time- Sensitive Networking (TSN) as defined by IEEE 802.1.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8655"/>
  <seriesInfo name="DOI" value="10.17487/RFC8655"/>
</reference>

<reference anchor="RFC8200">
  <front>
    <title>Internet Protocol, Version 6 (IPv6) Specification</title>
    <author fullname="S. Deering" initials="S." surname="Deering"/>
    <author fullname="R. Hinden" initials="R." surname="Hinden"/>
    <date month="July" year="2017"/>
    <abstract>
      <t>This document specifies version 6 of the Internet Protocol (IPv6). It obsoletes RFC 2460.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="86"/>
  <seriesInfo name="RFC" value="8200"/>
  <seriesInfo name="DOI" value="10.17487/RFC8200"/>
</reference>

<reference anchor="RFC8964">
  <front>
    <title>Deterministic Networking (DetNet) Data Plane: MPLS</title>
    <author fullname="B. Varga" initials="B." role="editor" surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <author fullname="L. Berger" initials="L." surname="Berger"/>
    <author fullname="A. Malis" initials="A." surname="Malis"/>
    <author fullname="S. Bryant" initials="S." surname="Bryant"/>
    <author fullname="J. Korhonen" initials="J." surname="Korhonen"/>
    <date month="January" year="2021"/>
    <abstract>
      <t>This document specifies the Deterministic Networking (DetNet) data plane when operating over an MPLS Packet Switched Network. It leverages existing pseudowire (PW) encapsulations and MPLS Traffic Engineering (MPLS-TE) encapsulations and mechanisms. This document builds on the DetNet architecture and data plane framework.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8964"/>
  <seriesInfo name="DOI" value="10.17487/RFC8964"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC3209">
  <front>
    <title>RSVP-TE: Extensions to RSVP for LSP Tunnels</title>
    <author fullname="D. Awduche" initials="D." surname="Awduche"/>
    <author fullname="L. Berger" initials="L." surname="Berger"/>
    <author fullname="D. Gan" initials="D." surname="Gan"/>
    <author fullname="T. Li" initials="T." surname="Li"/>
    <author fullname="V. Srinivasan" initials="V." surname="Srinivasan"/>
    <author fullname="G. Swallow" initials="G." surname="Swallow"/>
    <date month="December" year="2001"/>
    <abstract>
      <t>This document describes the use of RSVP (Resource Reservation Protocol), including all the necessary extensions, to establish label-switched paths (LSPs) in MPLS (Multi-Protocol Label Switching). Since the flow along an LSP is completely identified by the label applied at the ingress node of the path, these paths may be treated as tunnels. A key application of LSP tunnels is traffic engineering with MPLS as specified in RFC 2702. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="3209"/>
  <seriesInfo name="DOI" value="10.17487/RFC3209"/>
</reference>

<reference anchor="RFC4875">
  <front>
    <title>Extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for Point-to-Multipoint TE Label Switched Paths (LSPs)</title>
    <author fullname="R. Aggarwal" initials="R." role="editor" surname="Aggarwal"/>
    <author fullname="D. Papadimitriou" initials="D." role="editor" surname="Papadimitriou"/>
    <author fullname="S. Yasukawa" initials="S." role="editor" surname="Yasukawa"/>
    <date month="May" year="2007"/>
    <abstract>
      <t>This document describes extensions to Resource Reservation Protocol - Traffic Engineering (RSVP-TE) for the set up of Traffic Engineered (TE) point-to-multipoint (P2MP) Label Switched Paths (LSPs) in Multi- Protocol Label Switching (MPLS) and Generalized MPLS (GMPLS) networks. The solution relies on RSVP-TE without requiring a multicast routing protocol in the Service Provider core. Protocol elements and procedures for this solution are described.</t>
      <t>There can be various applications for P2MP TE LSPs such as IP multicast. Specification of how such applications will use a P2MP TE LSP is outside the scope of this document. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="4875"/>
  <seriesInfo name="DOI" value="10.17487/RFC4875"/>
</reference>

<reference anchor="RFC8296">
  <front>
    <title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
    <author fullname="IJ. Wijnands" initials="IJ." role="editor" surname="Wijnands"/>
    <author fullname="E. Rosen" initials="E." role="editor" surname="Rosen"/>
    <author fullname="A. Dolganow" initials="A." surname="Dolganow"/>
    <author fullname="J. Tantsura" initials="J." surname="Tantsura"/>
    <author fullname="S. Aldrin" initials="S." surname="Aldrin"/>
    <author fullname="I. Meilik" initials="I." surname="Meilik"/>
    <date month="January" year="2018"/>
    <abstract>
      <t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a "multicast domain", without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol. When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent. The ingress router then encapsulates the packet in a BIER header. The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header. The details of the encapsulation depend on the type of network used to realize the multicast domain. This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8296"/>
  <seriesInfo name="DOI" value="10.17487/RFC8296"/>
</reference>

<reference anchor="RFC8402">
  <front>
    <title>Segment Routing Architecture</title>
    <author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"/>
    <author fullname="S. Previdi" initials="S." role="editor" surname="Previdi"/>
    <author fullname="L. Ginsberg" initials="L." surname="Ginsberg"/>
    <author fullname="B. Decraene" initials="B." surname="Decraene"/>
    <author fullname="S. Litkowski" initials="S." surname="Litkowski"/>
    <author fullname="R. Shakir" initials="R." surname="Shakir"/>
    <date month="July" year="2018"/>
    <abstract>
      <t>Segment Routing (SR) leverages the source routing paradigm. A node steers a packet through an ordered list of instructions, called "segments". A segment can represent any instruction, topological or service based. A segment can have a semantic local to an SR node or global within an SR domain. SR provides a mechanism that allows a flow to be restricted to a specific topological path, while maintaining per-flow state only at the ingress node(s) to the SR domain.</t>
      <t>SR can be directly applied to the MPLS architecture with no change to the forwarding plane. A segment is encoded as an MPLS label. An ordered list of segments is encoded as a stack of labels. The segment to process is on the top of the stack. Upon completion of a segment, the related label is popped from the stack.</t>
      <t>SR can be applied to the IPv6 architecture, with a new type of routing header. A segment is encoded as an IPv6 address. An ordered list of segments is encoded as an ordered list of IPv6 addresses in the routing header. The active segment is indicated by the Destination Address (DA) of the packet. The next active segment is indicated by a pointer in the new routing header.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8402"/>
  <seriesInfo name="DOI" value="10.17487/RFC8402"/>
</reference>

<reference anchor="RFC8754">
  <front>
    <title>IPv6 Segment Routing Header (SRH)</title>
    <author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"/>
    <author fullname="D. Dukes" initials="D." role="editor" surname="Dukes"/>
    <author fullname="S. Previdi" initials="S." surname="Previdi"/>
    <author fullname="J. Leddy" initials="J." surname="Leddy"/>
    <author fullname="S. Matsushima" initials="S." surname="Matsushima"/>
    <author fullname="D. Voyer" initials="D." surname="Voyer"/>
    <date month="March" year="2020"/>
    <abstract>
      <t>Segment Routing can be applied to the IPv6 data plane using a new type of Routing Extension Header called the Segment Routing Header (SRH). This document describes the SRH and how it is used by nodes that are Segment Routing (SR) capable.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8754"/>
  <seriesInfo name="DOI" value="10.17487/RFC8754"/>
</reference>

<reference anchor="RFC8938">
  <front>
    <title>Deterministic Networking (DetNet) Data Plane Framework</title>
    <author fullname="B. Varga" initials="B." role="editor" surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <author fullname="L. Berger" initials="L." surname="Berger"/>
    <author fullname="A. Malis" initials="A." surname="Malis"/>
    <author fullname="S. Bryant" initials="S." surname="Bryant"/>
    <date month="November" year="2020"/>
    <abstract>
      <t>This document provides an overall framework for the Deterministic Networking (DetNet) data plane. It covers concepts and considerations that are generally common to any DetNet data plane specification. It describes related Controller Plane considerations as well.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8938"/>
  <seriesInfo name="DOI" value="10.17487/RFC8938"/>
</reference>

<reference anchor="RFC8986">
  <front>
    <title>Segment Routing over IPv6 (SRv6) Network Programming</title>
    <author fullname="C. Filsfils" initials="C." role="editor" surname="Filsfils"/>
    <author fullname="P. Camarillo" initials="P." role="editor" surname="Camarillo"/>
    <author fullname="J. Leddy" initials="J." surname="Leddy"/>
    <author fullname="D. Voyer" initials="D." surname="Voyer"/>
    <author fullname="S. Matsushima" initials="S." surname="Matsushima"/>
    <author fullname="Z. Li" initials="Z." surname="Li"/>
    <date month="February" year="2021"/>
    <abstract>
      <t>The Segment Routing over IPv6 (SRv6) Network Programming framework enables a network operator or an application to specify a packet processing program by encoding a sequence of instructions in the IPv6 packet header.</t>
      <t>Each instruction is implemented on one or several nodes in the network and identified by an SRv6 Segment Identifier in the packet.</t>
      <t>This document defines the SRv6 Network Programming concept and specifies the base set of SRv6 behaviors that enables the creation of interoperable overlays with underlay optimization.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8986"/>
  <seriesInfo name="DOI" value="10.17487/RFC8986"/>
</reference>

<reference anchor="RFC9016">
  <front>
    <title>Flow and Service Information Model for Deterministic Networking (DetNet)</title>
    <author fullname="B. Varga" initials="B." surname="Varga"/>
    <author fullname="J. Farkas" initials="J." surname="Farkas"/>
    <author fullname="R. Cummings" initials="R." surname="Cummings"/>
    <author fullname="Y. Jiang" initials="Y." surname="Jiang"/>
    <author fullname="D. Fedyk" initials="D." surname="Fedyk"/>
    <date month="March" year="2021"/>
    <abstract>
      <t>This document describes the flow and service information model for Deterministic Networking (DetNet). These models are defined for IP and MPLS DetNet data planes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9016"/>
  <seriesInfo name="DOI" value="10.17487/RFC9016"/>
</reference>

<reference anchor="RFC9262">
  <front>
    <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
    <author fullname="T. Eckert" initials="T." role="editor" surname="Eckert"/>
    <author fullname="M. Menth" initials="M." surname="Menth"/>
    <author fullname="G. Cauchie" initials="G." surname="Cauchie"/>
    <date month="October" year="2022"/>
    <abstract>
      <t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for "Bit Index Explicit Replication" (BIER) packets (RFC 8279); it is called "Tree Engineering for Bit Index Explicit Replication" (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.</t>
      <t>BIER-TE introduces a new semantic for "bit positions" (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate "Bit-Forwarding Egress Routers" (BFERs). A BIER-TE "packets BitString" therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER "subdomains" (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the "Interior Gateway Protocol" (IGP).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9262"/>
  <seriesInfo name="DOI" value="10.17487/RFC9262"/>
</reference>

<reference anchor="RFC9320">
  <front>
    <title>Deterministic Networking (DetNet) Bounded Latency</title>
    <author fullname="N. Finn" initials="N." surname="Finn"/>
    <author fullname="J.-Y. Le Boudec" initials="J.-Y." surname="Le Boudec"/>
    <author fullname="E. Mohammadpour" initials="E." surname="Mohammadpour"/>
    <author fullname="J. Zhang" initials="J." surname="Zhang"/>
    <author fullname="B. Varga" initials="B." surname="Varga"/>
    <date month="November" year="2022"/>
    <abstract>
      <t>This document presents a timing model for sources, destinations, and Deterministic Networking (DetNet) transit nodes. Using the model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing methods. The methodology can be used by the management and control planes and by resource reservation algorithms to provide bounded latency and zero congestion loss for the DetNet service.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9320"/>
  <seriesInfo name="DOI" value="10.17487/RFC9320"/>
</reference>


<reference anchor="SCQF">
   <front>
      <title>Segment Routing (SR) Based Bounded Latency</title>
      <author fullname="Mach Chen" initials="M." surname="Chen">
         <organization>Huawei</organization>
      </author>
      <author fullname="Xuesong Geng" initials="X." surname="Geng">
         <organization>Huawei</organization>
      </author>
      <author fullname="Zhenqiang Li" initials="Z." surname="Li">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Jinoo Joung" initials="J." surname="Joung">
         <organization>Sangmyung University</organization>
      </author>
      <author fullname="Jeong-dong Ryoo" initials="J." surname="Ryoo">
         <organization>ETRI</organization>
      </author>
      <date day="7" month="July" year="2023"/>
      <abstract>
	 <t>   One of the goals of DetNet is to provide bounded end-to-end latency
   for critical flows.  This document defines how to leverage Segment
   Routing (SR) to implement bounded latency.  Specifically, the SR
   Identifier (SID) is used to specify transmission time (cycles) of a
   packet.  When forwarding devices along the path follow the
   instructions carried in the packet, the bounded latency is achieved.
   This is called Cycle Specified Queuing and Forwarding (CSQF) in this
   document.

   Since SR is a source routing technology, no per-flow state is
   maintained at intermediate and egress nodes, SR-based CSQF naturally
   supports flow aggregation that is deemed to be a key capability to
   allow DetNet to scale to large networks.


	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-chen-detnet-sr-based-bounded-latency-03"/>
   
</reference>


<reference anchor="LSDN">
   <front>
      <title>Large-Scale Deterministic IP Network</title>
      <author fullname="Li Qiang" initials="L." surname="Qiang">
         <organization>Huawei</organization>
      </author>
      <author fullname="Xuesong Geng" initials="X." surname="Geng">
         <organization>Huawei</organization>
      </author>
      <author fullname="Bingyang Liu" initials="B." surname="Liu">
         <organization>Huawei</organization>
      </author>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Huawei</organization>
      </author>
      <author fullname="Liang Geng" initials="L." surname="Geng">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Guangpeng Li" initials="G." surname="Li">
         </author>
      <date day="2" month="September" year="2019"/>
      <abstract>
	 <t>   This document presents the overall framework and key method for
   Large-scale Deterministic Network (LDN).  LDN can provide bounded
   latency and delay variation (jitter) without requiring precise time
   synchronization among nodes, or per-flow state in transit nodes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-qiang-detnet-large-scale-detnet-05"/>
   
</reference>


<reference anchor="TCQF">
   <front>
      <title>Deterministic Networking (DetNet) Data Plane - Tagged Cyclic Queuing and Forwarding (TCQF) for bounded latency with low jitter in large scale DetNets</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname="Yizhou Li" initials="Y." surname="Li">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Stewart Bryant" initials="S." surname="Bryant">
         <organization>University of Surrey ICS</organization>
      </author>
      <author fullname="Andrew G. Malis" initials="A. G." surname="Malis">
         <organization>Malis Consulting</organization>
      </author>
      <author fullname="Jeong-dong Ryoo" initials="J." surname="Ryoo">
         <organization>ETRI</organization>
      </author>
      <author fullname="Peng Liu" initials="P." surname="Liu">
         <organization>China Mobile</organization>
      </author>
      <author fullname="Guangpeng Li" initials="G." surname="Li">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Shoushou Ren" initials="S." surname="Ren">
         <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Fan Yang" initials="F." surname="Yang">
         <organization>Huawei Technologies</organization>
      </author>
      <date day="5" month="January" year="2024"/>
      <abstract>
	 <t>   This memo specifies a forwarding method for bounded latency and
   bounded jitter for Deterministic Networks and is a variant of the
   IEEE TSN Cyclic Queuing and Forwarding (CQF) method.  Tagged CQF
   (TCQF) supports more than 2 cycles and indicates the cycle number via
   an existing or new packet header field called the tag to replace the
   cycle mapping in CQF which is based purely on synchronized reception
   clock.

   This memo standardizes TCQF as a mechanism independent of the tagging
   method used.  It also specifies tagging via the (1) the existing MPLS
   packet Traffic Class (TC) field for MPLS packets, (2) the IP/IPv6
   DSCP field for IP/IPv6 packets, and (3) a new TCQF Option header for
   IPv6 packets.

   Target benefits of TCQF include low end-to-end jitter, ease of high-
   speed hardware implementation, optional ability to support large
   number of flow in large networks via DiffServ style aggregation by
   applying TCQF to the DetNet aggregate instead of each DetNet flow
   individually, and support of wide-area DetNet networks with arbitrary
   link latencies and latency variations as well as low accuracy clock
   synchronization.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-eckert-detnet-tcqf-05"/>
   
</reference>


<reference anchor="I-D.dang-queuing-with-multiple-cyclic-buffers">
   <front>
      <title>A Queuing Mechanism with Multiple Cyclic Buffers</title>
      <author fullname="Bingyang Liu" initials="B." surname="Liu">
         <organization>Huawei</organization>
      </author>
      <author fullname="Joanna Dang" initials="J." surname="Dang">
         <organization>Huawei</organization>
      </author>
      <date day="22" month="February" year="2021"/>
      <abstract>
	 <t>   This document presents a queuing mechanism with multiple cyclic
   buffers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-dang-queuing-with-multiple-cyclic-buffers-00"/>
   
</reference>


<reference anchor="BIER-TE">
   <front>
      <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname="Michael Menth" initials="M." surname="Menth">
         <organization>University of Tuebingen</organization>
      </author>
      <author fullname="Gregory Cauchie" initials="G." surname="Cauchie">
         <organization>KOEVOO</organization>
      </author>
      <date day="25" month="April" year="2022"/>
      <abstract>
	 <t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for &quot;Bit Index Explicit Replication&quot; (BIER) packets (RFC 8279); it is called &quot;Tree Engineering for Bit Index Explicit Replication&quot; (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.

 BIER-TE introduces a new semantic for &quot;bit positions&quot; (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFERs). A BIER-TE &quot;packets BitString&quot; therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER &quot;subdomains&quot; (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the &quot;Interior Gateway Protocol&quot; (IGP).
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-bier-te-arch-13"/>
   
</reference>


<reference anchor="DNBL">
   <front>
      <title>Deterministic Networking (DetNet) Bounded Latency</title>
      <author fullname="Norman Finn" initials="N." surname="Finn">
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname="Jean-Yves Le Boudec" initials="J." surname="Le Boudec">
         <organization>EPFL</organization>
      </author>
      <author fullname="Ehsan Mohammadpour" initials="E." surname="Mohammadpour">
         <organization>EPFL</organization>
      </author>
      <author fullname="Jiayi Zhang" initials="J." surname="Zhang">
         <organization>Huawei Technologies Co. Ltd</organization>
      </author>
      <author fullname="Balazs Varga" initials="B." surname="Varga">
         <organization>Ericsson</organization>
      </author>
      <date day="8" month="April" year="2022"/>
      <abstract>
	 <t>This document presents a timing model for sources, destinations, and Deterministic Networking (DetNet) transit nodes.  Using the model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing methods.  The methodology can be used by the management and control planes and by resource reservation algorithms to provide bounded latency and zero congestion loss for the DetNet service.
	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-detnet-bounded-latency-10"/>
   
</reference>


<reference anchor="I-D.stein-srtsn">
   <front>
      <title>Segment Routed Time Sensitive Networking</title>
      <author fullname="Yaakov (J) Stein" initials="Y. J." surname="Stein">
         <organization>RAD</organization>
      </author>
      <date day="29" month="August" year="2021"/>
      <abstract>
	 <t>   Routers perform two distinct user-plane functionalities, namely
   forwarding (where the packet should be sent) and scheduling (when the
   packet should be sent).  One forwarding paradigm is segment routing,
   in which forwarding instructions are encoded in the packet in a stack
   data structure, rather than programmed into the routers.  Time
   Sensitive Networking and Deterministic Networking provide several
   mechanisms for scheduling under the assumption that routers are time
   synchronized.  The most effective mechanisms for delay minimization
   involve per-flow resource allocation.

   SRTSN is a unified approach to forwarding and scheduling that uses a
   single stack data structure.  Each stack entry consists of a
   forwarding portion (e.g., IP addresses or suffixes) and a scheduling
   portion (deadline by which the packet must exit the router).  SRTSN
   thus fully implements network programming for time sensitive flows,
   by prescribing to each router both to-where and by-when each packet
   should be sent.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-stein-srtsn-01"/>
   
</reference>


<reference anchor="I-D.eckert-detnet-bounded-latency-problems">
   <front>
      <title>Problems with existing DetNet bounded latency queuing mechanisms</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname="Stewart Bryant" initials="S." surname="Bryant">
         <organization>Stewart Bryant Ltd</organization>
      </author>
      <date day="12" month="July" year="2021"/>
      <abstract>
	 <t>   The purpose of this memo is to explain the challenges and limitations
   of existing (standardized) bounded latency queuing mechanisms for
   desirable (large scale) MPLS and/or IP based networks to allow them
   to support DetNet services.  These challenges relate to low-cost,
   high-speed hardware implementations, desirable network design
   approaches, system complexity, reliability, scalability, cost of
   signaling, performance and jitter experience for the DetNet
   applications.  Many of these problems are rooted in the use of per-
   hop, per-flow (DetNet) forwarding and queuing state, but highly
   accurate network wide time synchronization can be another challenge
   for some networks.

   This memo does not intend to propose a specific queuing solution, but
   in the same way in which it describes the challenges of mechanisms,
   it reviews how those problem are addressed by currently proposed new
   queuing mechanisms.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-eckert-detnet-bounded-latency-problems-00"/>
   
</reference>


<reference anchor="UBS" >
  <front>
    <title>Urgency-Based Scheduler for Time-Sensitive Switched Ethernet Networks</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <author initials="S." surname="Samii" fullname="Soheil Samii">
      <organization></organization>
    </author>
    <date year="2016"/>
  </front>
  <seriesInfo name="IEEE" value="28th Euromicro Conference on Real-Time Systems (ECRTS)"/>
</reference>
<reference anchor="LBF" >
  <front>
    <title>High-Precision Latency Forwarding over Packet-Programmable Networks</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <date year="2020" month="April"/>
  </front>
  <seriesInfo name="IEEE" value="2020 IEEE/IFIP Network Operations and Management Symposium (NOMS 2020)"/>
  <seriesInfo name="doi" value="10.1109/NOMS47738.2020.9110431"/>
</reference>
<reference anchor="gLBF" target="https://dl.ifip.org/db/conf/cnsm/cnsm2021/1570754857.pdf">
  <front>
    <title>gLBF: Per-Flow Stateless Packet Forwarding with Guaranteed Latency and Near-Synchronous Jitter,</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization></organization>
    </author>
    <date year="2021" month="October"/>
  </front>
  <seriesInfo name="IEEE" value="2021 17th International Conference on Network and Service Management (CNSM), Izmir, Turkey"/>
  <seriesInfo name="doi" value="10.23919/CNSM52442.2021.9615538"/>
</reference>
<reference anchor="gLBF-Springer2023" >
  <front>
    <title>High Precision Latency Forwarding for Wide Area Networks Through Intelligent In-Packet Header Processing (gLBF)</title>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization></organization>
    </author>
    <author initials="A." surname="Clemm" fullname="Alexander Clemm">
      <organization></organization>
    </author>
    <author initials="S." surname="Bryant" fullname="Stewart Bryant">
      <organization></organization>
    </author>
    <date year="2023" month="February"/>
  </front>
  <seriesInfo name="Springer" value="Journal of Network and Systems Management, 31, Article number: 34 (2023)"/>
  <seriesInfo name="doi" value="https://doi.org/10.1007/s10922-022-09718-9"/>
</reference>
<reference anchor="IEEE802.1Q" target="https://doi.org/10.1109/ieeestd.2018.8403927">
  <front>
    <title>IEEE Standard for Local and Metropolitan Area Network — Bridges and Bridged Networks (IEEE Std 802.1Q)</title>
    <author >
      <organization>IEEE 802.1 Working Group</organization>
    </author>
    <date year="2018"/>
  </front>
  <seriesInfo name="doi" value="10.1109/ieeestd.2018.8403927"/>
</reference>
<reference anchor="IEEE802.1Qbv" >
  <front>
    <title>IEEE Standard for Local and metropolitan area networks -- Bridges and Bridged Networks - Amendment 25: Enhancements for Scheduled Traffic (TAS)</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2015"/>
  </front>
</reference>
<reference anchor="CQF" >
  <front>
    <title>IEEE Std 802.1Qch-2017: IEEE Standard for Local and Metropolitan Area Networks - Bridges and Bridged Networks - Amendment 29: Cyclic Queuing and Forwarding (CQF)</title>
    <author >
      <organization>IEEE Time-Sensitive Networking (TSN) Task Group.</organization>
    </author>
    <date year="2017"/>
  </front>
</reference>
<reference anchor="TSN-ATS" target="https://1.ieee802.org/tsn/802-1qcr/">
  <front>
    <title>P802.1Qcr - Bridges and Bridged Networks Amendment: Asynchronous Traffic Shaping</title>
    <author initials="J." surname="Specht" fullname="Johannes Specht">
      <organization></organization>
    </author>
    <date year="2020" month="July" day="09"/>
  </front>
  <seriesInfo name="IEEE" value=""/>
</reference>
<reference anchor="IPV6-PARMS" target="https://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xhtml">
  <front>
    <title>Internet Protocol Version 6 (IPv6) Parameters</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="IANA" value=""/>
</reference>
<reference anchor="LDN" target="https://dl.ifip.org/db/conf/networking/networking2021/1570696888.pdf">
  <front>
    <title>Towards Large-Scale Deterministic IP Networks</title>
    <author initials="B." surname="Liu" fullname="Binyang Liu">
      <organization></organization>
    </author>
    <author initials="S." surname="Ren" fullname="Shoushou Ren">
      <organization></organization>
    </author>
    <author initials="C." surname="Wang" fullname="Chuang Wang">
      <organization></organization>
    </author>
    <author initials="V." surname="Angilella" fullname="Vincent Angilella">
      <organization></organization>
    </author>
    <author initials="P." surname="Medagliani" fullname="Paolo Medagliani">
      <organization></organization>
    </author>
    <author initials="S." surname="Martin" fullname="Sebastien Martin">
      <organization></organization>
    </author>
    <author initials="J." surname="Leguay" fullname="Jeremie Leguay">
      <organization></organization>
    </author>
    <date year="2021"/>
  </front>
  <seriesInfo name="IEEE" value="2021 IFIP Networking Conference (IFIP Networking)"/>
  <seriesInfo name="doi" value="10.23919/IFIPNetworking52078.2021.9472798"/>
</reference>
<reference anchor="multipleCQF" target="https://www.ieee802.org/1/files/public/docs2021/new-finn-multiple-CQF-0921-v02.pdf">
  <front>
    <title>Multiple Cyclic Queuing and Forwarding</title>
    <author initials="N." surname="Finn" fullname="Norm Finn">
      <organization></organization>
    </author>
    <date year="2021" month="October"/>
  </front>
</reference>


    </references>


<?line 1064?>

<section anchor="high-speed-implementation-considerations"><name>High speed implementation considerations</name>

<section anchor="high-speed-example-pseudocode-instead-of-reference-pseudocode"><name>High speed example pseudocode instead of reference pseudocode</name>

<t>This memo does not describe a normative reference code that aligns with
the normative functional description above <xref target="glbf-spec"/>. The primary reason
is that a naive 1:1 implementation of the functional description would
lead to inferior performance. Nevertheless, the feasibility of high speed
implementations is an important factor in the ability to deploy 
mechanisms like gLBF. Therefore, this appendix describes considerations
for such high speed implementations including pseudocode for on
possible option.</t>

<t><xref target="gLBF"/> describes two approaches for possible optimized hardware implementation
approaches for gLBF. One using "Push In First Out" (PIFO) queues, the
other one times FIFO queues. The following is a representation and
explanation of that second approach because it is hopefully more feasible
for nearer term hardware implementations given the fact that scalable
FIFO high-speed hardware implementations are still a matter for research.</t>

<t>However, the timed FIFO style algorithm presented here is also subject
to possible scalability challenges for hardware because it requires for
each outgoing interface  O(IIF * priorities^2) number of FIFO queues,
where IIF is the number of (incoming) interfaces on the node, and priorities is the
number of priority levels desired (TSN allows up to 8). If however
the priority of flows (packets) used is not per-hop but the same for every
hop (per-path), then the number is just (IIF * priorities).</t>

</section>
<section anchor="ubs-high-speed-implementations"><name>UBS high speed implementations</name>

<t>The algorithm for the pseudocode shown in this appendix further down in this section
is based on the analysis of gLBF behavior done in and for <xref target="gLBF"/>. 
This analysis re-applies the same type of analysis and algorithm that
was done in <xref target="UBS"/> and can be used to implement TSN-ATS in high
speed switching hardware. Therefore, this appendix will start by explaining
the UBS mechanisms.</t>

<t>UBS (see <xref target="UBS"/>, Figure 4), logically consists of two separate stages.
The first stage is a per priority, per incoming interface (IIF) interleaved
regulator. An interleaved regulator is a FIFO where dequeuing of the
queue head packet (qhead) is based on the per-flow state of qhead.</t>

<t>A target departure time for that qhead is calculated from the flow state of
the packet maintained on the router across packets and once that departure time
is reached, the packet is passed to one of the egress strict priority
queues. This is called interleaved regulator, because the FIFO will have
packets from multiple flows (all from the same incoming interface and
outgoing priority), hence 'interleave', and regulator because of the delaying
of the packet up to the target departure time.</t>

<t>The innovation of interleaved regulators as opposed to the prior per-flow shapers
as used in <xref target="RFC2210"/> is the recognition and mathematical proof that the arrival and
target departure times of all packets received from the same IIF (prior hop node)
and the same egress priority will be in order and that they can 
be enqueued into a single FIFO where the per-flow processing only needs to
happen for the qhead. Without (anything but negligible) added latency
vs. per-flow shapers.</t>

<t>With this understanding, the interleaved regulator and following strict
priority stage can easily be combined into a single queuing stage with
appropriate scheduling. In this "flattened" approach, each logical egress
strict priority queue consists of the per-IIF interleaved regulator (FIFO queue)
for that priority.</t>

<t>Scheduling of packets on egress does now need to perform the per-queue
processing of the per-flow state of the qhead, and then take the target
departure time of that packet into account, selecting the interleaved regulator
with the highest priority and earliest target departure time qhead.</t>

</section>
<section anchor="glbf-compared-to-ubs"><name>gLBF compared to UBS</name>

<t>In gLBF, the very same line of thoughts as in UBS can be applied and are the basis
for the described algorithm and shown pseudocode.</t>

<t>In glBF, the order of packets in their arrival and target departure times
depends on the egress priority, the IIF, but also on the priority the packet had
on the prior hop (pprio). All packets with the same (IIF,prio,prio) will arrive
in the same order in which they need to depart, and in which it is therefore
possible to use a FIFO to enqueue the packets and only do timed dequeuing
of the qhead.</t>

<t>Both prio and pprio are of interest, because when gLBF uses an encapsulation
allowing per-hop priority indications, its priority on each hop can be different.
In UBS, priority can equally be different across hops for the same packet,
but the prior hop priority is not necessary to put packets into separate
interleaved regulators because UBS targets in-time delay, where the
interleaved regulator does (only) need to compensate for burst accumulation,
but in gLBF the delay to be introduced depends on the damper value which
depends on the prior hop priority and in result, the order in which in
gLBF packets should depart (absent any burst accumulation) depends also
on the prior hop priority.</t>

<t>Because gLBF does not deal with per-flow state on the router as UBS
does in its interleaved regulators, the FIFOs for gLBF are called timed
FIFOs in this memo and not interleaved regulators</t>

</section>
<section anchor="comparison-to-normative-behavior"><name>Comparison to normative behavior</name>

<t>Whereas the normative description described D, Q and M blocks,
where the D block performs the dampening, and the Q block performs
the priority queuing block, in the high speed hardware optimization,
these are replaced by a single DQ block where the packets are
enqueued into a single stage per-(IIF,pprio,prio) FIFO (similar to UBS) and then
the dampening happens (similar to UBS) on dequeuing from that stage
by the damper time but scheduling/prioritizing packets based on their prio.</t>

<figure title="High Speed single stage gLBF" anchor="FIG-hs-diagram"><artwork><![CDATA[
   +------------------------+       +------------------------+ 
   | Node A                 |       | Node B                 |
   | +-+    +-------+   +-+ |       | +-+    +-------+   +-+ |
 --|-|F|--x-| DQ y  |-z-|M|-|-------|-|F|--x-| DQ y  |-z-|M|-|--->
IIF| +-+    +-------+   +-+ |OIF IIF| +-+    +-------+   +-+ |OIF
   +------------------------+       +------------------------+
          |<- Dampened Q ->|               |<- Dampened Q ->|
                 |<- A/B in-time latency ->|
                 |<--A/B on-time latency -------->|
]]></artwork></figure>

<t>In the normative definition, the damper value to be put into the packet
depended on the time y, where the packet left the damper stage D and
entered the priority queue stage Q. Simplified, the damper value is
(MAX1 - (z - y)).</t>

<t>In the high-speed implementation, the packets are not passed from
a damper state queue to a priority queue. Instead they stay in the
same queue. This is on one hand one of the core reasons why this
approach can support high speed - it does not require two-stage
enqueuing/dequeing/ But it eliminates also the ability to take a time stamp
at time y.</t>

<t>To therefore be able to replicate the normative gLBF behavior with a
single stage, it is necessary in the marking stage M (where the new
damper value is calculated), to somehow know y.</t>

<t>Luckily, y is exactly the target departure time of the packet for
the D and therefore also the DQ stage, so already needs to be
calculated on entry to DQ by calculation: y = (x + damper - &lt;details&gt;),
as explained below.</t>

<t>The pseudocode consists of glbf_enqueue() describing the enqueuing
into the DQ stage, and glbf_dequeue() describing the dequeuing
from the DQ stage. glbf_dequeue() (synchronously) calls 
glbf_send() which represents the marking stage M.</t>

</section>
<section anchor="pseudocode"><name>Pseudocode</name>

<section anchor="glbfenqueue"><name>glbf_enqueue()</name>

<figure title="Reference pseudocode for glbf_enqueue()" anchor="FIG-glbf-enqueue"><artwork><![CDATA[
void glbf_enqueue(pak,oif) {
  tdamp = pak.header.tdamp // damper value from packet
  prio  = pak.header.prio  // this hops packet prio
  pprio = pak.header.pprio // previous hops packet prior
  iif   = pak.context.iif  // incoming interface of packet

  ta = adj_rcv_time(now(),                  \[1]
                    pak.context.iif.speed,
                    pak.context.length)

  td = now() + ta // (dampened earliest) departure time
  pak.context.max1 = max1\[oif,prio]
  enqueue(pak, td, q(oif,iif,prio,pprio))
}
]]></artwork></figure>

<t>pak.header are parsed fields from the received gLBF packet. tdamp is
the damper value.  pak.context is a node local header of the packet.
iif is the interface on which the packet was received.</t>

<t>prio and pprio are current prior hop priority from the packet header.
If for example SRH (<xref target="RFC8754"/>) is used
in conjunction with gLBF, and <xref target="RFC8986"/> formatting of SIDs
is used, then the priority for each hop could be expressed as
a 4-bit SID ARG field (see <xref target="RFC8986"/>, section 3.1) to indicate
16 different priorities per hop.</t>

<t>Parsing the prior hop priority is not a normative requirement of gLBF,
but a specific requirement of the high speed algorithm
presented here to allow the use of single stage timed FIFOs instead of PIFOs.
This type of parsing is not required for SRH, but would be a benefit
of a packet header which like SRH keeps the prior hops information,
opposed to the SR-MPLS approach where past hop SD/Labels are discarded.</t>

<t>now() takes a timestamp from a local (unsynchronised) clock at the
time of execution.</t>

<t>[1] pak.context.ta (time of arrival) is the calculated time at which the first bit of the packet
was entering the incoming interface of the node. adj_rcv_time() is defined
in the next subsection. td is the target
departure time calculated from the current time and the damper
value from the packet. It simply convert the relative damper value to
an absolute timestamp.</t>

<t>max1[oif,prio] is the only gLBF specific interface level state
maintained (read-only) across packets. It is the maximum time calculated
by admission control in the controller-plane for each priority. It
is transferred into a context header field here even though it will
only be used further down in dequeuing because of the assumption that
access to state information is not desirable at the time critical stage
of dequeuing/serialization, whereas such state lookup is very common
for many forwarding plane features before enqueuing.</t>

<t>Finally, the packet is enqueued into a per-oif,iif,prio,pprio timed
FIFO queue.</t>

</section>
<section anchor="adjrcvtime"><name>adj_rcv_time()</name>

<t>To calculate the reference time against which the damper value in the
packet is to be used, this specification assumes the time when the
first bit of the packet is seen on the media connecting to the
incoming interface.</t>

<figure title="Example pseudocode for adv_rcv_time()" anchor="FIG-adj-rcv-time"><artwork><![CDATA[
time_t adj_rcv_time(now, speed, length) {
  time_t now
  int speed, length
      
  return now - length * 8 / speed - FUDGE
}
]]></artwork></figure>

<t>In most simple node equipment, the primary variable latency introduced 
between that (first bit) measurement point and the time when the time
parameter t for adj_rcv_time() can be taken is the deserialization time of the
packet. This can easily be calculated from the packet length as assumed to be 
known from pak.context.length and the bitrate of the incoming interface known
from pak.context.iif.speed plus fixed measured or calculated other
latency FUDGE through internal processing. The example pseudocode, those
are assumed to be static.</t>

<t>If other internal factors in prior forwarding within the node do create
significant enough variation, then those may need compensation through
additional mechanisms. In this case, instead of as shown in
glbf_enqueue(), the reference time for calculation should be taken
directly upon receipt of the packet, before entering the forwarding stage F,
and then used as the now parameter for adj_rcv_time(). This is explicitly
not shown in the code so as to highlight the most simple implementation
option that should be sufficient for most node types.</t>

</section>
<section anchor="glbfdequeue"><name>glbf_dequeue()</name>

<figure title="Pseudocode for glbf_dequeue()" anchor="FIG-glbf-dequeue-"><artwork><![CDATA[
void glbf_dequeue(oif) {
  next_packet: while(1) {
    tnow = now()
    ftd = tnow + 1  // time of first packet to send
    fq = NULL      // queue of first packet to send
    foreach prio in maxpriority...minpriority {
      foreach iif in iifs {
        foreach pprio in priorities}
          // find qhead with earliest departure time
          if (q = q(oif,iif,prio,pprio).qhead) {
            td = q.qhead.td   // target (departure) time
            if td < ftd
              ftd = td
              fq = q
            }
          }
        }
      }
      if fq { // found packet
        pak = dequeue(q,oif)
        glbf_send(oif,tnow,pak)
        break next_packet
      }
    }
  }
}
]]></artwork></figure>

<t>glbf_dequeue() finds the gLBF packet to send as the enqueued packet with the highest
priority and the earliest departure time td (as calculated in glbf_enqueue()),
where td must also not in the future, because otherwise the packet still needs to
be dampened.</t>

<t>The outer loops across this hops prio will find the packet
with exactly those properties, dequeues and sends it. For this,
the  strict priority is expressed through the term maxpriority...minpriority,
which first searches from maximum to minimum priority..</t>

<t>The two inner loops simply look for the packet with the earliest
target departure time across all the (IIF,pprio) timed FIFO queues
for the same prio and OIF.</t>

<t>In ASIC / FPGA implementations, finding this packet is not a sequential
operation as shown in the pseudocode, but can be a single clock-cycle
parallel compare operation across the td values of all queues qheads - at the expense of
chip space, similar to how TCAMs work.</t>

</section>
<section anchor="glbfsend"><name>glbf_send()</name>

<figure title="Reference pseudocode for glbf dequeue" anchor="FIG-glbf-dequeue"><artwork><![CDATA[
void glbf_send(oif,tnow,pak) {
  qtime = tnow - pak.context.td          // \[1]
  td = pak.context.max1 - qtime - FUDGE2 // \[2]
  pak.header.tdamp = td
  serialize(oif,pak)
}
]]></artwork></figure>

<t>Sending packet pak represents the marking block M in the specification.
This needs to calculate the new damping value t and update it in the
packet header before sending the packet.</t>

<t>td needs to be the maximum time max1 that the packet could have
stayed in priority queuing minus the time qtime that it actually did stay in
the queue and minus any additional time FUDGE2 that the packet will still
needs to be processed by the router before its first bit will show up
on the sending interface. This is calculated as shown in 
in [1] and [2] of <xref target="FIG-glbf-dequeue"/>.</t>

<t>The primary factor impacting FUDGE2 is whether or not this calculation and
updating of the packet header td field can be done directly before serialization
starts, or whether it potentially would need to be done while there is
still another packet in the process of being serialized on the interface.
Taking the added latency of a currently serializing packet into account
can for example be implemented by remembering the timestamp of when
that packet started to be serialized and its length - and then taking
that into account to calculate FUDGE2.</t>

</section>
</section>
<section anchor="performance-considerations"><name>Performance considerations</name>

<t>IEEE 802.1 PTP clock synchronization does need to capture the accurate
arrival time of PTP packets. It is also measuring the residency time
of PTP packets between receiving and sending the packet with an
accuracy of nsec and add this to a PTP packet header field  (correctionField).
Given how this needs to be a hardware supported functionality, it is
unclear whether there is a relevant difference supporting this for
few PTP signaling packets as compared to a much larger number of
gLBF data packets - or whether it is a good indication of the feasibility
packet processing steps gLBF requires.</t>

</section>
</section>
<section anchor="history-and-comparison-with-other-bounded-latency-methods"><name>History and comparison with other bounded latency methods</name>

<t>Preceding this work, the best solution to solve the requirements outlined in
this document, where <xref target="TCQF"/> and <xref target="SCQF"/>, which are proven to
be feasible for high speed forwarding planes, because of vendor high-speed
forwarding plane implementation using low-cost FPGA for cyclic queuing. On the other hand,
it was concluded from implementation analysis, that <xref target="UBS"/> was infeasible for the
same type of high-speed, low-cost hardware due to the need for high-speed
flow-state operations, especially read/write cycles to update the state for every packet
at packet processing speeds.</t>

<t>While TCQF and <xref target="SCQF"/> are very good solution proven to work
at high-speed, low cost, available for deployment and ready for standardization, 
the need for network wide and hop-by-hop clock synchronization (albeit at lower
accuracy than required for other mechanisms feasible at high-speed, low-cost) as well
as the need to find network wide good compromise clock cycle times makes planning and
managing them in dynamic, large-scale and/or low-cost network solutions still more complex
to operationalize than what the authors wished for.</t>

<t>In parallel to short term operationalizable solutions <xref target="TCQF"/> and <xref target="SCQF"/>, <xref target="LBF"/> was researched,
which is exploring a wide range of options to signal and control latency through advanced
per-hop processing and in-packet latency related new header elements. Unfortunately, with
the flexibility of <xref target="LBF"/> it was impossible to find a calculus for simple admission control. 
Ultimately, <xref target="gLBF"/> was designed out of the desire to have a mechanism 
derived from <xref target="LBF"/> that also provides guaranteed bounded latency, has the flexibility
benefits of <xref target="UBS"/> with respect to fine-grained and per-hop independent latency
management but does hopefully still fits the limits of what can be implemented in
high-speed, low-cost forwarding/queuing hardware.</t>

<t>This high-speed hardware forwarding feasibility of gLBF has yet to be proven.
Here are some comsiderations, why the authors think that this should be well
feasible:</t>

<t>The total number of FIFO that a platform needs to support is comparable to
the number of queues already supportable in the same type of devices today,
except that service provider core nodes may not all implement that many,
because absent of DetNet services, there is no requirement for them.</t>

<t>The need to implement timed FIFOs (if the proposed high-speed implementation
approach is used) is equal or less complex to shapers, which by now have
also started to appear on high-speed (100Gbps and faster) core routers,
primarily due to high-speed virtual leased line type of services.</t>

<t>The re-marking of packet header fields derived from the calculated
latency of the packet experienced in the node is arguably something where
iOAM type functionality likely provides also prior evidence of feasibility in
high speed hardware forwarding planes. Similarily, processing of PPT timing
protocol packets also have similar requirements.</t>

<t>Even when implementation challenges at high-speed, low-cost make gLBF a
longer term option in those networks, implementation at low-speed (1/10 Gbps)
such as in manufacturing or cars may be an interesting option to explore given
how it has the no-jitter benefits of <xref target="CQF"/> without the need for cycle
management or clock-synchronization: Best of both worlds <xref target="CQF"/> and TSN-ATS ??</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIACOYiGYAA+2963IbV5Yu+H8/RY4cEwdoA+BFF0uMruqmRMlWHUmWTbp9
Zso9FQkgQWYJyIQzE6RoWRHnIeYJ50nOuu+1E0lJVdEdU9FxVFEmCeRlX9Ze
9/Wt6XQaFvWyrC5Psl23mj4OoSu7dXGSnRVd0WzKqmy7cpG9KbqbunkH12Uj
+Ab+HGdneZdnb9d5VWTT7HKXN3nVFcUye5V3RbW4zZ7mLfz1om5u8mZJd16+
evpinK3qJpvXu2oJ367l2puyu8rW9U3217KD92Z5tczy9rZaXDV1Ve9avEkf
U1bDg2tDPp83xfVJtiy6quiml+v5KizrRZVvYELLJl9102Lxrmi6qbtieng/
3MD0z55fvHl+ERYwosu6uT3J2m4Zym1zknXNru2ODw+fHB6HtmuKfHOSvXx+
8SLAXzDQv+TruoIX3BZt2JYnIcuyrl7w3/z7sth2VyfZQ/yzrRt4xKq179vb
TfL3ot5siqqTD0K+667qBp86xW/xH8/noi6addG22XOakn5ZNzCXF7tu1xQ3
RZldFIurql7Xl2XRZj+dn+plOI+iO8mOj48Ps2fwviZfZ8/fbxt44k1+q5ct
yg5W4hx2Ns+erWGL7Yt6CWN4dpo9eXj48DB+uoMnwR3uTcUmL9ewiF3xr4t2
tsp3s2Wh3zU1klqxLLu62Z/h6bp4D+sL5PBsXWw2yQzPbzfbuoPJ9Qf0BUNZ
75Y35eW/LvChM3ja/pvPuwKorcueNrcw9eTFL2FA2wL+Ez+Xx7bzf235vjnd
NoOd3B/Nf9ePBt+6yqvsOySANnnp//0ie9GUxbIpF1ftVb4qquz02/7r6e7Z
Fd39r7+t3DLb28+eh1DVzSbvyusCaerHF8+Oj48OTzL7/Vg/fvDNA/n1/vE3
h/Lr40cPH+qvcCL01yeP4NpQVqves+8fHz6RXx88/ibe+eSR/vrgUF8I3z+w
591/bL8+1mufHB7Zr8eP9LYn8A54d5adP/vhBWzP9Gy2uCoqPeFtM50jH5oK
x5kKx4EbXp2fveEbfi3z6lLvACq/LKbtIl8X8hFce2EPTxlIt/h1hS/Hb5b4
kF93xQ6Y1BQZ2nSzW3flFp6zuF2sy8V0vlutiqbFkT99+fzH6cVzfmZZAOud
l0Uz7Ypp3hBRn715+sp9K+/bnwVeAVtfVjDVrq1O/p7B7M+r957ptqnncFxa
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
A2tNTGUsHKnKSQ/JvddGym+Jf3IFtI0rAVsiM+PraXZ0eJhttxuw/XJ29WUb
4Cbw/jFre3k4egiXYFgmRUVDhwl88Xq+bePYZN7qE7GcwIjGYxWl2Am0ECga
UgZbwSvHcQJhEkEh5oy1GfPotGSCktrHGoaok0mrdLaPggIMRgXUekIwOyaw
wyWp/qN/UVRQjs9S5D1QbMm5HQdS2occQbrwgTRx78oVj5mab9Y0RtR1V20d
bPfU/ZskqkvXiIu32VT0T24EzUA15PEjSXRA9cZw6nlTBf6QV4scShNdDFSg
rggavmg2YWhaBNWUpNyXjSHxaYU1Bi9+Pn1jeNKMmy3dN4aeWloEl/w9ePTI
qadzXOQzWDb6CM/s8cPD7L9T1hRBl82wxc8Q6B6e5qPLhEZLfdhOHwaXHD/2
JE44JyUC/1HmBUcdquSED86hN4HoGHWuItPJqPPiFPSL7VSLt50SFuBwHUqR
PR2Vxif+xzR6lItS1UF6KZWfY+QruqqiQuUn8BnipbY+HeHt4cjUj36hqo1C
NJOXjwKS13qgtDTdkqxTqcbM2zsimRxFhyXJFh2BOgm6loxE4gxe/hBmtDqS
/Eta7alX18qk+eWaOg8HRwSOOpljfWEM6Km0HBCvhmnmxEcS1zbKsO5icBO3
i2Dn/H50khIHtc+Soi0q0PogZqGunLyU3GoaNOaBocTVdwmvpWPfZ6ro+Omd
BTlDyuoFw0DO0CFT+AABzRhujgqMxLGe7D+3RsCbHYfTQvzAoTJSIx9ZnJIb
+9lkbxW/HBtVOvd6skWiuwH9C+ICRUAwIwobUYv+w8Gzl2BRoXMLN/85/+rz
KFFlk8amsIf8PTXOwNZDC7rE9cBp2dZSO0cMLc1OU3M8epAEf1wuiM4nuZEb
dAmVYLMJjeKSuumMe70mCf1xmauTfdKUtodJqtB1SRvTwm7f0yZHLSF8syn5
+qfzC94whymhzE7zY3WUXQNkEbUet0SEMpe6LJz5p/cRvItARsjwDAaY2+0m
sLXCkQgIgxwc9EJacGHZfpNoJmYDhDyGPWmniyZtwWnGnksmlGRvn1DFLibq
h0eYyxIYlh4hqVXVDgyLgKJ1AKYNUaHI0ie/WdGz5l1whpykzxHVKLqG5uvE
RDoSMRZVz/V9E1GlHdHT4gn5JIt3+n+ZzUkImS5ofJVTKUrjSlmWsZRlZuD8
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

-->

</rfc>

